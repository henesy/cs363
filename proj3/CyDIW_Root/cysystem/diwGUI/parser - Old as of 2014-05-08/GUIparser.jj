/* 
 * Xinyuan Zhao, Nov 14, 2007
 * The parser for the integrated GUI
 * 
 */options{  STATIC = false;}PARSER_BEGIN(GUIparser)package cysystem.diwGUI.parser;import java.io.BufferedInputStream;import java.io.StringReader;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.FileReader;import java.io.FileWriter;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.util.*;import cysystem.diwGUI.gui.*;//import sql.SQLParser;
import storagemanager.*;import cycsx.csxpagination.util.*;import cysystem.diwGUI.gui.treeViewerMgr.TreeViewer.HybridView;//import nc94.commandparser.NC94Parser;
//import btree.btreeparser.BTreeParser;
//import tdb.commandparser.TdbParser;
//import cs562projects.*;
public class GUIparser{  private static GUIparser tmpparser;  private static GUIparser tmp2parser;  private static DBGui mnCanvas;  private static String [] filelist;  private static Hashtable < String, Integer > htIntList;  private static Hashtable < String, String > htStringList;  private static Hashtable < String, String [] > htStringArrayList;  private static Hashtable < String, Integer > htStringArrayIndex;  private static Hashtable < String, int [] > htIntArrayList;  private static Hashtable < String, Integer > htIntArrayIndex;  private static String [] loglist;  private static int logcount, intcount, stringcount, error, forlogon, parent;  private static String forlogname;  public static StorageManagerParser csxParser;  static  {    logcount = 0;    intcount = 0;    stringcount = 0;    loglist = new String [50];    parent = 0;    htIntList = new Hashtable < String, Integer > ();    htStringList = new Hashtable < String, String > ();    htStringArrayList = new Hashtable < String, String [] > ();    htStringArrayIndex = new Hashtable < String, Integer > ();    htIntArrayList = new Hashtable < String, int [] > ();    htIntArrayIndex = new Hashtable < String, Integer > ();  }  // Modified by xiaofeng wang 
  public GUIparser(StringReader stream, DBGui mf, StorageUtils utils, CanStoreXUtil cUtil)  {    this (stream);    mnCanvas = mf;    csxParser = new StorageManagerParser(mf, utils, cUtil);    mnCanvas.addConsoleMessage("GUI Parser Version 1.0 launched");    mnCanvas.setOutputPaneType("text/html");  }  public void setGUIFrame(DBGui mf)  {    mnCanvas = mf;    mnCanvas.addConsoleMessage("GUI Parser Version 1.0 launched");  }  public void errormsg(String str)  {    mnCanvas.addConsoleMessage("\nError : " + str + "\n");    mnCanvas.addConsoleMessage("--------Parsing is forced to stop--------");  }  public void createLogFile(String roottag, String fname)  {    File fl = new File(mnCanvas.clientsmgr.getCydiwWorkspace() + fname);    try    {      fl.createNewFile();    }    catch (IOException e1)    {      e1.printStackTrace();    }    try    {      FileWriter fWriter = new FileWriter(fl);      fWriter.write(roottag);      fWriter.append("#</" + roottag.substring(1));      fWriter.flush();      fWriter.close();    }    catch (IOException e)    {      e.printStackTrace();    }  }  public void updateLogFile(String tag, String content, String fname)  {    try    {      System.out.println("Tag: " + tag + ": " + content + ": " + fname);      FileInputStream fis = new FileInputStream(mnCanvas.clientsmgr.getCydiwWorkspace() + fname);      int x = fis.available();      byte b [] = new byte [x];      fis.read(b);      String fileContent = new String(b);      String [] lines = fileContent.split("#");      File fl = new File(mnCanvas.clientsmgr.getCydiwWorkspace() + fname);      FileWriter fWriter = new FileWriter(fl);      fWriter.write(lines [0]);      fWriter.append(tag + content + "</" + tag.substring(1));      int i;      for (i = 1; i < lines.length; i++) fWriter.append("#" + lines [i]);      fWriter.flush();      fWriter.close();    }    catch (IOException e)    {      e.printStackTrace();    }  }  // add the tag and "#" for forLoopLog in the log file
  public void startConditionLog(String tag, String fname)  {    try    {      FileInputStream fis = new FileInputStream(mnCanvas.clientsmgr.getCydiwWorkspace() + fname);      int x = fis.available();      byte b [] = new byte [x];      fis.read(b);      String content = new String(b);      String [] lines = content.split("#");      File fl = new File(mnCanvas.clientsmgr.getCydiwWorkspace() + fname);      FileWriter fWriter = new FileWriter(fl);      fWriter.write(lines [0]);      fWriter.append(tag + "#</" + tag.substring(1));      int i;      for (i = 1; i < lines.length; i++) fWriter.append("#" + lines [i]);      fWriter.flush();      fWriter.close();    }    catch (IOException e)    {      e.printStackTrace();    }  }  /**
	 * add the tag, control variable value and "#" for forLoopLog in the log file
	 * Note: controlVar has to be an integer
	 */  public void startForLog(String tag, int controlVar, String fname)  {    try    {      FileInputStream fis = new FileInputStream(mnCanvas.clientsmgr.getCydiwWorkspace() + fname);      int x = fis.available();      byte b [] = new byte [x];      fis.read(b);      String content = new String(b);      String [] lines = content.split("#");      File fl = new File(mnCanvas.clientsmgr.getCydiwWorkspace() + fname);      FileWriter fWriter = new FileWriter(fl);      fWriter.write(lines [0]);      String startingTag = replaceVariableInString(tag);      //String startingTag = tag.substring(0, tag.length()-1) + " ControlVariable=\"" + controlVar + "\">";
      if (tag.contains(" ")) fWriter.append(startingTag + "#</" + tag.substring(1, tag.indexOf(" ")) + ">");      else fWriter.append(startingTag + "#</" + tag.substring(1));      int i;      for (i = 1; i < lines.length; i++) fWriter.append("#" + lines [i]);      fWriter.flush();      fWriter.close();    }    catch (IOException e)    {      e.printStackTrace();    }  }  // remove the ending # for forLoopLog from the log file
  public void endForLog(String fname)  {    try    {      FileInputStream fis = new FileInputStream(mnCanvas.clientsmgr.getCydiwWorkspace() + fname);      int x = fis.available();      byte b [] = new byte [x];      fis.read(b);      String content = new String(b);      String [] lines = content.split("#");      File fl = new File(mnCanvas.clientsmgr.getCydiwWorkspace() + fname);      FileWriter fWriter = new FileWriter(fl);      // remove the first # between lines[0] and lines[1]
      if (lines.length >= 2) fWriter.write(lines [0] + lines [1]);      else fWriter.write(lines [0]);      int i;      if (lines.length > 2) for (i = 2; i < lines.length; i++) fWriter.append("#" + lines [i]);      fWriter.flush();      fWriter.close();    }    catch (IOException e)    {      e.printStackTrace();    }  }  public void foreachsend(String s1, String s2)  {    int tt = 0;    //System.out.println("s1: " + s1 + "    s2: " + s2);
    String [] lineControl = s1.split(":");    String strControlVar = lineControl [0];    String [] lines = null;    int len;    int startIndex = 0;    int endIndex;    // there are two types of loop head :(3,6) or :3,4,5,6 loopEnumOn is used to identify the type of loophead
    boolean loopEnumOn = true;    String forLoopLog = null;    if (lineControl.length > 2) forLoopLog = lineControl [2];    if (lineControl [1].trim().startsWith("(") && lineControl [1].trim().endsWith(")"))    {      loopEnumOn = false;      String loopCondition = lineControl [1].trim();      startIndex = Integer.parseInt(loopCondition.substring(1, loopCondition.indexOf(",")).trim());      endIndex = Integer.parseInt(loopCondition.substring(loopCondition.indexOf(",") + 1, loopCondition.length() - 1).trim());      if (endIndex < startIndex)      {        System.out.println("Error: The ending index must be no less than the starting index in the \"foreach\" loop condition.");        mnCanvas.addConsoleMessage("Error: The ending index must be no less than the starting index in the \"foreach\" loop condition.");        return;      }      len = endIndex - startIndex + 1;    }    else    {      loopEnumOn = true;      lines = lineControl [1].split(",");      len = lines.length;    }    int i;    for (i = 0; i < len; i++)    {      //set the value of the control variable
      int currentControlValue;      if (loopEnumOn)      {        currentControlValue = Integer.parseInt(lines [i]);        htIntList.put(strControlVar, currentControlValue);      }      else      {        currentControlValue = startIndex++;        htIntList.put(strControlVar, currentControlValue);      }      // insert forloop tags and # in the log file
      if (forLoopLog != null)      {        String [] tags = forLoopLog.split(",");        if (tags.length >= 2)        {          startForLog(tags [0], currentControlValue, tags [1]);        }      }      tmpparser = new GUIparser(new StringReader(s2));      try      {        tmpparser.ProductionRules();        //System.out.println("GUI Parser Version 1.0:  GUI program parsed successfully.");
        //System.out.println("****************************************");
      }      catch (ParseException e1)      {        System.out.println(e1.getMessage());        System.out.println("GUI Parser Version 1.0:  Encountered errors during parse.");      }      // remove the ending # from the log file
      if (forLoopLog != null)      {        String [] tags = forLoopLog.split(",");        if (tags.length >= 2)        {          endForLog(tags [1]);        }      }    }  }  public void conditionsend(String s)  {    // format: if(true|false)::log>> TAG,FILE::Blockstmt()::else::log>> TAG,FILE::Blockstmt()
    String [] lineControl = s.split("::");    String ifHead = null, ifLog = null, ifBody = null, elseHead = null, elseLog = null, elseBody = null;    // get ifHead, ifBody, elseHead, elseBody
    if (lineControl.length >= 2)    {      ifHead = lineControl [0].trim();      if (!ifHead.startsWith("if"))      {        System.out.println("Error: The format of the \"if/else\" statement is incorrect.");        mnCanvas.addConsoleMessage("Error: The format of the \"if/else\" statement is incorrect.");        return;      }      int ifEnd = 0;      if (lineControl [1].trim().startsWith("log>>"))      {        if (lineControl.length < 3)        {          System.out.println("Error: The format of the \"if/else\" statement is incorrect.");          mnCanvas.addConsoleMessage("Error: The format of the \"if/else\" statement is incorrect.");          return;        }        ifLog = lineControl [1].substring(5).trim();        ifBody = lineControl [2].trim();        ifEnd = 2;      }      else      {        ifBody = lineControl [1];        ifEnd = 1;      }      if (lineControl.length > ifEnd + 2)      {        elseHead = lineControl [ifEnd + 1].trim();        if (!elseHead.startsWith("else"))        {          System.out.println("Error: The format of the \"if/else\" statement is incorrect.");          mnCanvas.addConsoleMessage("Error: The format of the \"if/else\" statement is incorrect.");          return;        }        if (lineControl [ifEnd + 2].trim().startsWith("log>>"))        {          if (lineControl.length < ifEnd + 4)          {            System.out.println("Error: The format of the \"if/else\" statement is incorrect.");            mnCanvas.addConsoleMessage("Error: The format of the \"if/else\" statement is incorrect.");            return;          }          elseLog = lineControl [ifEnd + 2].substring(5).trim();          elseBody = lineControl [ifEnd + 3].trim();        }        else        {          elseBody = lineControl [ifEnd + 2];        }      }    }    else    {      System.out.println("Error: The format of the \"if/else\" statement is incorrect.");      mnCanvas.addConsoleMessage("Error: The format of the \"if/else\" statement is incorrect.");      return;    }    // if both ifHead and elseHead are not null
    if (elseHead != null)    {      // evaluate the ifHead
      ifHead = ifHead.substring(2);      if (ifHead.equalsIgnoreCase("(true)") || ifHead.equalsIgnoreCase("(1)"))      {        // update the log file
        if (ifLog != null)        {          String [] tags = ifLog.split(",");          if (tags.length >= 2)          {            startConditionLog(tags [0], tags [1]);          }        }        // execute ifBody
        tmpparser = new GUIparser(new StringReader(ifBody));        try        {          tmpparser.ProductionRules();        }        catch (ParseException e1)        {          System.out.println(e1.getMessage());          System.out.println("GUI Parser Version 1.0:  Encountered errors during parse.");        }        // remove the ending # from the log file
        if (ifLog != null)        {          String [] tags = ifLog.split(",");          if (tags.length >= 2)          {            endForLog(tags [1]);          }        }      }      else      {        // update the log file
        if (ifLog != null)        {          String [] tags = ifLog.split(",");          if (tags.length >= 2)          {            startConditionLog(tags [0], tags [1]);          }        }        // execute ifBody
        tmpparser = new GUIparser(new StringReader(elseBody));        try        {          tmpparser.ProductionRules();        }        catch (ParseException e1)        {          System.out.println(e1.getMessage());          System.out.println("GUI Parser Version 1.0:  Encountered errors during parse.");        }        // remove the ending # from the log file
        if (ifLog != null)        {          String [] tags = ifLog.split(",");          if (tags.length >= 2)          {            endForLog(tags [1]);          }        }      }    }    // if only if block exists
    else    {      // evaluate the ifHead
      ifHead = ifHead.substring(2);      if (ifHead.equalsIgnoreCase("(true)") || ifHead.equalsIgnoreCase("(1)"))      {        // update the log file
        if (ifLog != null)        {          String [] tags = ifLog.split(",");          if (tags.length >= 2)          {            startConditionLog(tags [0], tags [1]);          }        }        // execute ifBody
        tmpparser = new GUIparser(new StringReader(ifBody));        try        {          tmpparser.ProductionRules();        }        catch (ParseException e1)        {          System.out.println(e1.getMessage());          System.out.println("GUI Parser Version 1.0:  Encountered errors during parse.");        }        // remove the ending # from the log file
        if (ifLog != null)        {          String [] tags = ifLog.split(",");          if (tags.length >= 2)          {            endForLog(tags [1]);          }        }      }      else return;    }  }  public void listVariables()  {    int i;    Enumeration e;    mnCanvas.addOutputPlainText("------------Variables List------------");    if (logcount > 0) mnCanvas.addOutputPlainText("Log files:");    for (i = 0; i < logcount; i++)    {      mnCanvas.addOutputPlainText("\t" + loglist [i]);    }    e = htIntList.keys();    if (e.hasMoreElements()) mnCanvas.addOutputPlainText("Integer variables:");    while (e.hasMoreElements())    {      String curKey = e.nextElement().toString();      mnCanvas.addOutputPlainText("\t" + curKey + " = " + htIntList.get(curKey).toString());    }    e = htIntArrayList.keys();    if (e.hasMoreElements()) mnCanvas.addOutputPlainText("Integer Array variables:");    while (e.hasMoreElements())    {      String curKey = e.nextElement().toString();      int iSizeArray = htIntArrayIndex.get(curKey);      mnCanvas.addOutputPlainText("\tsize of " + curKey + " = " + iSizeArray);      for (i = 0; i < iSizeArray; i++) mnCanvas.addOutputPlainText("\t" + curKey + "[" + i + "]" + " = " + (htIntArrayList.get(curKey)) [i]);    }    e = htStringList.keys();    if (e.hasMoreElements()) mnCanvas.addOutputPlainText("String variables:");    while (e.hasMoreElements())    {      String curKey = e.nextElement().toString();      mnCanvas.addOutputPlainText("\t" + curKey + " = " + htStringList.get(curKey));    }    e = htStringArrayList.keys();    if (e.hasMoreElements()) mnCanvas.addOutputPlainText("String Array variables:");    while (e.hasMoreElements())    {      String curKey = e.nextElement().toString();      int iSizeArray = htStringArrayIndex.get(curKey);      mnCanvas.addOutputPlainText("\tsize of " + curKey + " = " + iSizeArray);      for (i = 0; i < iSizeArray; i++) mnCanvas.addOutputPlainText("\t" + curKey + "[" + i + "]" + " = " + (htStringArrayList.get(curKey)) [i]);    }    mnCanvas.addOutputPlainText("\n");  }  // Added by Xiaofeng Wang
  public void listVariable(String var)  {    if (var.contains("$"))     var = var.substring(2);    // This variable are element of array
    if (var.contains("["))    {      // Find out the key;
      String variableName = var.substring(0, var.indexOf("["));      int index = Integer.parseInt(var.substring(var.indexOf("[") + 1, var.indexOf("]")));      if (htStringArrayList.containsKey(variableName))      {        mnCanvas.addOutputPlainText("String Array variable:");        if (index >= htStringArrayIndex.get(variableName))        {          mnCanvas.addOutputPlainText("The index exceeds the array index, please recheck");          return;        }        mnCanvas.addOutputPlainText("\t" + variableName + "[" + index + "]" + " = " + (htStringArrayList.get(variableName)) [index]);        return;      }      if (htIntArrayList.containsKey(variableName))      {        mnCanvas.addOutputPlainText("Integer Array variable:");        if (index >= htStringArrayIndex.get(variableName))        {          mnCanvas.addOutputPlainText("The index exceeds the array index, please recheck");          return;        }        mnCanvas.addOutputPlainText("\t" + variableName + "[" + index + "]" + " = " + (htIntArrayList.get(variableName)) [index]);        return;      }    }    else    {      if (htIntList.containsKey(var))      {        // This variable is integer variable
        mnCanvas.addOutputPlainText("The variable " + var + ":= " + htIntList.get(var));      }      else if (htStringList.containsKey(var))      {        // This variable is string variable
        mnCanvas.addOutputPlainText("The variable " + var + ":= " + htStringList.get(var));      }      else if (htIntArrayList.containsKey(var))      {
                int iSizeArray = htIntArrayIndex.get(var);        mnCanvas.addOutputPlainText("\tsize of " + var + " = " + iSizeArray);        for (int i = 0; i < iSizeArray; i++)         mnCanvas.addOutputPlainText("\t" + var + "[" + i + "]" + " = " + (htIntArrayList.get(var)) [i]);      }      else if (htStringArrayList.containsKey(var))      {
                int iSizeArray = htStringArrayIndex.get(var);        mnCanvas.addOutputPlainText("\tsize of " + var + " = " + iSizeArray);        for (int i = 0; i < iSizeArray; i++)         mnCanvas.addOutputPlainText("\t" + var + "[" + i + "]" + " = " + (htStringArrayList.get(var)) [i]);      }      return;    }    mnCanvas.addOutputPlainText("This variable does't exist");  }  public void clearLogs()  {    logcount = 0;    loglist = new String [50];  }  public void clearVariables()  {    intcount = 0;    stringcount = 0;    htIntList.clear();    htIntArrayList.clear();    htIntArrayIndex.clear();    htStringList.clear();    htStringArrayList.clear();    htStringArrayIndex.clear();  }  public void listCommands()  {    mnCanvas.addOutputPlainText("$CyDB Commands List:");    mnCanvas.addOutputPlainText("$CyDB:> list commands;");    mnCanvas.addOutputPlainText("$CyDB:> list variables;");    mnCanvas.addOutputPlainText("$CyDB:> declare <int/string/int[]/string[] Type> <Variable> [:= <AssigningValues>];");    mnCanvas.addOutputPlainText("$CyDB:> undeclare <int/string/int[]/string[] Type> <Variable>;");    mnCanvas.addOutputPlainText("$CyDB:> set <Variable> := <AssigningValues>;");    mnCanvas.addOutputPlainText("$CyDB:> execute <Variable>;");    mnCanvas.addOutputPlainText("$CyDB:> foreach <Variable> in (<ExpressionsList>) [log <custom/time> >> <RootTag> <XMLFileName>] { <CommandsList> }");    mnCanvas.addOutputPlainText("$CyDB:> createlog <RootTag> <XMLFileName>;");    mnCanvas.addOutputPlainText("$CyDB:> plotSWF <XMLFileName>;");    mnCanvas.addOutputPlainText("$CyDB:> displayfile <XML/TXT FileName>;");    mnCanvas.addOutputPlainText("$CyDB:> displayPDF <PDF FileName>");    mnCanvas.addOutputPlainText("$CyDB:> displayXML <XML FileName>");    mnCanvas.addOutputPlainText("$CyDB:> displayTXT <txt FileName>");    mnCanvas.addOutputPlainText("$CyDB:> createfile <XML/BXML/CXML FileName> <FileSize>;");    mnCanvas.addOutputPlainText("$CyDB:> copyfile <XML/BXML/CXML FileName> <XML/BXML/CXML FileName>;");    mnCanvas.addOutputPlainText("$CyDB:> deletefile <XML/BXML/CXML FileName>;");    //mnCanvas.addOutputPlainText("$CyDB:> createRawStorage <StorageConfigXMLFile>;");
    //	mnCanvas.addOutputPlainText("$CyDB:> useStorage <StorageConfigXMLFile>;");
    mnCanvas.addOutputPlainText("$CyDB:> createStorage <StorageConfigXMLFile>;");    mnCanvas.addOutputPlainText("$CyDB:> loadStorage <StorageConfigXMLFile>;");    //mnCanvas.addOutputPlainText("$CyDB:> formatStorage <PageSize>;");
    mnCanvas.addOutputPlainText("$CyDB:> ReformatStorage <StorageConfigXMLFile> <PageSize>;");    mnCanvas.addOutputPlainText("$CyDB:> startBufferManager <BufferPoolSize>;");    mnCanvas.addOutputPlainText("$CyDB:> showdirectory;");    mnCanvas.addOutputPlainText("$CyDB:> writeBitMap;");    mnCanvas.addOutputPlainText("$CyDB:> getPageAllocatedCount;");    mnCanvas.addOutputPlainText("$CyDB:> getPageDeallocatedCount;");    mnCanvas.addOutputPlainText("$CyDB:> getPageRequestCount;");    mnCanvas.addOutputPlainText("$CyDB:> getPageAccessCount;");    mnCanvas.addOutputPlainText("$CyDB:> getPageAccessRelativeCount;");    mnCanvas.addOutputPlainText("$CyDB:> resetPageAccessRelativeCount;");  }  public int getparent()  {    return parent;  }  public void setparent(int t)  {    parent = t;  }  public String replaceVariableInString(String str)  {    // find all the ($$abc) variables
    int startIndex;    // Note: the value of any variable should not contain strings like "($$ .. )", since those must have been replaced before assigning them to a variable.
    while ((startIndex = str.indexOf("($$")) != - 1)    {      String var = str.substring(startIndex + 3);      int endIndex = var.indexOf(")");      var = var.substring(0, endIndex);      String regex = "($$" + var + ")";      String replacement = getVariableValue(var);      str = str.replace(regex, replacement);    }    return str;  }  /**
	 * return the value of the variable in StringHashtable or StringArrayHashtable
	 * return "" if the variable is not found, or the index is out of the bound
	 */  public String getVariableValue(String strVarName)  {    int iIndex = 0;    String varName;    boolean bArray;    if (strVarName.indexOf("[") >= 0)    {      varName = strVarName.substring(0, strVarName.indexOf("["));      String indexStr = strVarName.substring(strVarName.indexOf("[") + 1, strVarName.indexOf("]"));      if (indexStr.startsWith("$$")) iIndex = Integer.parseInt(getVariableValue(indexStr.substring(2)));      else iIndex = Integer.parseInt(indexStr);      bArray = true;    }    else    {      varName = strVarName;      bArray = false;    }    // look in the String and String Array hash table for this variable
    if (!bArray)    {      // s1 is a String variable
      if (htStringList.containsKey(varName))      {        return htStringList.get(varName);      }      else if (htIntList.containsKey(varName))      {        return Integer.toString(htIntList.get(varName));      }      return "";    }    else    {      if (htStringArrayList.containsKey(varName))      {        // s1 is a String array variable
        if (iIndex >= htStringArrayIndex.get(varName).intValue()) return "";        return ((String []) htStringArrayList.get(varName)) [iIndex];      }      else if (htIntArrayList.containsKey(varName))      {        // s1 is a int array variable
        if (iIndex >= htIntArrayIndex.get(varName).intValue()) return "";        return Integer.toString(((int []) htIntArrayList.get(varName)) [iIndex]);      }      else return "";    }  }  /**
	 * setVariable value the value of the variable in StringHashtable or StringArrayHashtable
	 * update the value of variable
	 */  public void setVariableValue(String strVarName, String varValue)  {    int iIndex = 0;    String varName;    boolean bArray;    if (strVarName.indexOf("[") >= 0)    {      varName = strVarName.substring(0, strVarName.indexOf("["));      //   varName = varName.substring(varName.indexOf("$"+2));
      String indexStr = strVarName.substring(strVarName.indexOf("[") + 1, strVarName.indexOf("]"));      if (indexStr.startsWith("$$")) iIndex = Integer.parseInt(getVariableValue(indexStr.substring(2)));      else iIndex = Integer.parseInt(indexStr);      bArray = true;    }    else    {      varName = strVarName;//      varName = varName.substring(varName.indexOf("$") + 2);      bArray = false;    }    if (htStringList.containsKey(varName)) htStringList.put(varName, varValue);    else if (htIntList.containsKey(varName)) htIntList.put(varName, Integer.parseInt(varValue));  }  public boolean checkLogFileExist(String logName)  {    for (int i = 0; i < logcount; i++) if (loglist [i].equals(logName))    {      return true;    }    return false;  }}PARSER_END(GUIparser)/* WHITE SPACE */SKIP :{  " "| "\t"| "\n"| "\r"| "\f"}/* COMMENTS */MORE :{  /*
  "//" : IN_SINGLE_LINE_COMMENT
|
*/  < "/**" ~[ "/" ] >  {    input_stream.backup(1);  }  : IN_FORMAL_COMMENT| "/*" : IN_MULTI_LINE_COMMENT}< IN_SINGLE_LINE_COMMENT >SPECIAL_TOKEN :{  < SINGLE_LINE_COMMENT :    "\n"  | "\r"  | "\r\n"  | ";" > : DEFAULT}< IN_FORMAL_COMMENT >SPECIAL_TOKEN :{  < FORMAL_COMMENT : "*/" > : DEFAULT}< IN_MULTI_LINE_COMMENT >SPECIAL_TOKEN :{  < MULTI_LINE_COMMENT : "*/" > : DEFAULT}< IN_SINGLE_LINE_COMMENT, IN_FORMAL_COMMENT, IN_MULTI_LINE_COMMENT >MORE :{  < ~[ ] >}TOKEN :{  < CYDBPREFIX : "$" [ "C", "c" ] [ "Y", "y" ] [ "D", "d" ] [ "B", "b" ] ":" >| < SQL : "SQL" >| < START_SHOWTEXT : "<" [ "S", "s" ] [ "H", "h" ] [ "O", "o" ] [ "W", "w" ] [ "T", "t" ] [ "E", "e" ] [ "X", "x" ] [ "T", "t" ] ">" >| < END_SHOWTEXT : "</" [ "S", "s" ] [ "H", "h" ] [ "O", "o" ] [ "W", "w" ] [ "T", "t" ] [ "E", "e" ] [ "X", "x" ] [ "T", "t" ] ">" >| < XSDFILE : ([ "a"-"z", "A"-"Z", "_", "0"-"9" ])* "." [ "x", "X" ] [ "s", "S" ] [ "d", "D" ] >| < FILENAME : ([ "a"-"z", "A"-"Z", ".", "_", "-", ":", "\\", "/", "0"-"9", "$", "(", ")", "[", "]" ])* "." ([ "b", "c" ])* [ "x", "X", "t", "T", "p", "P" ] [ "m", "M", "x", "X", "D", "d" ] [ "l", "L", "t", "T", "f", "F" ] >| < HOLD : "hold" >| < RUN : "run" >| < EXECUTE : "execute" >| < CURRENT : "current" >| < DISPLAY : "display" >| < DISPLAYXML : [ "D", "d" ] "isplay" [ "X", "x" ] [ "M", "m" ] [ "L", "l" ] >| < DISPLAYTXT : [ "D", "d" ] "isplay" [ "T", "t" ] [ "X", "x" ] [ "T", "t" ] >| < DISPLAYPDF : [ "D", "d" ] "isplay" [ "P", "p" ] [ "D", "d" ] [ "F", "f" ] >| < CLICK : "click" >| < PRESS : "press" >| < CLOSE : "close" >| < PAUSE : "pause" >| < OPERATIONSLOG : "logon" >| < LIST : "list" >| < CLEAR : "clear" >| < CLUSTERS : "clusters" >| < COMMANDS : "commands" >| < VARIABLES : "variables" >| < VARIABLE : "variable" >| < LOGS : "logs" >| < CREATEXML : "create" [ "L", "l" ] "og" >| < DISPLAYFILE : [ "D", "d" ] "isplay" [ "F", "f" ] "ile" >| < CONVERTSWF : "convert" [ "S", "s" ] [ "W", "w" ] [ "F", "f" ] >| < PLOTSWF : "plot" [ "S", "s" ] [ "W", "w" ] [ "F", "f" ] >| < SNAPSHOT : "snapshot" >| < CREATEFILE : "create" [ "F", "f" ] "ile" >| < COPYFILE : "copy" [ "F", "f" ] "ile" >| < GENERATEINDEX : "generateIndex" >| < PRINTINDEXELEMENTS : "printIndexedElements" >| < COUNTINDEXELEMENTS : "countIndexedElements" >| < PRINTBYEXACTMATCH : "printByExactMatch" >| < DELETEFILE : "delete" [ "F", "f" ] "ile" >| < SHOWDIRECTORY : "show" [ "D", "d" ] "irectory" >| < STORAGECOUNTERCOMMANDS :    < getPageAllocatedCount >  | < getPageDeallocatedCount >  | < getPageRequestCount >  | < getPageAccessCount >  | < getPageAccessRelativeCount >  | < resetPageAccessRelativeCount >>| < getPageAllocatedCount : [ "G", "g" ] "et" [ "P", "p" ] "age" [ "A", "a" ] "llocated" [ "C", "c" ] "ount" >| < getPageDeallocatedCount : [ "G", "g" ] "et" [ "P", "p" ] "age" [ "D", "d" ] "eallocated" [ "C", "c" ] "ount" >| < getPageRequestCount : [ "G", "g" ] "et" [ "P", "p" ] "age" [ "R", "r" ] "equest" [ "C", "c" ] "ount" >| < getPageAccessCount : [ "G", "g" ] "et" [ "P", "p" ] "age" [ "A", "a" ] "ccess" [ "C", "c" ] "ount" >| < getPageAccessRelativeCount : [ "G", "g" ] "et" [ "P", "p" ] "age" [ "A", "a" ] "ccess" [ "R", "r" ] "elative" [ "C", "c" ] "ount" >| < resetPageAccessRelativeCount : [ "R", "r" ] "eset" [ "P", "p" ] "age" [ "A", "a" ] "ccess" [ "R", "r" ] "elative" [ "C", "c" ] "ount" >| < CREATESTORAGE : [ "C", "c" ] "reate" [ "S", "s" ] "torage" >| < CREATERAWSTORAGE : [ "C", "c" ] "reate" [ "R", "r" ] "aw" [ "S", "s" ] "torage" >| < LOADSTORAGE : [ "L", "l" ] "oad" [ "S", "s" ] "torage" >| < USESTORAGE : [ "U", "u" ] "se" [ "S", "s" ] "torage" >| < FORMATSTORAGE : [ "F", "f" ] "ormat" [ "S", "s" ] "torage" >| < REFORMATSTORAGE : [ "R", "r" ] "e" [ "F", "f" ] "ormat" [ "S", "s" ] "torage" >| < STARTBUFFERMANAGER : [ "S", "s" ] "tart" [ "B", "b" ] "uffer" [ "M", "m" ] "anager" >| < DEMOFORSTORAGE : "demoForStorageAPIs" >| < WRITEBITMAP : [ "W", "w" ] "rite" [ "B", "b" ] "it" [ "M", "m" ] "ap" >| < HELP : "help" >| < STEP : "step" >| < SET : "set" >| < DECLARE : "declare" >| < UNDECLARE : "undeclare" >| < TYPE :    "int"  | "string" >| < LOAD : "load" >| < LOGDIRECT : "log" >| < LOGTYPE :    "custom"  | "time" >| < OUTDIRECT : "out" >| < IF : "if" >| < ELSE : "else" >| < OR :    "OR"  | "or" >| < AND :    "AND"  | "and" >| < FOREACH :    "foreach"  | "FOREACH" >| < IN :    "in"  | "IN" >| < WHILE :    "while"  | "WHILE" >| < BLOCKSTRING :    "{" (~[ "{", "}" ])*    (      (~[ "{", "}" ])* "{" (~[ "{", "}" ])*      (        (~[ "{", "}" ])* "{" (~[ "{", "}" ])* "}"      )*      (~[ "{", "}" ])* "}"    )*    (~[ "{", "}" ])* >| < COLON : ":" >| < COLONARROW : ":>" >| < SEMICOLON : ";" >| < LPAREN : "(" >| < RPAREN : ")" >| < LBRACKET : "[" >| < RBRACKET : "]" >| < GT : ">" >| < PLUS : "+" >| < MINUS : "-" >| < STAR : "*" >| < SLASH : "/" >| < ID : [ "a"-"z", "A"-"Z", "_", "/" ] ([ "a"-"z", "A"-"Z", "_", "/", "0"-"9" ])* >| < PREFIXID : "$" ([ "a"-"z", "A"-"Z", "_", "0"-"9" ])* >| < NUM : ([ "0"-"9", "." ])+ >| < CLUSTERNAME : < ID >>| < BUTTONNAME : < ID >>| < ROOTTAG : "<" (~[ ">" ])* ">" >| < QSTRING :
    ":>"
    (
      ~[ ";" ]
    |
      (
        "<" (" ")* ";" (" ")* ">"
      )
    )* > // Modified by Xiaofeng Wang, Original, please see xinyuan's| < ASSIGNSTRING : ":=" (~[ ";" ])* >| < REMARKSTRING : "//" (~[ ";" ])* >| < CONSTSTRING : "\"" (~[ "\"" ])* "\"" >}//Rule 0
void ProductionRules() :{  String s;  int i;}{  {}  (    s = Statement()    {}  )*  < EOF >  {}}//Rule 1, Condition() and Loophead() don't need any prefix.
String Statement() :{  Token t1, t2;  String s, s1, s2;  int i;}{  < START_SHOWTEXT >  {    //mnCanvas.addOutput("<pre>");
    mnCanvas.setOutputPaneHtml(false);    return "<showtext>";  }| < END_SHOWTEXT >  {    mnCanvas.setOutputPaneHtml(true);    //mnCanvas.addOutput("</pre>");
    return "</showtext>";  }| t1 = < REMARKSTRING > ";"  {    s = t1.image;    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput(s + ";");    mnCanvas.setOutputPaneBlueRemark(false);    //mnCanvas.addOutputBlankLine();
    return s;  }| < CYDBPREFIX > ">" s2 = Stmt()  {    //System.out.println("Rule 1 Statement = Prefix :> Stmt [ log>> <TAG> <XML> ] [ out>> <TAG> <XML> ] ;");
    mnCanvas.addOutputBlankLine();    s = s2;    return s + " ;";  }| t1 = < PREFIXID > t2 = < QSTRING > ";"  {    s1 = t1.image;    s = t2.image;    s = s.substring(2);

    // Modified by xiaofeng; begins
  int index = s.indexOf("<;>");
    while (index > 0)
    {
      s = s.substring(0, index) + ";" + s.substring(index + 3);
      index = s.indexOf("<;>");
    }
      // Xiaofeng adding ends    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput(s1 + ":>" + s + ";");    mnCanvas.setOutputPaneBlueRemark(false);    //mnCanvas.addOutputBlankLine();
    //send the prefix and the command to the ClientManager
    mnCanvas.clientsmgr.execute(s1.substring(1), s);    return s1 + ":>" + s + " ;";  }}//Rule 3, Stmt ...
String Stmt() :{  Token t, t1, t2, t3, tLogType;  String s = "", s1, s2 = "";  String varName, timeLog, customLog;  String logType = null, logTag = null, logFileName = null, outputFileName = null;  boolean bArray;  int i;  GUIparser parserExecuteCommand;}{  // "run" command - execute [Variable1] [Variable2]
  t = < RUN > s1 = Variable() s2 = Variable()  [    < OUTDIRECT > ">>" t3 = < FILENAME >    {      outputFileName = replaceVariableInString(t3.image);      //System.out.println("Output direct: " + replaceVariableInString(t3.image));	
    }  ]  [    < LOGDIRECT > tLogType = < LOGTYPE > ">>" t1 = < ROOTTAG > t2 = < FILENAME >    {      logType = tLogType.image;      logTag = t1.image;      logFileName = t2.image;    }  ]  ";"  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> " + t.image + " " + s1 + ":> " + s2 + ";");    mnCanvas.setOutputPaneBlueRemark(false);    if (outputFileName == null) outputFileName = "output.xml";    parserExecuteCommand = new GUIparser(new StringReader(getVariableValue(s1) + ":> " + outputFileName + ":> " + getVariableValue(s2) + ";"));    mnCanvas.clientsmgr.clearLogData();    try    {      parserExecuteCommand.ProductionRules();    }    catch (ParseException e1)    {      System.out.println(e1.getMessage());    }    if (logType != null && logFileName != null)    {      timeLog = mnCanvas.clientsmgr.getCurrentTimeLogData();      customLog = mnCanvas.clientsmgr.getCurrentCustomLogData();      s = "$CyDB:> run " + s1;      error = 1;      for (i = 0; i < logcount; i++) if (loglist [ i ].equals(logFileName))      {        error = 0;      }      if (error == 1)      {        mnCanvas.addConsoleMessage("\nThe file \"" + logFileName + "\" does not exist");        errormsg("FILE " + logFileName + " not found");        return " FILE " + logFileName + " not found";      }      else      {        if (logType.equalsIgnoreCase("custom")) updateLogFile(logTag, customLog, logFileName);        else if (logType.equalsIgnoreCase("time")) updateLogFile(logTag, timeLog, logFileName);        else updateLogFile(logTag, "", logFileName);        s += " log>> .xml";      }    }    return s;  }  // "execute" command - execute [Variable Name]
| t = < EXECUTE > s1 = Variable()  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> " + t.image + " " + s1 + ";");    mnCanvas.setOutputPaneBlueRemark(false);    //mnCanvas.addOutput("The value of variable \"" + s1 + "\" is: " + getVariableValue(s1));
    parserExecuteCommand = new GUIparser(new StringReader(getVariableValue(s1) + ";"));    mnCanvas.clientsmgr.clearLogData();    try    {      parserExecuteCommand.ProductionRules();    }    catch (ParseException e1)    {      System.out.println(e1.getMessage());    }    timeLog = mnCanvas.clientsmgr.getCurrentTimeLogData();    customLog = mnCanvas.clientsmgr.getCurrentCustomLogData();    s = "$CyDB:> execute " + s1;  }  [    < OUTDIRECT > ">>" < FILENAME >    {      s += " out>> .xml";    }  ]  [    < LOGDIRECT > tLogType = < LOGTYPE > ">>" t1 = < ROOTTAG > t2 = < FILENAME >    {      error = 1;      for (i = 0; i < logcount; i++) if (loglist [ i ].equals(t2.image))      {        error = 0;      }      if (error == 1)      {        mnCanvas.addConsoleMessage("\nThe file \"" + t2.image + "\" does not exist");        errormsg("FILE " + t2.image + " not found");        return " FILE " + t2.image + " not found";      }      else      {        if (tLogType.image.equalsIgnoreCase("custom")) updateLogFile(t1.image, customLog, t2.image);        else if (tLogType.image.equalsIgnoreCase("time")) updateLogFile(t1.image, timeLog, t2.image);        else updateLogFile(t1.image, "", t2.image);        s += " log>> .xml";      }    }  ]  ";"  {    return s;  }  // not implemented
| < PAUSE > ";"  {    return "$CyDB:> pause";  }  // not implemented
| < OPERATIONSLOG > ";"  {    return " operationslog";  }  // "list" command - "list variables" or "list commands"
| t = < LIST > s1 = Listpara() [ s2 = Variable() ] ";"  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> " + t.image + " " + s1 + ";");    mnCanvas.setOutputPaneBlueRemark(false);    if (s1.equalsIgnoreCase("variables")) listVariables();    else if (s1.equalsIgnoreCase("commands")) listCommands();    else if (s1.equalsIgnoreCase("variable"))     listVariable(s2);    return "$CyDB:> " + t.image + " " + s1;  }  // "clear" command - "clear variables"
| t = < CLEAR > s1 = Clearpara() ";"  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> " + t.image + " " + s1 + ";");    mnCanvas.setOutputPaneBlueRemark(false);    if (s1.equalsIgnoreCase("variables")) clearVariables();    else if (s1.equalsIgnoreCase("logs")) clearLogs();    return "$CyDB:> " + t.image + " " + s1;  }  // "createlog" command - create [Root Tag] [.xml]
| t = < CREATEXML > t1 = < ROOTTAG > t2 = < FILENAME > ";"  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + " " + t2.image + ";");    mnCanvas.setOutputPaneBlueRemark(false);    if (checkLogFileExist(t2.image))    {      mnCanvas.addConsoleMessage("\nThe file already exists");      error = 1;      errormsg("FILENAME conflicts");      return " FILENAME conflicts";    }    loglist [ logcount ] = t2.image;    logcount++;    createLogFile(t1.image, t2.image);    return "$CyDB:> createlog " + t1.image + " " + t2.image;  }  // "displayFile" command - displayFile [.xml .txt]
| t = < DISPLAYFILE > t1 = < FILENAME > ";"  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + ";");    mnCanvas.setOutputPaneBlueRemark(false);    try    {      if (new File(t1.image).exists())      {        FileDisplayDlg xmlview = new FileDisplayDlg(t1.image, "");      }      else      {        mnCanvas.addConsoleMessage("The file does not exist");      }    }    catch (Exception e)    {      System.out.println(e.getMessage());    }    return "$CyDB:> displayFile " + t1.image;  }  // Added by Xiaofeng Wang 4/29/2013
| t = < DISPLAYXML > t1 = < FILENAME > ";"  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + ";");    mnCanvas.setOutputPaneBlueRemark(false);    try    {      if (new File(t1.image).exists())      {        HybridView h = new HybridView(new File(t1.image));      }      else      {        mnCanvas.addConsoleMessage("The file does not exist");      }    }    catch (Exception e)    {      System.out.println(e.getMessage());    }    return "$CyDB:> displayFile " + t1.image;  }  // Added by Xiaofeng Wang 4/29/2013
| t = < DISPLAYTXT > t1 = < FILENAME > ";"  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + ";");    mnCanvas.setOutputPaneBlueRemark(false);    try    {      if (new File(t1.image).exists())      {        FileDisplayDlg xmlview = new FileDisplayDlg(t1.image, "");      }      else      {        mnCanvas.addConsoleMessage("The file does not exist");      }    }    catch (Exception e)    {      System.out.println(e.getMessage());    }    return "$CyDB:> displayFile " + t1.image;  }  // Added by Xiaofeng Wang 4/29/2013
| t = < DISPLAYPDF > t1 = < FILENAME > ";"  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + ";");    mnCanvas.setOutputPaneBlueRemark(false);    try    {      if (new File(t1.image).exists())      {        FileDisplayDlg pdfview = new FileDisplayDlg(t1.image, "");      }      else      {        mnCanvas.addConsoleMessage("The file does not exist");      }    }    catch (Exception e)    {      System.out.println(e.getMessage());    }    return "$CyDB:> displayFile " + t1.image;  }  // "declare" command -  declare [int string int[5] string[3]] [Variable Name] := [String]
  //			 declare int i = 2; declare string[3] commands;
| < DECLARE > t1 = < TYPE >  {    bArray = false;    s = t1.image;  }  [    t2 = < LBRACKET > s2 = Expression() < RBRACKET >    {      bArray = true;      s += "[" + s2 + "]";    }  ]  s1 = NewVariable()  {    if (t1.image.equals("int") && !bArray)    {      if (htIntList.containsKey(s1))      {        mnCanvas.addConsoleMessage("\nThe int variable:" + s1 + " has already been declared");        error = 1;        errormsg("variable name conflicts");        return " variable name conflicts";      }      else if (htStringList.containsKey(s1))      {        mnCanvas.addConsoleMessage("\nThe string variable:" + s1 + " has already been declared with the same name");        error = 1;        errormsg("variable name conflicts");        return " variable name conflicts";      }      htIntList.put(s1, 0);      intcount++;    }    else if (t1.image.equals("string") && !bArray)    {      if (htStringList.containsKey(s1))      {        mnCanvas.addConsoleMessage("\nThe string variable:" + s1 + " has already been declared");        error = 1;        errormsg("variable name conflicts");        return " variable name conflicts";      }      else if (htIntList.containsKey(s1))      {        mnCanvas.addConsoleMessage("\nThe int variable:" + s1 + " has already been declared with the same name");        error = 1;        errormsg("variable name conflicts");        return " variable name conflicts";      }      htStringList.put(s1, "");      stringcount++;    }    else if (t1.image.equals("string") && bArray)    {      if (htStringArrayList.containsKey(s1))      {        mnCanvas.addConsoleMessage("\nThe string array variable already exists");        error = 1;        errormsg("string array variable conflicts");        return " string array variable conflicts";      }      int iArraySize = Integer.parseInt(s2.trim());      htStringArrayList.put(s1, new String [ iArraySize ]);      htStringArrayIndex.put(s1, new Integer(iArraySize));    }    else if (t1.image.equals("int") && bArray)    {      if (htIntArrayList.containsKey(s1))      {        mnCanvas.addConsoleMessage("\nThe int array variable already exists");        error = 1;        errormsg("int array variable conflicts");        return " int array variable conflicts";      }      int iArraySize = Integer.parseInt(s2.trim());      htIntArrayList.put(s1, new int [ iArraySize ]);      htIntArrayIndex.put(s1, new Integer(iArraySize));    }    s += " " + s1;  }  [    t2 = < ASSIGNSTRING >    {      s2 = t2.image.substring(2).trim();      if (t1.image.equals("int"))      {        htIntList.put(s1, Integer.parseInt(s2));      }      else if (t1.image.equals("string"))      {        htStringList.put(s1, replaceVariableInString(s2));      }      else if (t1.image.equals("string["))      {        mnCanvas.addConsoleMessage("Can not assign values to a string array in declaration!");        return "can not assign values to a string array";      }      else if (t1.image.equals("int["))      {        mnCanvas.addConsoleMessage("Can not assign values to an int array in declaration!");        return "can not assign values to an int array";      }      s += t2.image;    }  ]  ";"  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> declare " + s + ";");    mnCanvas.setOutputPaneBlueRemark(false);    return "$CyDB:> declare " + s;  }  // "undeclare" command - undeclare [int string int[] string[]] [Variable Name]
| < UNDECLARE > t1 = < TYPE >  {    bArray = false;    s = t1.image;  }  [    < LBRACKET > < RBRACKET >    {      bArray = true;      s += "[]";    }  ]  s1 = Variable() ";"  {    s += " " + s1;    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> undeclare " + s + ";");    mnCanvas.setOutputPaneBlueRemark(false);    if (t1.image.equals("int") && !bArray)    {      if (htIntList.containsKey(s1))      {        htIntList.remove(s1);        mnCanvas.addConsoleMessage("\nThe int variable:" + s1 + " has been removed successfully");        return " undeclare int " + s1;      }      else      {        mnCanvas.addConsoleMessage("\nThe int variable:" + s1 + " has not been declared yet");        return " not declared";      }    }    else if (t1.image.equals("string") && !bArray)    {      if (htStringList.containsKey(s1))      {        htStringList.remove(s1);        mnCanvas.addConsoleMessage("\nThe string variable:" + s1 + " has been removed successfully");        return " undeclare string " + s1;      }      else      {        mnCanvas.addConsoleMessage("\nThe string variable:" + s1 + " has not been declared yet");        return " not declared";      }    }    else if (t1.image.equals("string") && bArray)    {      if (htStringArrayList.containsKey(s1))      {        htStringArrayList.remove(s1);        mnCanvas.addConsoleMessage("\nThe string array variable:" + s1 + " has been removed successfully.");        return " undeclare string[] " + s1;      }      else      {        mnCanvas.addConsoleMessage("\nThe string array variable:" + s1 + " has not been declared yet.");        return " not declared";      }    }    else if (t1.image.equals("int") && bArray)    {      if (htIntArrayList.containsKey(s1))      {        htIntArrayList.remove(s1);        mnCanvas.addConsoleMessage("\nThe int array variable:" + s1 + " has been removed successfully.");        return " undeclare int[] " + s1;      }      else      {        mnCanvas.addConsoleMessage("\nThe int array variable:" + s1 + " has not been declared yet.");        return " not declared";      }    }    return "$CyDB:> undeclare " + s;  }  // "set" command - set [Variable Name] := [String]
| < SET > s1 = Variable() t2 = < ASSIGNSTRING > ";"  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> set " + s1 + " " + t2.image + ";");    mnCanvas.setOutputPaneBlueRemark(false);    s2 = t2.image.substring(2).trim();    // set the value of a variable (int, String or array)
    if (s1.indexOf("[") >= 0)    {      varName = s1.substring(0, s1.indexOf("["));      bArray = true;    }    else    {      varName = s1;      bArray = false;    }    if (!bArray)    {      // this is a string or int variable
      if (htStringList.containsKey(s1)) htStringList.put(s1, replaceVariableInString(s2));      else if (htIntList.containsKey(s1)) htIntList.put(s1, Integer.parseInt(s2));      else mnCanvas.addConsoleMessage("\nThe variable: " + varName + " is not declared");    }    else    {      // else this is a string or int array variable
      int curIndex = Integer.parseInt(s1.substring(s1.indexOf("[") + 1, s1.indexOf("]")));      if (htStringArrayList.containsKey(varName))      {        String [ ] curArray = htStringArrayList.get(varName);        if ((curIndex >= 0) && (curIndex < htStringArrayIndex.get(varName).intValue()))        {          curArray [ curIndex ] = replaceVariableInString(s2);          htStringArrayList.put(varName, curArray);        }        else mnCanvas.addConsoleMessage("\nThe index: " + curIndex + " is out of the bound of the string array: " + varName);      }      else if (htIntArrayList.containsKey(varName))      {        int [ ] curIntArray = htIntArrayList.get(varName);        if ((curIndex >= 0) && (curIndex < htIntArrayIndex.get(varName).intValue()))        {          curIntArray [ curIndex ] = Integer.parseInt(s2);          htIntArrayList.put(varName, curIntArray);        }        else mnCanvas.addConsoleMessage("\nThe index: " + curIndex + " is out of the bound of the int array: " + varName);      }      else mnCanvas.addConsoleMessage("\nThe array variable is not declared");    }    return "$CyDB:> set " + s1 + " " + t2.image;  }  // "*" expression command - * [Expression]
  // for testing purpose only
| "*" s = Expression() ";"  {    //System.out.println("Rule 3 Stmt = Expression ");
    return s;  }  // Updated by Xinyuan Zhao, Apr 28, 2010
  // The followings are the Storage Manager commands (previously "SM:>")
  // "createfile" command - createfile [.xml .bxml .cxml]
| t = < CREATEFILE > t1 = < FILENAME >  {    mnCanvas.setOutputPaneBlueRemark(true);  }  (    t2 = < NUM >    {      mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + " " + t2.image + ";");      s = t2.image;    }  | s2 = Variable()    {      mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + " $$" + s2 + ";");      s = getVariableValue(s2);    }  )  ";"  {    mnCanvas.setOutputPaneBlueRemark(false);    //mnCanvas.addOutputBlankLine();
    //send the command to SM manager
    csxParser.parse(t.image, t.image + " " + t1.image + " " + s);    return "$CyDB:> " + t.image + " " + t1.image;  }  // "copyfile" command - copyfile [.xml .bxml .cxml .txt .ctxt] [.xml .bxml .cxml .txt .ctxt]
| t = < COPYFILE > t1 = < FILENAME > t2 = < FILENAME > ";"  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + " " + t2.image + ";");    mnCanvas.setOutputPaneBlueRemark(false);    //mnCanvas.addOutputBlankLine();
    //send the command to SM manager
    csxParser.parse(t.image, t.image + " " + t1.image + " " + t2.image);    return "$CyDB:> " + t.image + " " + t1.image + " " + t2.image;  }| t = < GENERATEINDEX > t1 = < FILENAME > t2 = < FILENAME > ";"  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + " " + t2.image + ";");    mnCanvas.setOutputPaneBlueRemark(false);    //mnCanvas.addOutputBlankLine();
    csxParser.generateIndex(t1.image, t2.image);    return "$CyDB:> " + t.image + " " + t1.image + " " + t2.image;  }| t = < PRINTINDEXELEMENTS > t3 = < ID > t1 = < ID > t2 = < FILENAME > ";"  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> " + t3.image + " " + t.image + " " + t1.image + " " + t2.image + ";");    mnCanvas.setOutputPaneBlueRemark(false);    //mnCanvas.addOutputBlankLine();
    csxParser.printIndexedElements(t3.image, t1.image, t2.image);    return "$CyDB:> " + t.image + " " + t3.image + " " + t1.image + " " + t2.image;  }| t = < COUNTINDEXELEMENTS > t3 = < ID > t1 = < ID > t2 = < FILENAME > ";"  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> " + t3.image + " " + t.image + " " + t1.image + " " + t2.image + ";");    mnCanvas.setOutputPaneBlueRemark(false);    //mnCanvas.addOutputBlankLine();
    csxParser.countIndexedElements(t3.image, t1.image, t2.image);    return "$CyDB:> " + t.image + " " + t1.image + " " + t2.image;  }| t = < PRINTBYEXACTMATCH > t1 = < ID > t2 = < NUM > t3 = < FILENAME > ";"  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + " " + t2.image + " " + t3.image + ";");    mnCanvas.setOutputPaneBlueRemark(false);    //mnCanvas.addOutputBlankLine();
    csxParser.printIndexedElementbyExactMatch(t1.image, t2.image, t3.image);    return "$CyDB:> " + t.image + " " + t1.image + " " + t2.image + " " + t3.image;  }  // "deletefile" command - deletefile [.xml .bxml .cxml]
| t = < DELETEFILE > t1 = < FILENAME > ";"  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + ";");    mnCanvas.setOutputPaneBlueRemark(false);    //mnCanvas.addOutputBlankLine();
    //send the command to SM manager
    csxParser.parse(t.image, t.image + " " + t1.image);    return "$CyDB:> " + t.image + " " + t1.image;  }  // system counters commands
| t = < STORAGECOUNTERCOMMANDS > ";"  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> " + t.image + ";");    mnCanvas.setOutputPaneBlueRemark(false);    //mnCanvas.addOutputBlankLine();
    //send the command to SM manager
    csxParser.parse(t.image, t.image);    return "$CyDB:> " + t.image;  }  // "createRawStorage" command - createRawStorage [.xml]
| t = < CREATERAWSTORAGE > t1 = < FILENAME > ";"  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + ";");    mnCanvas.setOutputPaneBlueRemark(false);    //mnCanvas.addOutputBlankLine();
    //send the command to SM manager
    csxParser.parse(t.image, t.image + " " + t1.image);    return "$CyDB:> " + t.image + " " + t1.image;  }| t = < CREATESTORAGE > t1 = < FILENAME > ";"  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + ";");    mnCanvas.setOutputPaneBlueRemark(false);    //mnCanvas.addOutputBlankLine();
    //send the command to SM manager
    csxParser.parse(t.image, t.image + " " + t1.image);    return "$CyDB:> " + t.image + " " + t1.image;  }  // "useStorage" command - useStorage [.xml]
| t = < LOADSTORAGE > t1 = < FILENAME >  [    t2 = < NUM >    {      s = t2.image;    }  ]  ";"  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + ";");    mnCanvas.setOutputPaneBlueRemark(false);    //mnCanvas.addOutputBlankLine();
    //send the command to SM manager
    if (s == null) csxParser.parse(t.image, t.image + " " + t1.image);    else csxParser.parse(t.image, t.image + " " + t1.image + " " + s);    return "$CyDB:> " + t.image + " " + t1.image;  }  // "formatStorage" command - formatStorage [PageSize]
| t = < FORMATSTORAGE > t1 = < NUM > ";"  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + ";");    mnCanvas.setOutputPaneBlueRemark(false);    //mnCanvas.addOutputBlankLine();
    //send the command to SM manager
    csxParser.parse(t.image, t.image + " " + t1.image);    return "$CyDB:> " + t.image + " " + t1.image;  }  // Added by xiaofeng wang
| t = < REFORMATSTORAGE > t1 = < FILENAME > t2 = < NUM > ";"  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + " " + t2.image + ";");    mnCanvas.setOutputPaneBlueRemark(false);    //mnCanvas.addOutputBlankLine();
    //send the command to SM manager
    csxParser.parse(t.image, t1.image + " " + t2.image);    return "$CyDB:> " + t.image + " " + t1.image;  }  // "startBufferManager" command - startBufferManager [BufferPoolSize]
| t = < STARTBUFFERMANAGER > t1 = < NUM > ";"  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + ";");    mnCanvas.setOutputPaneBlueRemark(false);    //mnCanvas.addOutputBlankLine();
    //send the command to SM manager
    csxParser.parse(t.image, t.image + " " + t1.image);    return "$CyDB:> " + t.image + " " + t1.image;  }  // "showdirectory" command - showdirectory
| t = < SHOWDIRECTORY > ";"  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> " + t.image + ";");    mnCanvas.setOutputPaneBlueRemark(false);    //mnCanvas.addOutputBlankLine();
    //send the command to SM manager
    csxParser.showDirectory();    return "$CyDB:> " + t.image;  }  // "demoForStorageAPIs" command - demoForStorageAPIs
| t = < DEMOFORSTORAGE > ";"  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> " + t.image + ";");    mnCanvas.setOutputPaneBlueRemark(false);    //mnCanvas.addOutputBlankLine();
    //send the command to SM manager
    csxParser.parse(t.image, t.image);    return "$CyDB:> " + t.image;  }  // "writeBitMap" command - write the bitmap from the memory to the storage
| t = < WRITEBITMAP > ";"  {    mnCanvas.setOutputPaneBlueRemark(true);    mnCanvas.addOutput("$CyDB:> " + t.image + ";");    mnCanvas.setOutputPaneBlueRemark(false);    //mnCanvas.addOutputBlankLine();
    //send the command to SM manager
    csxParser.writeBitMap();    return "$CyDB:> " + t.image;  }| s1 = Condition()  {    //System.out.println("Rule 1 Statement = Condition");
    conditionsend(s1);    return s1;  }| s1 = Loophead() s2 = Blockstmt()  {    //System.out.println("Rule 1 Statement = Loophead Blockstmt");
    foreachsend(s1, s2);    return "";  }}// rule 4, Expression = Term (+ Term)*
String Expression() :{  java.util.Vector termimage = new java.util.Vector();  String s;  boolean bOpPlus = false;}{  s = Term()  {    termimage.addElement(s);  }  (    (      "+"      {        bOpPlus = true;      }    | "-"      {        bOpPlus = false;      }    )    s = Term()    {      if (bOpPlus) s = "+" + s;      else s = "-" + s;      termimage.addElement(s);    }  )*  {    int iValue = 0;    //		System.out.println("Rule 4 Expression = Term +/- Term");
    if (termimage.size() == 1)    {      return (String) termimage.elementAt(0);    }    else    {      iValue = Integer.parseInt((String) termimage.elementAt(0));      for (int i = 1; i < termimage.size(); i++)      {        String strElement = (String) termimage.elementAt(i);        if (strElement.substring(0, 1).equalsIgnoreCase("+")) iValue += Integer.parseInt(strElement.substring(1));        else iValue -= Integer.parseInt(strElement.substring(1));      }      return Integer.toString(iValue);    }  }}// rule 5, Term = Factor (* Factor)*
String Term() :{  java.util.Vector factorimage = new java.util.Vector();  String s;  boolean bOpMultiply = false;}{  s = Factor()  {    factorimage.addElement(s);  }  (    (      "*"      {        bOpMultiply = true;      }    | "/"      {        bOpMultiply = false;      }    )    s = Factor()    {      if (bOpMultiply) s = "*" + s;      else s = "/" + s;      factorimage.addElement(s);    }  )*  {    //		System.out.println("Rule 5 Term = Factor * Factor");
    int iValue = 0;    if (factorimage.size() == 1)    {      return (String) factorimage.elementAt(0);    }    else    {      iValue = Integer.parseInt((String) factorimage.elementAt(0));      for (int i = 1; i < factorimage.size(); i++)      {        String strElement = (String) factorimage.elementAt(i);        if (strElement.substring(0, 1).equalsIgnoreCase("*")) iValue *= Integer.parseInt(strElement.substring(1));        else iValue /= Integer.parseInt(strElement.substring(1));      }      return Integer.toString(iValue);    }  }}// rule 6, Factor : Variable | NUM | (Expression)
String Factor() :{  Token t;  String s, varName;  boolean bArray;}{  s = Variable()  {    //	System.out.println("Rule 6 Factor = Variable");
    if (s.indexOf("[") >= 0)    {      varName = s.substring(0, s.indexOf("["));      bArray = true;    }    else    {      varName = s;      bArray = false;    }    if (!bArray)    {      // this is a int variable
      if (htStringList.containsKey(s)) return getVariableValue(s);      //mnCanvas.addConsoleMessage("\nThe type of the variable: " + varName + " is string. Only int type variable can appear in an Expression.");
      else if (htIntList.containsKey(s)) return getVariableValue(s);      else mnCanvas.addConsoleMessage("\nThe variable: " + varName + " is not declared");    }    else    {      // else this is a int or string array variable
      //int curIndex = Integer.parseInt(s.substring(s.indexOf("[")+1, s.indexOf("]")));
      if (htStringArrayList.containsKey(varName))      {        return getVariableValue(s);        //mnCanvas.addConsoleMessage("\nThe type of the array variable: " + varName + " is string. Only int type variable can appear in an Expression.");
      }      else if (htIntArrayList.containsKey(varName))      {        return getVariableValue(s);      }      else mnCanvas.addConsoleMessage("\nThe array variable is not declared");    }    return s;  }| t = < NUM >  {    //	System.out.println("Rule 6 Factor = NUM");
    return t.image;  }| t = < CONSTSTRING >  {    String conststr = t.image;    return conststr.substring(1, conststr.length() - 1);  }| "(" s = Expression() ")"  {    //	System.out.println("Rule 6 Factor = Expression");
    return s;  }}// rule 7, variable : <ID> | <ID> '[' expr ']'
String Variable() :{  String s, s1;  Token t;}{  "$$" t = < ID >  {    //	System.out.println("Rule 7 Variable = ID");
    s = t.image;  }  [    < LBRACKET > s1 = Expression() < RBRACKET >    {      //	System.out.println("Rule 7 Variable = ID [NUM]");
      s += "[" + s1 + "]";    }  ]  {    return s;  }}//rule 7a
String NewVariable() :{  Token t;}{  "$$" t = < ID >  {    //	System.out.println("Rule 7a NewVariable = ID");
    return t.image;  }}// rule 8
String Listpara() :{}{  < COMMANDS >  {    return "commands";  }| < VARIABLES >  {    return "variables";  }| < VARIABLE >  {    return "variable";  }}// rule 9
String Clearpara() :{}{  < LOGS >  {    return "logs";  }| < VARIABLES >  {    return "variables";  }}// rule 12
String Condition() :{  Token t1, t2;  String s, s1;  int i;}{  < IF > "(" s1 = Boolean() ")"  {    s = "if(" + s1 + ")";  }  [    < LOGDIRECT > < LOGTYPE > ">>" t1 = < ROOTTAG > t2 = < FILENAME >    {      error = 1;      for (i = 0; i < logcount; i++) if (loglist [ i ].equals(t2.image))      {        error = 0;      }      if (error == 1)      {        mnCanvas.addConsoleMessage("\nThe file \"" + t2.image + "\" does not exist");        errormsg("FILE " + t2.image + " not found");        return " FILE " + t2.image + " not found";      }      else      {        //updateLogFile(t1.image, "", t2.image);
        s += "::log>>" + t1.image + "," + t2.image;      }    }  ]  s1 = Blockstmt()  {    s += "::" + s1;  }  [    < ELSE >    {      s += "::else";    }    [      < LOGDIRECT > < LOGTYPE > ">>" t1 = < ROOTTAG > t2 = < FILENAME >      {        error = 1;        for (i = 0; i < logcount; i++) if (loglist [ i ].equals(t2.image))        {          error = 0;        }        if (error == 1)        {          mnCanvas.addConsoleMessage("\nThe file \"" + t2.image + "\" does not exist");          errormsg("FILE " + t2.image + " not found");          return " FILE " + t2.image + " not found";        }        else        {          //updateLogFile(t1.image, "", t2.image);
          s += "::log>>" + t1.image + "," + t2.image;        }      }    ]    s1 = Blockstmt()    {      s += "::" + s1;    }  ]  {    return s;  }}String Boolean() :{  String s, s1;}{  s = Conjunction()  {    if (s.equalsIgnoreCase("true") || s.equalsIgnoreCase("1")) return "true";  }  (    < OR > s1 = Conjunction()    {      if (s1.equalsIgnoreCase("true") || s1.equalsIgnoreCase("1")) return "true";    }  )*  {    return "false";  }}String Conjunction() :{  String s, s1;}{  s = Disjunction()  {    if (!s.equalsIgnoreCase("true") && !s.equalsIgnoreCase("1")) return "false";  }  (    < AND > s1 = Disjunction()    {      if (!s1.equalsIgnoreCase("true") && !s1.equalsIgnoreCase("1")) return "false";    }  )*  {    return "true";  }}//Because of conflicts, the Boolean() : Disjunction() can not start with "("
String Disjunction() :{  String s;}{  //"(" Boolean() ")"
  s = Comp()  {    return s;  }}String Comp() :{  String s, s1;  int i, i1;  int op;}{  s = Expression()  (    "=="    {      op = 0;    }  | "!="    {      op = 1;    }  | ">"    {      op = 2;    }  | ">="    {      op = 3;    }  | "<"    {      op = 4;    }  | "<="    {      op = 5;    }  )  s1 = Expression()  {    switch (op)    {      case 0 : if (s.equalsIgnoreCase(s1)) return "true";      else return "false";      case 1 : if (s.equalsIgnoreCase(s1)) return "false";      else return "true";      case 2 : i = Integer.parseInt(s);      i1 = Integer.parseInt(s1);      if (i > i1) return "true";      else return "false";      case 3 : i = Integer.parseInt(s);      i1 = Integer.parseInt(s1);      if (i >= i1) return "true";      else return "false";      case 4 : i = Integer.parseInt(s);      i1 = Integer.parseInt(s1);      if (i < i1) return "true";      else return "false";      case 5 : i = Integer.parseInt(s);      i1 = Integer.parseInt(s1);      if (i <= i1) return "true";      else return "false";      default : return "false";    }  }}/*
String Blockstmt() :
{
	String s,s1;
}
{
"{" 
	{ s = "{";}
( s1=Statement() 
	{ s += s1;}
)* "}"
	{ return s + " }";}
| s=Statement()
	{ return s;}
}
*/String Blockstmt() :{  Token t1;}{  t1 = < BLOCKSTRING > "}"  {    return t1.image.substring(1);  }}String Loophead() :{  Token t1, t2;  String s, s1, s2;  int i;}{  < FOREACH > s1 = Variable() < IN > s2 = Loopcondition()  {    error = 1;    if (htIntList.containsKey(s1))    {      error = 0;    }    if (error == 1)    {      mnCanvas.addConsoleMessage("\nThe variable \"" + s1 + "\" is not defined");      errormsg("VAR " + s1 + " not defined");      return " VAR " + s1 + " not defined";    }    else    {      s = s1 + ":" + s2;    }  }  [    < LOGDIRECT > < LOGTYPE > ">>" t1 = < ROOTTAG > t2 = < FILENAME >    {      error = 1;      for (i = 0; i < logcount; i++) if (loglist [ i ].equals(t2.image))      {        error = 0;      }      if (error == 1)      {        mnCanvas.addConsoleMessage("\nThe file \"" + t2.image + "\" does not exist");        errormsg("FILE " + t2.image + " not found");        return " FILE " + t2.image + " not found";      }      else      {        forlogon = 1;        forlogname = t2.image;        s += ":" + t1.image + "," + t2.image;      }    }  ]  {    return s;  }| < WHILE > "(" s1 = Boolean() ")"  [    < LOGDIRECT > < LOGTYPE > ">>" [ < ROOTTAG > ] < FILENAME >  ]  {    return "while ( " + s1 + " ) ";  }}String Loopcondition() :{  String s1, s2;}{  "[" s1 = Expression() "," s2 = Expression() "]"  {    return "( " + s1 + " , " + s2 + " )";  }| "(" s1 = Expressionlist() ")"  {    return s1;  }}String Expressionlist() :{  String s, s1;}{  s = Expression()  (    "," s1 = Expression()    {      s += "," + s1;    }  )*  {    return s;  }}