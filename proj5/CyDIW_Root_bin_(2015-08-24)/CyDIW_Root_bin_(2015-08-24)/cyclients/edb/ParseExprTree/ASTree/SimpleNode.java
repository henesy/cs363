/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=false,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=XML,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package cyclients.edb.ParseExprTree.ASTree;

public class SimpleNode implements Node {

	protected Node parent;
	protected Node[] children;
	protected int id;
	protected Object value;
	protected Edb_Query_Parser parser;
	protected String m_text;
	protected int m_type;

	public SimpleNode(int i) {
		id = i;
	}

	public SimpleNode(Edb_Query_Parser p, int i) {
		this(i);
		parser = p;
	}

	public void SetToken(int type, String text) {
		m_type = type;
		m_text = text;
	}

	public void setText(String text) {
		m_text = text;
	}

	public void setType(int type) {
		m_type = type;
	}

	public String getText() {
		return m_text;
	}

	public int getType() {
		return m_type;
	}

	/**
	 * @return int
	 */
	public int getID() {
		return id;
	}

	public void jjtOpen() {
	}

	public void jjtClose() {
	}

	public void jjtSetParent(Node n) {
		parent = n;
	}

	public Node jjtGetParent() {
		return parent;
	}

	public void jjtAddChild(Node n, int i) {
		if (children == null) {
			children = new Node[i + 1];
		} else if (i >= children.length) {
			Node c[] = new Node[i + 1];
			System.arraycopy(children, 0, c, 0, children.length);
			children = c;
		}
		children[i] = n;
	}

	public Node jjtGetChild(int i) {
		return children[i];
	}

	public int jjtGetNumChildren() {
		return (children == null) ? 0 : children.length;
	}

	public void jjtSetValue(Object value) {
		this.value = value;
	}

	public Object jjtGetValue() {
		return value;
	}

	/*
	 * You can override these two methods in subclasses of SimpleNode to
	 * customize the way the node appears when the tree is dumped. If your
	 * output uses more than one line you should override toString(String),
	 * otherwise overriding toString() is probably all you need to do.
	 */

	public String toString() {
		return Edb_Query_ParserTreeConstants.jjtNodeName[id];
	}

	public String toString(String prefix) {
		return prefix + toString();
	}

	/*
	 * Override this method if you want to customize how the node dumps out its
	 * children.
	 */

	public String dump(String prefix) {
		String output;
		output = new String();

		if (m_text != null)
			output += prefix + "<" + toString() + " Token = \"" + m_text
					+ "\">";
		// System.out.println(prefix + "<" + toString() + " Token = \"" + m_text
		// + "\">");
		else
			output += prefix + "<" + toString() + ">";
		// System.out.println(prefix + "<" + toString() + ">");

		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				if (n != null) {
					output += n.dump(prefix);
				}
			}
		}

		output += prefix + "</" + toString() + ">";
		// System.out.println(prefix + "</" + toString() + ">");
		return output;
	}
}

/*
 * JavaCC - OriginalChecksum=cf211878433ebce2d131baced0392a30 (do not edit this
 * line)
 */
