
$CyDB:> list commands;
$CyDB:>useStorage StorageConfig.xml;
// The buffer size for the whole storage;
$CyDB:> startBufferManager 10;
/* $CyDB:>createRawStorage  StorageConfig.xml;
$CyDB:> formatstorage 16;  */


$CyDB:> declare string $$b;

$CyDB:>set $$b := edb\workspace\catalog.xml;
// $EDB:>CreateData $$b;
// The first parameter is the catalog file, the second command is the buffer number which is used by this EDB;
$EDB:>LoadDB $$b 10 ;


$CyDB:> declare string[10] $$a;

// single relation;
$CyDB:>set $$a[0] := $EDB:>select e.Name, e.Salary, e.DName
from Emp e
where e.Salary = 0;


// naturaljoin;
$CyDB:>set $$a[1] := $EDB:>select d.DName, e.Salary, d.MName
from Emp e, Dept d
where  e.DName = d.DName ;

// "AND";

$CyDB:>set $$a[2] := $EDB:>select d.DName, e.Salary
from Emp e, Dept d
where  (e.DName = d.DName and e.Salary > 3);


// "OR";
$CyDB:>set $$a[3] := $EDB:>select e.Name, e.Salary, e.DName
from Emp e
where (e.Salary > 6 or  e.Salary > 3)   ;


// "NOT";
$CyDB:>set $$a[4]:= $EDB:>select d.DName, d.MName
from Dept d
where not(d.DName = 'Dept1') ;



$CyDB:> declare string $$c;
$CyDB:>set $$c := edb\workspace\ASTree.xml;
$CyDB:> declare string[4] $$d;
$CyDB:>set $$d[0] := edb\workspace\InitalExpTree0.xml;
$CyDB:> declare string[4] $$e;
$CyDB:>set $$e[0] := edb\workspace\OptimalExpTree0.xml;

$CyDB:>set $$ d[1] := edb\workspace\InitalExpTree1.xml;
$CyDB:>set $$e[1] := edb\workspace\OptimalExpTree1.xml;
$CyDB:>set $$d[2] := edb\workspace\InitalExpTree2.xml;
$CyDB:>set $$e[2] := edb\workspace\OptimalExpTree2.xml;


$EDB:>BuildAST $$a[0] $$c;

$EDB:>BuildInitalExpressionTree $$c $$d[0] ;
  
$EDB:>BuildOptimalExpressionTree $$d[0] $$e[0];



$EDB:>BuildAST $$a[1] $$c;

$EDB:>BuildInitalExpressionTree $$c $$d[1]  ;
  
$EDB:>BuildOptimalExpressionTree $$d[1] $$e[1];



$EDB:>BuildAST $$a[2] $$c;

$EDB:>BuildInitalExpressionTree $$c $$d[2] ;
  
$EDB:>BuildOptimalExpressionTree $$d[2] $$e[2];



$EDB:>DisplayASTree $$c xmlview; 
$EDB:>DisplayASTree $$c graphicalview; 
$EDB:>DisplayASTree $$c hybridview; 


$EDB:>DisplayExpressionTree $$d[1] xmlview; 
$EDB:>DisplayExpressionTree $$d[0] graphicalview; 
$EDB:>DisplayExpressionTree $$e[0] graphicalview; 

$EDB:>DisplayExpressionTree $$e[1] hybridview; 




$CyDB:> createLog <root> logTestCompEmp3.xml;
$CyDB:> declare int $$j;
$CyDB:> declare int $$i;


$EDB:>Execute $$d[2] 9 1;




 $CyDB:> foreach $$i in (9) 
{
 

      $EDB:>Execute $$d[2] $$i 10-$$i ;

}








$CyDB:> startBufferManager 500;

$CyDB:> createLog <root> logTestCompEmpBuf.xml;

 $CyDB:> foreach $$i in (9) 
{
 $CyDB:> foreach $$j in (2, 4, 8, 16, 32, 64, 128, 256, 512)  log time >><numBuf  var ="($$j)"  > logTestCompEmpBuf.xml
{
       $CyDB:> startBufferManager $$j;
      $EDB:>Execute $$d[0] $$i 10-$$i log time >><Time >  logTestCompEmpBuf.xml;
}

}


$CyDB:> declare int $$k;
$CyDB:>set $$k:= 10;
   $CyDB:> startBufferManager $$k;













$CyDB:> declare int $$i;
$CyDB:> set $$i:=10;
$EDB:>Execute $$d[0] $$i 10-$$i ;




// Query execution and logging of benckmark statistics;
$CyDB:> createLog <root> logTestComp1.xml;
$CyDB:> declare int $$i;
$CyDB:> declare int $$j;

$CyDB:>foreach $$i in (1, 2, 3) log time >><Time var ="($$i)">  logTestComp1.xml
 {
               $CyDB:> foreach $$j n (9, 8, 7, 6, 5)
 log time >><OuterBufferNum var ="($$j)">  logTestComp1.xml

         {
                $EDB:>Execute $$d[2] $$j 10-$$j  log time>> <InitExp > logTestComp1.xml;  
                         
         }                 
}


<showtext>
$Saxon:> 
let $e1 :=doc("CyDIW_Workspace/logTestComp.xml")//OuterBufferNum[var = "9"]/InitExp
let $e2 :=doc("CyDIW_Workspace/logTestComp.xml")//OuterBufferNum[var = "9"]/OptiExpr

return 
<Time>
{
     <IniTime>{avg($e1/Time/text())} </IniTime>,
     <OptTime>{avg($e2/Time/text())} </OptTime>
   
}
</Time>  out>>EDBbenchMark_Time.xml;
</showtext>


$CyDB:> displayfile CyDIW_Workspace/EDBbenchMark_Time.xml;


$CyDB:> displayfile edb/Workspace/EDBbenchMark_Time.xml;


$R:> CMD BATCH  R_Folder/R_EDB_code.txt;
      

$CyDB:> createLog <root> logTestIterator.xml;

// Expression Tree Iterator;

$EDB:>OpenIterator $$d[0] 10 0;
$EDB:>HasNextTuple $$d[0] ;
$EDB:>GetNextTuple $$d[0];
$EDB:>GetRemainingTuples $$d[0] log custom>> <BenchMarkIter> logTestIterator.xml;
$EDB:>
CloseIterator $$d[0];


$EDB:>OpenIterator $$d[1] 5 5;
$EDB:>HasNextTuple $$d[1] ;
$EDB:>GetNextTuple $$d[1];
$EDB:>GetRemainingTuples $$d[1];
$EDB:>
CloseIterator $$d[1];


$EDB:>OpenIterator $$d[2] 5 5;
$EDB:>HasNextTuple $$d[2];
$EDB:>GetNextTuple $$d[2];
$EDB:>GetRemainingTuples $$d[2];
$EDB:>
CloseIterator $$d[2];



$EDB:> ExitDB $$b; 



