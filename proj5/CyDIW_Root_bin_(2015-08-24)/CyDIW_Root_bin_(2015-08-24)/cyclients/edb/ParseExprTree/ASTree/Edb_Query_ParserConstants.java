/* Generated By:JJTree&JavaCC: Do not edit this line. Edb_Query_ParserConstants.java */
package cyclients.edb.ParseExprTree.ASTree;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface Edb_Query_ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMMENT_LINE = 5;
  /** RegularExpression Id. */
  int COMMENT_BLOCK = 6;
  /** RegularExpression Id. */
  int SELECT = 7;
  /** RegularExpression Id. */
  int FROM = 8;
  /** RegularExpression Id. */
  int WHERE = 9;
  /** RegularExpression Id. */
  int AND = 10;
  /** RegularExpression Id. */
  int OR = 11;
  /** RegularExpression Id. */
  int NOT = 12;
  /** RegularExpression Id. */
  int DOT = 13;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 14;
  /** RegularExpression Id. */
  int FLOAT_LITERAL = 15;
  /** RegularExpression Id. */
  int EXPONENT = 16;
  /** RegularExpression Id. */
  int STRING_LITERAL = 17;
  /** RegularExpression Id. */
  int Identifier = 18;
  /** RegularExpression Id. */
  int LETTER = 19;
  /** RegularExpression Id. */
  int DIGIT = 20;
  /** RegularExpression Id. */
  int COMMA = 21;
  /** RegularExpression Id. */
  int LESS = 22;
  /** RegularExpression Id. */
  int LESSEQUAL = 23;
  /** RegularExpression Id. */
  int GREATER = 24;
  /** RegularExpression Id. */
  int GREATEREQUAL = 25;
  /** RegularExpression Id. */
  int EQUAL = 26;
  /** RegularExpression Id. */
  int NOTEQUAL = 27;
  /** RegularExpression Id. */
  int NOTEQUAL2 = 28;
  /** RegularExpression Id. */
  int LPAREN = 29;
  /** RegularExpression Id. */
  int RPAREN = 30;
  /** RegularExpression Id. */
  int ASTERISK = 31;
  /** RegularExpression Id. */
  int SLASH = 32;
  /** RegularExpression Id. */
  int PLUS = 33;
  /** RegularExpression Id. */
  int MINUS = 34;
  /** RegularExpression Id. */
  int NOTLESSTHAN = 35;
  /** RegularExpression Id. */
  int NOTLESSTHANEQUAL = 36;
  /** RegularExpression Id. */
  int NOTGREATTHAN = 37;
  /** RegularExpression Id. */
  int NOTGREATTHANEQUAL = 38;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\t\"",
    "<COMMENT_LINE>",
    "<COMMENT_BLOCK>",
    "\"select\"",
    "\"from\"",
    "\"where\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\".\"",
    "<INTEGER_LITERAL>",
    "<FLOAT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<Identifier>",
    "<LETTER>",
    "<DIGIT>",
    "\",\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"=\"",
    "\"!=\"",
    "\"<>\"",
    "\"(\"",
    "\")\"",
    "\"*\"",
    "\"/\"",
    "\"+\"",
    "\"-\"",
    "\"!<\"",
    "\"!<=\"",
    "\"!>\"",
    "\"!>=\"",
  };

}
