/* Generated By:JavaCC: Do not edit this line. QuiltParser.java */
package cycsx.csxqueryengine.quiltcsx;


import cycsx.csxqueryengine.common.Constants;

import java.io.*;
import java.util.Hashtable;
import java.util.Vector;

import cycsx.csxpagination.util.CanStoreXUtil;

public final class QuiltParser implements QuiltParserConstants {

    private Hashtable funDefNames = new Hashtable();
    private Hashtable funImportNames = new Hashtable();
    public static boolean hasIter = false;
    private CanStoreXUtil canUtil;

    public QuiltParser(CanStoreXUtil cu)
    {
        this(new ASCII_CharStream(new StringReader(""), 0, 0));
        canUtil = cu;
    }

    /**
     * Returns the <code>Query</code>
     * object representing a Quilt query.
     * @param s the <code>String</code>
     *          representation of the
     *          Quilt query
     */
    public QuiltQuery parseQuery(String s) throws Exception
    {
        QuiltQuery q;
        this.funImportNames.clear();
        this.funDefNames.clear();
        this.ReInit(new ASCII_CharStream(new StringReader(s), 0, 0));
        long start = System.currentTimeMillis();
        q = quilt_query();
        System.err.println(System.currentTimeMillis() - start);
        return q;
    }

    /**
     * Auxiliary function removing
     * the first character at the beginning 
     * of a string.
     */
    private static String chop(String s)
    {
        return s.substring(1);
    }

    private static String butLast(String s)
    {
        return s.substring(0, s.length()-1);
    }

    /**
     * Auxiliary function removing the quotes
     * around a string definition.
     */
    private static String unquote(String quoted)
    {
        try {
            String unquoted = quoted.substring(1, quoted.length() - 1);
            return unquoted;
        } catch (Exception e) {
            throw new RuntimeException(
               "Syntax error in a string definition : " + quoted
             );
        }
    }

    /**
     * Auxiliary function that
     * handles tag creation 
     * with QName or variables.
     **/
    private TagNameable getTagName(String tagName)
    {
        //	String s = chop(tagName);
        String s = tagName;
        if (s.startsWith("$"))
            return new Var(chop(s));
        else
            return new QName(s);
    }

    /**
     * Auxiliary function removing the
     * first and last character
     * around a <code>String</code>
     */
    private static String trim(String s)
    {
        return s.substring(1, s.length() - 1);
    }

/**
 * The top production. The string representing
 * the xquery query is a quilt_query
 */
  final public QuiltQuery quilt_query() throws ParseException {
    Vector funDefs = new Vector();
    QuiltExpression queryBody;
    if (jj_2_1(3)) {
      import_def_list();
    } else {
      ;
    }
    if (jj_2_2(3)) {
      funDefs = fun_def_list();
    } else {
      ;
    }
    queryBody = expr();
    jj_consume_token(0);
      {if (true) return new QuiltQuery( funDefs, queryBody, canUtil );}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [8] - Import
 * This is an unsupported feature
 */
  final public void import_def_list() throws ParseException {
    Token nameT, classT;
    label_1:
    while (true) {
      jj_consume_token(IMPORT);
      nameT = jj_consume_token(NAME);
      jj_consume_token(AS);
      if (jj_2_3(3)) {
        classT = jj_consume_token(CLASSNAME);
      } else if (jj_2_4(3)) {
        classT = jj_consume_token(NAME);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEMICOLON);
         funImportNames.put(nameT.image, classT.image);
      if (jj_2_5(3)) {
        ;
      } else {
        break label_1;
      }
    }
  }

/**
 * S - Rule [26] - FunctionDecl
 *     Not properly supported.
 *     Kweelt legacy code
 */
  final public Vector fun_def_list() throws ParseException {
    Token funName;
    Vector args = null;
    Vector funDefList = new Vector();
    QuiltExpression funBody = null;
    label_2:
    while (true) {
      jj_consume_token(DECLARE);
      jj_consume_token(FUNCTION);
      funName = jj_consume_token(NAME);
      jj_consume_token(LPAREN);
      if (jj_2_6(3)) {
        args = fun_args();
      } else {
        ;
      }
      jj_consume_token(RPAREN);
          // System.err.println("Putting >" + funName + "< in the HT");
          funDefNames.put( funName.image, Boolean.TRUE );
      if (jj_2_7(3)) {
        funBody = enclosed_expr();
      } else {
        ;
      }
          funDefList.addElement( new FunDef( funName.image,
                                             args,
                                             funBody
                                             )
                               );
      if (jj_2_8(3)) {
        ;
      } else {
        break label_2;
      }
    }
          {if (true) return funDefList;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [27] - ParamList
 * Not used!
 */
  final public Vector fun_args() throws ParseException {
    Token argName;
    Vector args = new Vector();
    argName = jj_consume_token(VARNAME);
      args.addElement(new Var(chop(argName.image)));
    label_3:
    while (true) {
      if (jj_2_9(3)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(COMMA);
      argName = jj_consume_token(VARNAME);
       args.addElement(new Var(chop(argName.image)));
    }
          {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [31]
 * Partially supported. Should return a sequence of expressions
 * as a single expression.
 * It does not work if one of the expressions is iterator based
 */
  final public QuiltExpression expr() throws ParseException {
    Vector v = new Vector();
    QuiltExpression e;
    boolean flag = false;
    e = expr_single();
                        v.addElement(e);
    label_4:
    while (true) {
      if (jj_2_10(3)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(COMMA);
      e = expr_single();
      flag = true;
      v.addElement(e);
    }
    if(flag)
            System.err.println("Multiple Expressions not supported");
    {if (true) return flag ? new QuiltExpressionList(v): e;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [32] 
 */
  final public QuiltExpression expr_single() throws ParseException {
    QuiltExpression e;
    if (jj_2_11(3)) {
      e = flwor_expression();
    } else if (jj_2_12(3)) {
      e = if_expr();
    } else if (jj_2_13(3)) {
      e = or_expression();
    } else if (jj_2_14(3)) {
      e = rename_expression();
    } else if (jj_2_15(3)) {
      e = delete_expression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [33]
 */
  final public QuiltExpression flwor_expression() throws ParseException {
    QuiltExpression e;
    Vector sort = new Vector();
    QuiltExpression where = null;
    Binding b;
    Vector bindings = new Vector();
    label_5:
    while (true) {
      if (jj_2_18(3)) {
        jj_consume_token(FOR);
        b = for_binding(true);
                                   bindings.addElement(b);
        label_6:
        while (true) {
          if (jj_2_16(3)) {
            ;
          } else {
            break label_6;
          }
          jj_consume_token(COMMA);
          b = for_binding(false);
                                     bindings.addElement(b);
        }
      } else if (jj_2_19(3)) {
        jj_consume_token(LET);
        b = let_binding(true);
                                   bindings.addElement(b);
        label_7:
        while (true) {
          if (jj_2_17(3)) {
            ;
          } else {
            break label_7;
          }
          jj_consume_token(COMMA);
          b = let_binding(false);
                                      bindings.addElement(b);
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_20(3)) {
        ;
      } else {
        break label_5;
      }
    }
    if (jj_2_21(3)) {
      jj_consume_token(WHERE);
      where = where_clause();
    } else {
      ;
    }
    if (jj_2_22(3)) {
      sort = order_by_clause();
    } else {
      ;
    }
    jj_consume_token(RETURN);
    e = expr_single();
     {if (true) return new FLWRExpression(bindings,where,e,sort);}
    throw new Error("Missing return statement in function");
  }

/**
 * -- S - Rule [34] - ForClause
 * Not used!
 */
  final public ForBinding for_clause(boolean isFirst) throws ParseException {
   Token t;
   boolean isDistinct = false;
   QuiltExpression e;
    t = jj_consume_token(VARNAME);
    if (jj_2_23(3)) {
      positional_var();
    } else {
      ;
    }
    jj_consume_token(IN);
    e = expr_single();
     {if (true) return new ForBinding(isFirst, chop(t.image), false, e);}
    throw new Error("Missing return statement in function");
  }

/**
 * -- S - Rule [35] - PositionalVar
 * Not used!
 */
  final public void positional_var() throws ParseException {
        Token t;
    jj_consume_token(ATALPHA);
    t = jj_consume_token(VARNAME);
         System.err.println("Positional Variables not supported");
  }

/**
 * -- S - Rule [36] - LetClause
 * Not used!
 */
  final public LetBinding let_clause(boolean isFirst) throws ParseException {
    Token t;
    QuiltExpression e;
    t = jj_consume_token(VARNAME);
    jj_consume_token(DEF);
    e = expr_single();
      {if (true) return new LetBinding(isFirst, chop(t.image), false, e);}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [37] - WhereClause
 */
  final public QuiltExpression where_clause() throws ParseException {
    QuiltExpression e;
    e = expr();
      {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [38] - OrderByClause
 */
  final public Vector order_by_clause() throws ParseException {
  Vector v = new Vector();
  SortClause s;
    jj_consume_token(ORDER);
    jj_consume_token(BY);
    s = order_spec();
                      v.addElement(s);
    label_8:
    while (true) {
      if (jj_2_24(3)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(COMMA);
      s = order_spec();
                        v.addElement(s);
    }
  {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

/**
 * S -  Rule [40] - OrderSpec
 */
  final public SortClause order_spec() throws ParseException {
    QuiltExpression e;
    boolean descOrder = false;
    e = expr_single();
    if (jj_2_25(3)) {
      jj_consume_token(DESC);
             {if (true) return new SortClause(e, true);}
    } else {
      ;
    }
     {if (true) return new SortClause(e, false);}
    throw new Error("Missing return statement in function");
  }

/**
 * -- S - Rule [41] - OrderModifier
 */

/**
 * S - Rule [42] - QuantifiedExpr
 */
  final public QuiltExpression quantified_expr() throws ParseException {
    int op;
    Token t;
    QuiltExpression e,cond,e_discard;
    if (jj_2_26(3)) {
      jj_consume_token(SOME_TOK);
                  op = Constants.SOME;
    } else if (jj_2_27(3)) {
      jj_consume_token(EVERY_TOK);
                   op = Constants.EVERY;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(VARNAME);
    jj_consume_token(IN);
    e = expr_single();
    label_9:
    while (true) {
      if (jj_2_28(3)) {
        ;
      } else {
        break label_9;
      }
      jj_consume_token(COMMA);
      e_discard = expr_single();
           System.err.print("Multiple variables in quantified expression");
           System.err.println("not supported");
    }
    jj_consume_token(SATISFIES);
    cond = expr_single();
      {if (true) return new Quantifier(op, chop(t.image), e, cond);}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [45] - If Expr
 */
  final public QuiltExpression if_expr() throws ParseException {
   QuiltExpression __if, __then, __else;
    jj_consume_token(IF);
    __if = expr();
    jj_consume_token(THEN);
    __then = expr_single();
    jj_consume_token(ELSE);
    __else = expr_single();
     {if (true) return new IfThenElse(__if, __then, __else);}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [46] - OrExpr
 */
  final public QuiltExpression or_expression() throws ParseException {
    QuiltExpression e, _e;
    Vector v = new Vector();
    boolean branch = false;
    e = and_expression();
    label_10:
    while (true) {
      if (jj_2_29(3)) {
        ;
      } else {
        break label_10;
      }
      branch = true;
      jj_consume_token(OR);
      _e = and_expression();
      v.addElement(_e);
    }
      {if (true) return branch ? new BinOpOR(e,v) : e;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [47] - AndExpr
 */
  final public QuiltExpression and_expression() throws ParseException {
    QuiltExpression e, _e;
    Vector v = new Vector();
    boolean branch = false;
    /* Unsupported - Should have been instance_of_expr() */
       e = comparison_expr();
    label_11:
    while (true) {
      if (jj_2_30(3)) {
        ;
      } else {
        break label_11;
      }
      branch = true;
      jj_consume_token(AND);
      _e = comparison_expr();
      v.addElement(_e);
    }
      {if (true) return branch ? new BinOpAND(e,v) : e;}
    throw new Error("Missing return statement in function");
  }

/**
 * -- S - Rule [54] - InstanceOfExpr
 * Unsupported
 */
  final public void instance_of_expr() throws ParseException {
  QuiltExpression e;
    treat_expr();
    if (jj_2_31(3)) {
      jj_consume_token(INSTANCE);
      jj_consume_token(OF);
    } else {
      ;
    }
   System.err.println("Instance of Expression not supported");
  }

/**
 * -- S - Rule [55] - TreatExpr
 * Unsupported
 */
  final public void treat_expr() throws ParseException {
  QuiltExpression e;
    castable_expr();
    if (jj_2_32(3)) {
      jj_consume_token(TREAT);
      jj_consume_token(AS);
    } else {
      ;
    }
   System.err.println("Treat Expression not supported");
  }

/**
 * -- S - Rule [56] - CastableExpr
 * Unsupported
 */
  final public void castable_expr() throws ParseException {
  QuiltExpression e;
    cast_expr();
    if (jj_2_33(3)) {
      jj_consume_token(CASTABLE);
      jj_consume_token(AS);
    } else {
      ;
    }
   System.err.println("Castable Expression not supported");
  }

/**
 * -- S - Rule [57] - CastExpr
 * Unsupported
 */
  final public void cast_expr() throws ParseException {
  QuiltExpression e;
    e = comparison_expr();
    if (jj_2_34(3)) {
      jj_consume_token(CAST);
      jj_consume_token(AS);
    } else {
      ;
    }
   System.err.println("Cast Expression not supported");
  }

/**
 * S - Rule [48] - ComparisonExpr
 * used by AndExpr
 */
  final public QuiltExpression comparison_expr() throws ParseException {
  QuiltExpression e;
  QuiltExpression _e = null;
  int op = -1;
  boolean branch = false;
    e = range_expr();
    if (jj_2_37(3)) {
   branch = true;
      if (jj_2_35(3)) {
        op = value_comp();
      } else if (jj_2_36(3)) {
        op = node_comp();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      _e = range_expr();
    } else {
      ;
    }
   {if (true) return branch ? new BinOpCOMP(op,e,_e) : e;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [49] - RangeExpr
 */
  final public QuiltExpression range_expr() throws ParseException {
  QuiltExpression e, e_discard;
    e = additive_expr();
    if (jj_2_38(3)) {
      jj_consume_token(TO);
      e_discard = additive_expr();
     System.err.println("Range Expressions not supported");
    } else {
      ;
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [50] - AdditiveExpr
 */
  final public QuiltExpression additive_expr() throws ParseException {
  QuiltExpression e,_e;
  Vector v = new Vector();
  boolean branch = false;
    /* Shift as far as possible in all arithmetic operations */
      e = subtractive_expression();
    label_12:
    while (true) {
      if (jj_2_39(3)) {
        ;
      } else {
        break label_12;
      }
    branch = true;
      jj_consume_token(PLUS);
      _e = subtractive_expression();
    v.addElement(_e);
    }
    {if (true) return branch ? new BinOpArith('+',e,v) : e;}
    throw new Error("Missing return statement in function");
  }

  final public QuiltExpression subtractive_expression() throws ParseException {
  QuiltExpression e, _e;
  Vector v = new Vector();
  boolean branch = false;
    e = multiplicative_expr();
    label_13:
    while (true) {
      if (jj_2_40(3)) {
        ;
      } else {
        break label_13;
      }
    branch = true;
      jj_consume_token(MINUS);
      _e = multiplicative_expr();
    v.addElement(e);
    }
    {if (true) return branch ? new BinOpArith('-',e,v) : e;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [51] - MultiplicativeExpr
 */
  final public QuiltExpression multiplicative_expr() throws ParseException {
  QuiltExpression e,_e;
  Vector v = new Vector();
  int op = -1;
  boolean branch = false;
    e = div_expr();
    label_14:
    while (true) {
      if (jj_2_41(3)) {
        ;
      } else {
        break label_14;
      }
    branch = true;
      jj_consume_token(STAR);
      _e = div_expr();
     v.addElement(_e);
    }
    {if (true) return branch? new BinOpArith('*',e,v) : e;}
    throw new Error("Missing return statement in function");
  }

  final public QuiltExpression div_expr() throws ParseException {
  QuiltExpression e,_e;
  Vector v = new Vector();
  int op = -1;
  boolean branch = false;
    e = mod_expr();
    label_15:
    while (true) {
      if (jj_2_42(3)) {
        ;
      } else {
        break label_15;
      }
    branch = true;
      jj_consume_token(DIV);
      _e = mod_expr();
     v.addElement(_e);
    }
    {if (true) return branch? new BinOpArith('/',e,v) : e;}
    throw new Error("Missing return statement in function");
  }

  final public QuiltExpression mod_expr() throws ParseException {
  QuiltExpression e,_e;
  Vector v = new Vector();
  int op = -1;
  boolean branch = false;
    e = unary_expr();
    label_16:
    while (true) {
      if (jj_2_43(3)) {
        ;
      } else {
        break label_16;
      }
    branch = true;
      jj_consume_token(MOD);
      _e = unary_expr();
     v.addElement(_e);
    }
    {if (true) return branch? new BinOpArith('/',e,v) : e;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [58] - UnaryExpr
 * Significant changes from the Kweelt grammar 
 */
  final public QuiltExpression unary_expr() throws ParseException {
   QuiltExpression e;
   Vector v = new Vector();
   boolean toggle = true;
    label_17:
    while (true) {
      if (jj_2_44(3)) {
        ;
      } else {
        break label_17;
      }
      if (jj_2_45(3)) {
        jj_consume_token(MINUS);
        if (toggle == true) {
         toggle = false;
       }else{
         toggle = true;
       }
      } else if (jj_2_46(3)) {
        jj_consume_token(PLUS);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    e = union_expr();
    if (toggle == true){
      {if (true) return e;}
    }else{
      {if (true) return new UnOpMinus(e);}
    }
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [52] - UnionExpr
 */
  final public QuiltExpression union_expr() throws ParseException {
  QuiltExpression e,_e;
  Vector v = new Vector();
  boolean branch = false;
    e = intersect_except_expr();
    label_18:
    while (true) {
      if (jj_2_47(3)) {
        ;
      } else {
        break label_18;
      }
    branch = true;
      if (jj_2_48(3)) {
        jj_consume_token(UNION);
      } else if (jj_2_49(3)) {
        jj_consume_token(PIPE);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      _e = intersect_except_expr();
     v.addElement(e);
    }
    {if (true) return branch ? new BinOpUnion(e,v) : e;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [53] - IntersectExceptExpr
 */
  final public QuiltExpression intersect_except_expr() throws ParseException {
  QuiltExpression e,_e;
  Vector v = new Vector();
  boolean branch = false;
    e = value_expr();
    label_19:
    while (true) {
      if (jj_2_50(3)) {
        ;
      } else {
        break label_19;
      }
      if (jj_2_51(3)) {
        jj_consume_token(INTERSECT);
     branch = true;
        _e = value_expr();
      v.addElement(_e);
      } else if (jj_2_52(3)) {
        jj_consume_token(EXCEPT);
        _e = value_expr();
      System.err.println("Except expression not supported");
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return branch ? new BinOpIntersection(e,v) : e;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [59] - ValueExpr
 * Supported -- Unsupported
 */
  final public QuiltExpression value_expr() throws ParseException {
  QuiltExpression e;
    e = path_expr();
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [68] - PathExpr
 * Absolute Path Expressions not supported
 * Significant Simplifications have been made.
 * The grammar of the steps allowed in this version of 
 * Kweelt is:
 * Further modification expected in the spirit of XPath 2.0
 * The path expression grammar supported is described in
 * the documentation shipped with the source code. See 
 *  PathExpr.txt
 */
  final public QuiltExpression path_expr() throws ParseException {
  QuiltExpression e;                  //Expressions for the node
  QuiltExpression e1;                 //Expressions for the node
  boolean isInput = false;            //Is the path expression from an input document?
  Vector v = new Vector();            //Vector of predicates for each step
  Vector nav = new Vector();          //A vector of steps in the expression
  Step dstep;                                             //A single step for a primary expression
  Step lstep;                         //A single step in the string of steps
  int axis;                           //Axis Step
  NodeTest nt;
    if (jj_2_72(3)) {
      if (jj_2_53(3)) {
        jj_consume_token(SLASH);
      } else if (jj_2_54(3)) {
        jj_consume_token(SLASH2);
                      System.err.println("Absolute Path Expression");
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    axis = Constants.CHILD_AXIS; /* default */
      if (jj_2_59(3)) {
        if (jj_2_55(3)) {
          axis = forward_axis();
        } else if (jj_2_56(3)) {
          jj_consume_token(AT);
                                   axis = Constants.ATTRIBUTE_AXIS;
        } else if (jj_2_57(3)) {
          axis = reverse_axis();
        } else if (jj_2_58(3)) {
          jj_consume_token(DOT);
          jj_consume_token(DOT);
                                         axis = Constants.PARENT_AXIS;
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
      nt = node_test();
      v = predicates();
    e1 = new CurrentNode();
    lstep = new LocationStep(axis,nt,v);
    nav.addElement(lstep);
    } else if (jj_2_73(3)) {
      e1 = primary_expr();
      v = predicates();
    /*********************************************
     * Can be null from parenthesized Expression 
     ********************************************/
      e1 = new FilterExpression(e1,v);
      label_20:
      while (true) {
        if (jj_2_60(3)) {
          ;
        } else {
          break label_20;
        }
        if (jj_2_70(3)) {
          if (jj_2_66(3)) {
            jj_consume_token(SLASH);
                 axis = Constants.CHILD_AXIS; /* default */
            if (jj_2_65(3)) {
              if (jj_2_61(3)) {
                axis = forward_axis();
              } else if (jj_2_62(3)) {
                jj_consume_token(AT);
                                              axis = Constants.ATTRIBUTE_AXIS;
              } else if (jj_2_63(3)) {
                axis = reverse_axis();
              } else if (jj_2_64(3)) {
                jj_consume_token(DOT);
                jj_consume_token(DOT);
                                               axis = Constants.PARENT_AXIS;
              } else {
                jj_consume_token(-1);
                throw new ParseException();
              }
            } else {
              ;
            }
          } else if (jj_2_67(3)) {
            jj_consume_token(SLASH2);
         axis = Constants.DESCENDANT_SELF_AXIS; /*Verify*/
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          if (jj_2_68(3)) {
            e1 = function_call();
            /*kludge - should be kind-test; this handles text()*/
                   v = predicates();
         e1 = new FilterExpression(e1,v);
                 /*kludge*/
                 //nav.addElement(e);

          } else if (jj_2_69(3)) {
            nt = node_test();
            v = predicates();
        if(v.size() == 0){
         /**
    	  * Satyadev - Jan 31 07
    	  *
    	 if(hasIter)
	        lstep = new DiskLocationStep(axis,nt);
	     else*/
                        lstep = new LocationStep(axis,nt);
        }else{
                 /**
	 	  * Satyadev - Jan 31 07
	 	  *
	 	 if(hasIter)
       	 	lstep = new DiskLocationStep(axis,nt,v);
	 	 else*/
                        lstep = new LocationStep(axis,nt,v);
        }
        nav.addElement(lstep);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else if (jj_2_71(3)) {
          dstep = deref_step();
                             nav.addElement(dstep);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
   /**
    * Satyadev - Jan 31 07
    *removed hasIter
    */
 {if (true) return hasIter ? new Nav(e1, nav) : new Nav(e1,nav);}
    throw new Error("Missing return statement in function");
  }

/*  (
   (<SLASH2> {e = new CurrentNode();}[ v = relative_path_expr() 
    {
     throw new ParseException("Absolute Path Expression");
    } 
   ])
  |(<SLASH> v = relative_path_expr() {
      e = new CurrentNode();
      throw new ParseException("Absolute Path Expression");
   }) 
  |(v = relative_path_expr() {e = new CurrentNode();})
  )
  { return new Nav(e,v); }
}
*/

/**
 * S - Rule [69] - RelativePathExpr
 */

/**
 * S - Rule [70] - StepExpr
 */

/**
 * S - Rule [71] - AxisStep
 */

/** 
 * S - Rule [81] - FilterStep
 */

/**
 * S - Rule [90] - ContextItemExpr
 */
  final public QuiltExpression context_item_expr() throws ParseException {
  QuiltExpression e;
    jj_consume_token(DOT);
         e = new CurrentNode(); {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [84] - PrimaryExpr
 */
  final public QuiltExpression primary_expr() throws ParseException {
  QuiltExpression e;
    if (jj_2_74(3)) {
      e = literal();
    } else if (jj_2_75(3)) {
      e = var_ref();
    } else if (jj_2_76(3)) {
      e = parenthesized_expr();
    } else if (jj_2_77(3)) {
      e = context_item_expr();
      e = new CurrentNode();
    } else if (jj_2_78(3)) {
      e = function_call();
    } else if (jj_2_79(3)) {
      e = constructor();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [87] - VarRef
 */
  final public QuiltExpression var_ref() throws ParseException {
  QuiltExpression e;
    e = variable();
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [83] - Predicates
 */
  final public Vector predicates() throws ParseException {
  QuiltExpression e;
  Vector v = new Vector();
    label_21:
    while (true) {
      if (jj_2_80(3)) {
        ;
      } else {
        break label_21;
      }
      jj_consume_token(LBRACKET);
      e = expr();
                   v.addElement(e);
      jj_consume_token(RBRACKET);
    }
    {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [63] - ValidateExpr
 */

/**
 * S - Rule [] - SchemaContext 
 */

/**
 * S - Rule [94] - Constructor
 */
  final public QuiltExpression constructor() throws ParseException {
   QuiltExpression e;
    if (jj_2_81(3)) {
      e = dir_elem_constructor();
    } else if (jj_2_82(3)) {
      e = computed_constructor();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/*| e = xml_comment() | e = xml_p_i() | e = cdata_section () */

/**
 * S - Rule [109] - ComputedConstructor
 */
  final public QuiltExpression computed_constructor() throws ParseException {
  QuiltExpression e;
    e = comp_elem_constructor();
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [60] - GeneralComp
 */
  final public int general_comp() throws ParseException {
  int op;
    if (jj_2_83(3)) {
      jj_consume_token(EQUAL);
             op = Constants.EQ;
    } else if (jj_2_84(3)) {
      jj_consume_token(NEQUAL);
             op = Constants.NEQ;
    } else if (jj_2_85(3)) {
      jj_consume_token(LTHAN);
             op = Constants.LT;
    } else if (jj_2_86(3)) {
      jj_consume_token(LEQUAL);
             op = Constants.LEQ;
    } else if (jj_2_87(3)) {
      jj_consume_token(GTHAN);
             op = Constants.GT;
    } else if (jj_2_88(3)) {
      jj_consume_token(GEQUAL);
             op = Constants.GEQ;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [61] - ValueComp
 */
  final public int value_comp() throws ParseException {
  int op;
    if (jj_2_89(3)) {
      jj_consume_token(EQUAL);
             op = Constants.EQ;
    } else if (jj_2_90(3)) {
      jj_consume_token(NEQUAL);
             op = Constants.NEQ;
    } else if (jj_2_91(3)) {
      jj_consume_token(LTHAN);
             op = Constants.LT;
    } else if (jj_2_92(3)) {
      jj_consume_token(LEQUAL);
             op = Constants.LEQ;
    } else if (jj_2_93(3)) {
      jj_consume_token(GTHAN);
             op = Constants.GT;
    } else if (jj_2_94(3)) {
      jj_consume_token(GEQUAL);
             op = Constants.GEQ;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [62] - NodeComp
 */
  final public int node_comp() throws ParseException {
  int op;
    if (jj_2_95(3)) {
      jj_consume_token(IS);
             op = Constants.IS;
    } else if (jj_2_96(3)) {
      jj_consume_token(COUT);
             op = Constants.COUT;
    } else if (jj_2_97(3)) {
      jj_consume_token(CIN);
             op = Constants.CIN;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [72] - ForwardStep - [74]
 */
  final public Step forward_step() throws ParseException {
  int axis;
  NodeTest nt;
    if (jj_2_98(3)) {
      axis = forward_axis();
      nt = node_test();
       {if (true) return new LocationStep(axis,nt);}
    } else if (jj_2_99(3)) {
      jj_consume_token(AT);
      nt = node_test();
       {if (true) return new LocationStep(Constants.ATTRIBUTE_AXIS, nt);}
    } else if (jj_2_100(3)) {
      nt = node_test();
       {if (true) return new LocationStep(Constants.CHILD_AXIS, nt);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [75] - ReverseStep
 */
  final public Step reverse_step() throws ParseException {
  int axis;
  NodeTest nt;
    if (jj_2_101(3)) {
      axis = reverse_axis();
      nt = node_test();
    {if (true) return new LocationStep(axis,nt);}
    } else if (jj_2_102(3)) {
      jj_consume_token(DOT);
      jj_consume_token(DOT);
    {if (true) return new LocationStep(Constants.PARENT_AXIS,null,null);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [74] - AbbrevForwardStep
 */

/**
 * S - Rule [77] - AbbrevReverseStep
 */

/**
 * S - Rule [73] - ForwardAxis
 */
  final public int forward_axis() throws ParseException {
  int a;
    if (jj_2_103(3)) {
      jj_consume_token(CHILD);
                        a = Constants.CHILD_AXIS;
    } else if (jj_2_104(3)) {
      jj_consume_token(DESCENDANT);
                        a = Constants.DESCENDANT_AXIS;
    } else if (jj_2_105(3)) {
      jj_consume_token(DESCENDANT_SELF);
                        a = Constants.DESCENDANT_SELF_AXIS;
    } else if (jj_2_106(3)) {
      jj_consume_token(FOLLOWING);
                        a = Constants.FOLLOWING_AXIS;
    } else if (jj_2_107(3)) {
      jj_consume_token(FOLLOWING_SIBLING);
                        a = Constants.FOLLOWING_SIBLING_AXIS;
    } else if (jj_2_108(3)) {
      jj_consume_token(SELF);
                        a = Constants.SELF_AXIS;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [76] - ReverseAxis
 */
  final public int reverse_axis() throws ParseException {
  int a;
    if (jj_2_109(3)) {
      jj_consume_token(PARENT);
                        a = Constants.PARENT_AXIS;
    } else if (jj_2_110(3)) {
      jj_consume_token(ANCESTOR);
                        a = Constants.ANCESTOR_AXIS;
    } else if (jj_2_111(3)) {
      jj_consume_token(PRECEDING_SIBLING);
                        a = Constants.PRECEDING_SIBLING_AXIS;
    } else if (jj_2_112(3)) {
      jj_consume_token(ANCESTOR_SELF);
                        a = Constants.ANCESTOR_SELF_AXIS;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [78] - NodeTest
 */
  final public NodeTest node_test() throws ParseException {
  NodeTest nt;
    if (jj_2_113(3)) {
      nt = name_test();
    } else if (jj_2_114(3)) {
      nt = kind_test();
    } else if (jj_2_115(3)) {
      jj_consume_token(STAR);
           nt = new NameTest(); /*matches all*/
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return nt;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [79] - NameTest
 */
  final public NodeTest name_test() throws ParseException {
  Token t;
    t = jj_consume_token(NAME);
    {if (true) return new NameTest(t.image);}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [93] - WildCard
 */

/**
 * S - Rule [85] - Literal
 */
  final public QuiltExpression literal() throws ParseException {
  QuiltExpression e;
    if (jj_2_116(3)) {
      e = numeric_literal();
    } else if (jj_2_117(3)) {
      e = string_literal();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [86] - NumericLiteral
 */
  final public QuiltExpression numeric_literal() throws ParseException {
  Token t;
    /* e = integer_literal() 
       | e = decimal_literal() 
       | e = double_literal() */
      t = jj_consume_token(NUMBER);
   {if (true) return new ValueNum(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public QuiltExpression string_literal() throws ParseException {
  Token t;
    t = jj_consume_token(STRING);
   {if (true) return new ValueString(unquote(t.image));}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [89] - ParenthesizedExpr
 */
  final public QuiltExpression parenthesized_expr() throws ParseException {
  QuiltExpression e = null;
    jj_consume_token(LPAREN);
    if (jj_2_118(3)) {
      e = expr();
    } else {
      ;
    }
    jj_consume_token(RPAREN);
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [93] - FunctionCall
 */
  final public QuiltExpression function_call() throws ParseException {
   FunCall f;                           //function call object
   Token t;                             //function name
   Vector v = new Vector();             //arguments
   QuiltExpression exp;
    t = jj_consume_token(NAME);
    jj_consume_token(LPAREN);
      String funName = t.image;
      if (funDefNames.containsKey(funName)){
        f = new FunUserDefined(funName);
      }else{
        try{
          if(funImportNames.containsKey(funName)){
            f = (FunCall) Class.forName(
                           (String) funImportNames.get(funName)
                          ).newInstance();
          }else{
            f = (FunCall) Class.forName(
                           (String)
                           "cycsx.csxqueryengine.quiltcsx.Fun"+
                           funName.toUpperCase()
                          ).newInstance();
            if(funName.equals("documentiter")){
                /*
		 *Satyadev - DEBUG
		 */
                hasIter = true;
                /* System.err.println("Parsed Here"); */
            }
          }
        }catch(Exception e){
          e.printStackTrace();
          {if (true) throw new ParseException("Unable to Instantiate" + funName);}
        }
      }
    if (jj_2_120(3)) {
      exp = expr_single();
                              v.addElement(exp);
      label_22:
      while (true) {
        if (jj_2_119(3)) {
          ;
        } else {
          break label_22;
        }
        exp = expr_single();
                              v.addElement(exp);
      }
    } else {
      ;
    }
    jj_consume_token(RPAREN);
        f.pushArgs(v);
        {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [96] - DirElemConstructor
 */
  final public QuiltExpression dir_elem_constructor() throws ParseException {
  Token           t;                        //Element Name
  QuiltExpression e;                        //Element Name Expression
  Vector       atts;                        //Attributes
  Vector    content = new Vector();
    jj_consume_token(TAG1);
    t = jj_consume_token(NAME);
    atts = attribute_list();
    if (jj_2_122(3)) {
      jj_consume_token(TAG3);
    } else if (jj_2_123(3)) {
      jj_consume_token(TAG2);
      label_23:
      while (true) {
        if (jj_2_121(3)) {
          ;
        } else {
          break label_23;
        }
        e = element_content();
                                 content.addElement(e);
      }
      jj_consume_token(TAG4);
      jj_consume_token(NAME);
      jj_consume_token(TAG2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return  new ElementConstruct (
               getTagName(t.image),
               atts,
               content,
               canUtil
              );}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [110] - CompDocConstructor
 */

/**
 * S - Rule [111] - CompElemConstructor
 */

/**
 * S - Rule [] - CompNSConstructor
 */

/**
 * S - Rule [113] - CompAttrConstructor
 */

/**
 * S - Rule [] - CompXMLPI
 */

/**
 * S - Rule [] - CompXMLComment
 */

/**
 * S - Rule [114] - CompTextConstructor
 */

/**
 * S - Rule [107] - CdataSection
 */

/**
 * S - Rule [] - XmlPI
 */

/**
 * S - Rule [] - XmlComment
 */

/**
 * S - Rule [] - ElementContent
 */
  final public QuiltExpression element_content() throws ParseException {
  QuiltExpression e;
    if (jj_2_124(3)) {
      e = dir_elem_constructor();
    } else if (jj_2_125(3)) {
      e = enclosed_expr();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [] - AttributeList
 */
  final public Vector attribute_list() throws ParseException {
  Token            t;              //Attribute Name
  QuiltExpression e;
  Vector v = new Vector();
    label_24:
    while (true) {
      if (jj_2_126(3)) {
        ;
      } else {
        break label_24;
      }
      t = jj_consume_token(NAME);
      jj_consume_token(EQUAL);
      e = attribute_value();
     v.addElement(new AttributeExpression(t.image,e));
    }
   {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public QuiltExpression comp_elem_constructor() throws ParseException {
  Token t;
  QuiltExpression e;
  QuiltExpression name_expr;
  Vector atts = null;
  Vector contents = new Vector();
  boolean branch = false;
    jj_consume_token(ELEMENT_NODE_TOK);
    if (jj_2_129(3)) {
      t = jj_consume_token(NAME);
              branch=true;
      jj_consume_token(LBRACE);
      if (jj_2_127(3)) {
        e = expr();
                  contents.addElement(e);
      } else {
        ;
      }
      {if (true) return new ElementConstruct(getTagName(t.image),atts,contents,canUtil);}
    } else if (jj_2_130(3)) {
      jj_consume_token(LBRACE);
      name_expr = expr();
      jj_consume_token(RBRACE);
      jj_consume_token(LBRACE);
      if (jj_2_128(3)) {
        e = expr();
                  contents.addElement(e);
      } else {
        ;
      }
     System.err.println("Computed Element Names not supported");
     {if (true) return new ElementConstruct(getTagName("Junk"),atts,contents,canUtil);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Unsupported
 */
  final public QuiltExpression attribute_value() throws ParseException {
  QuiltExpression e;
  Token t;
    if (jj_2_131(3)) {
      t = jj_consume_token(STRING);
                   {if (true) return new ValueString(unquote(t.image));}
    } else if (jj_2_132(3)) {
      e = enclosed_expr();
                          {if (true) return e;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public QuiltExpression enclosed_expr() throws ParseException {
  QuiltExpression e;
    jj_consume_token(LBRACE);
    e = expr();
    jj_consume_token(RBRACE);
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [123]
 * Partially Supported
 */
  final public NodeTest kind_test() throws ParseException {
  int type;
    if (jj_2_133(3)) {
      jj_consume_token(TEXT_NODE_TOK);
                                 type = Constants.TEXT_NODE;
    } else if (jj_2_134(3)) {
      jj_consume_token(PAGEID_NODE_TOK);
                                     type = Constants.PAGEID_NODE;
    } else if (jj_2_135(3)) {
      jj_consume_token(PAGEOFFSET_NODE_TOK);
                                         type = Constants.PAGEOFFSET_NODE;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
    jj_consume_token(RPAREN);
                 {if (true) return new NodeType(type);}
    throw new Error("Missing return statement in function");
  }

/** should I distinguish between fun variable and quilt variables ? **/

/**
 * S - Rule [34] - ForClause
 * 
 */
  final public ForBinding for_binding(boolean isFirst) throws ParseException {
    Token t;
    boolean isDistinct = false;
    QuiltExpression e;
    t = jj_consume_token(VARNAME);
    jj_consume_token(IN);
    if (jj_2_136(3)) {
      jj_consume_token(DISTINCT);
                   isDistinct = true;
    } else {
      ;
    }
    e = expr_single();
      {if (true) return new ForBinding(isFirst, chop(t.image), isDistinct, e);}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule [36] - LetClause
 * 
 */
  final public LetBinding let_binding(boolean isFirst) throws ParseException {
    Token t;
    boolean isDistinct = false;
    QuiltExpression  e;
    t = jj_consume_token(VARNAME);
    jj_consume_token(DEF);
    if (jj_2_137(3)) {
      jj_consume_token(DISTINCT);
                   isDistinct = true;
    } else {
      ;
    }
    e = expr_single();
      {if (true) return new LetBinding(isFirst, chop(t.image), isDistinct, e);}
    throw new Error("Missing return statement in function");
  }

/**
 * Xquery update operations begins here
 * S - Rule [146]
 */
  final public QuiltExpression rename_expression() throws ParseException {
    QuiltExpression e;
    String newname;
    jj_consume_token(RENAME);
    jj_consume_token(NODE);
    e = expr_single();
    jj_consume_token(AS);
    newname = qname();
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/**
 * Xquery update operations begins here
 * S - Rule [144]
 */
  final public QuiltExpression delete_expression() throws ParseException {
    QuiltExpression e;
    String newname;
    jj_consume_token(DELETE);
    if (jj_2_138(3)) {
      jj_consume_token(NODE);
    } else {
      ;
    }
    e = expr_single();
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public QuiltExpression variable() throws ParseException {
    QuiltExpression e;
    Token t;
    Vector v = new Vector();
    Var var;
    boolean branch = false;
    /** Verify */
        /*t=<VARNAME> [ e=expr_single() {branch = true;v.addElement(e);} ]*/
        t = jj_consume_token(VARNAME);
        var = new Var(chop(t.image));
        if (branch == false)
        {
          {if (true) return var;}
        }
        else
        {
          {if (true) return new FilterExpression(var, v);}
        }
    throw new Error("Missing return statement in function");
  }

  final public String qname() throws ParseException {
    Token t;
    t = jj_consume_token(NAME);
               {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/**
 * S - Rule 
 */
  final public void finito() throws ParseException {
    jj_consume_token(FINITO);
  }

/**
 * ISU-specific extensions - Dereferencing Step
 */
  final public Step deref_step() throws ParseException {
        Token t;
        DerefStep s = new DerefStep();
        Vector hints;
        Vector predicates = new Vector();
        QuiltExpression e;
    jj_consume_token(ARROW);
    if (jj_2_139(3)) {
      jj_consume_token(LBRACE);
      hints = hints();
                                    s.setHints (hints);
      jj_consume_token(RBRACE);
    } else {
      ;
    }
    label_25:
    while (true) {
      if (jj_2_140(3)) {
        ;
      } else {
        break label_25;
      }
      jj_consume_token(LBRACKET);
      e = expr();
      jj_consume_token(RBRACKET);
                 predicates.addElement(e);
    }
                s.setPredicates(predicates);
                {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/**
 * ISU-specific extensions - hints
 */
  final public Vector hints() throws ParseException {
        String elementName, idName;
        Vector v = new Vector();
    elementName = qname();
    jj_consume_token(AT);
    idName = qname();
          v.addElement( new DerefPair(elementName, idName));
    label_26:
    while (true) {
      if (jj_2_141(3)) {
        ;
      } else {
        break label_26;
      }
      jj_consume_token(COMMA);
      elementName = qname();
      jj_consume_token(AT);
      idName = qname();
                  v.addElement( new DerefPair(elementName, idName));
    }
                {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  private boolean jj_2_103(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(102, xla); }
  }

  private boolean jj_2_104(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(103, xla); }
  }

  private boolean jj_2_105(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(104, xla); }
  }

  private boolean jj_2_106(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_106(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(105, xla); }
  }

  private boolean jj_2_107(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_107(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(106, xla); }
  }

  private boolean jj_2_108(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_108(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(107, xla); }
  }

  private boolean jj_2_109(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_109(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(108, xla); }
  }

  private boolean jj_2_110(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_110(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(109, xla); }
  }

  private boolean jj_2_111(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_111(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(110, xla); }
  }

  private boolean jj_2_112(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_112(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(111, xla); }
  }

  private boolean jj_2_113(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_113(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(112, xla); }
  }

  private boolean jj_2_114(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_114(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(113, xla); }
  }

  private boolean jj_2_115(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_115(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(114, xla); }
  }

  private boolean jj_2_116(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_116(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(115, xla); }
  }

  private boolean jj_2_117(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_117(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(116, xla); }
  }

  private boolean jj_2_118(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_118(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(117, xla); }
  }

  private boolean jj_2_119(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_119(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(118, xla); }
  }

  private boolean jj_2_120(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_120(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(119, xla); }
  }

  private boolean jj_2_121(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_121(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(120, xla); }
  }

  private boolean jj_2_122(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_122(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(121, xla); }
  }

  private boolean jj_2_123(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_123(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(122, xla); }
  }

  private boolean jj_2_124(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_124(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(123, xla); }
  }

  private boolean jj_2_125(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_125(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(124, xla); }
  }

  private boolean jj_2_126(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_126(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(125, xla); }
  }

  private boolean jj_2_127(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_127(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(126, xla); }
  }

  private boolean jj_2_128(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_128(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(127, xla); }
  }

  private boolean jj_2_129(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_129(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(128, xla); }
  }

  private boolean jj_2_130(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_130(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(129, xla); }
  }

  private boolean jj_2_131(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_131(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(130, xla); }
  }

  private boolean jj_2_132(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_132(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(131, xla); }
  }

  private boolean jj_2_133(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_133(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(132, xla); }
  }

  private boolean jj_2_134(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_134(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(133, xla); }
  }

  private boolean jj_2_135(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_135(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(134, xla); }
  }

  private boolean jj_2_136(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_136(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(135, xla); }
  }

  private boolean jj_2_137(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_137(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(136, xla); }
  }

  private boolean jj_2_138(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_138(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(137, xla); }
  }

  private boolean jj_2_139(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_139(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(138, xla); }
  }

  private boolean jj_2_140(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_140(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(139, xla); }
  }

  private boolean jj_2_141(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_141(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(140, xla); }
  }

  private boolean jj_3_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) return true;
    }
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_54()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_100() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3_99() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3_98() {
    if (jj_3R_56()) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(ATALPHA)) return true;
    if (jj_scan_token(VARNAME)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_97() {
    if (jj_scan_token(CIN)) return true;
    return false;
  }

  private boolean jj_3_96() {
    if (jj_scan_token(COUT)) return true;
    return false;
  }

  private boolean jj_3_132() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_95() {
    if (jj_scan_token(IS)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_95()) {
    jj_scanpos = xsp;
    if (jj_3_96()) {
    jj_scanpos = xsp;
    if (jj_3_97()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_45() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) return true;
    }
    return false;
  }

  private boolean jj_3_131() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_131()) {
    jj_scanpos = xsp;
    if (jj_3_132()) return true;
    }
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_44()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_94() {
    if (jj_scan_token(GEQUAL)) return true;
    return false;
  }

  private boolean jj_3_93() {
    if (jj_scan_token(GTHAN)) return true;
    return false;
  }

  private boolean jj_3_92() {
    if (jj_scan_token(LEQUAL)) return true;
    return false;
  }

  private boolean jj_3_91() {
    if (jj_scan_token(LTHAN)) return true;
    return false;
  }

  private boolean jj_3_90() {
    if (jj_scan_token(NEQUAL)) return true;
    return false;
  }

  private boolean jj_3_89() {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3_128() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_89()) {
    jj_scanpos = xsp;
    if (jj_3_90()) {
    jj_scanpos = xsp;
    if (jj_3_91()) {
    jj_scanpos = xsp;
    if (jj_3_92()) {
    jj_scanpos = xsp;
    if (jj_3_93()) {
    jj_scanpos = xsp;
    if (jj_3_94()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_130() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_127() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(MOD)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_129() {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_127()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(ELEMENT_NODE_TOK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_129()) {
    jj_scanpos = xsp;
    if (jj_3_130()) return true;
    }
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(LET)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_88() {
    if (jj_scan_token(GEQUAL)) return true;
    return false;
  }

  private boolean jj_3_87() {
    if (jj_scan_token(GTHAN)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_86() {
    if (jj_scan_token(LEQUAL)) return true;
    return false;
  }

  private boolean jj_3_85() {
    if (jj_scan_token(LTHAN)) return true;
    return false;
  }

  private boolean jj_3_125() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_84() {
    if (jj_scan_token(NEQUAL)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    return false;
  }

  private boolean jj_3_82() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3_83() {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    if (jj_3_20()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_126() {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_126()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_124() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_124()) {
    jj_scanpos = xsp;
    if (jj_3_125()) return true;
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_81() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_81()) {
    jj_scanpos = xsp;
    if (jj_3_82()) return true;
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_40()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_80() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_80()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_31()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_49()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_39()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3_79() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_78() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(VARNAME)) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(TO)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(VARNAME)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_76() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3_77() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_48()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_75() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_74() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3_121() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3_75()) {
    jj_scanpos = xsp;
    if (jj_3_76()) {
    jj_scanpos = xsp;
    if (jj_3_77()) {
    jj_scanpos = xsp;
    if (jj_3_78()) {
    jj_scanpos = xsp;
    if (jj_3_79()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_123() {
    if (jj_scan_token(TAG2)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_121()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(TAG4)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_122() {
    if (jj_scan_token(TAG3)) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(TAG1)) return true;
    if (jj_scan_token(NAME)) return true;
    if (jj_3R_82()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_122()) {
    jj_scanpos = xsp;
    if (jj_3_123()) return true;
    }
    return false;
  }

  private boolean jj_3_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) return true;
    }
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(CLASSNAME)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_47()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(DECLARE)) return true;
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    if (jj_3_8()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_119() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_120() {
    if (jj_3R_31()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_119()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(CAST)) return true;
    if (jj_scan_token(AS)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(IMPORT)) return true;
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(AS)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    if (jj_3_5()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(CASTABLE)) return true;
    if (jj_scan_token(AS)) return true;
    return false;
  }

  private boolean jj_3_141() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_78()) return true;
    if (jj_scan_token(AT)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(TREAT)) return true;
    if (jj_scan_token(AS)) return true;
    return false;
  }

  private boolean jj_3_71() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_78()) return true;
    if (jj_scan_token(AT)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_120()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(INSTANCE)) return true;
    if (jj_scan_token(OF)) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_scan_token(AT)) return true;
    return false;
  }

  private boolean jj_3_64() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_140() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_118() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_69() {
    if (jj_3R_59()) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3_139() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_118()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(ARROW)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_139()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_140()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_68() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_61() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_67() {
    if (jj_scan_token(SLASH2)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_scan_token(SLASH)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_65()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_66()) {
    jj_scanpos = xsp;
    if (jj_3_67()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_68()) {
    jj_scanpos = xsp;
    if (jj_3_69()) return true;
    }
    return false;
  }

  private boolean jj_3_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_70()) {
    jj_scanpos = xsp;
    if (jj_3_71()) return true;
    }
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_58() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_scan_token(AT)) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_116() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3_117() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_116()) {
    jj_scanpos = xsp;
    if (jj_3_117()) return true;
    }
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(THEN)) return true;
    return false;
  }

  private boolean jj_3_73() {
    if (jj_3R_62()) return true;
    if (jj_3R_60()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_60()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_54() {
    if (jj_scan_token(SLASH2)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(VARNAME)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_55() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3_138() {
    if (jj_scan_token(NODE)) return true;
    return false;
  }

  private boolean jj_3_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_59()) jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_115() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_72()) {
    jj_scanpos = xsp;
    if (jj_3_73()) return true;
    }
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(DELETE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_138()) jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(EVERY_TOK)) return true;
    return false;
  }

  private boolean jj_3_114() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(SOME_TOK)) return true;
    return false;
  }

  private boolean jj_3_113() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_113()) {
    jj_scanpos = xsp;
    if (jj_3_114()) {
    jj_scanpos = xsp;
    if (jj_3_115()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(RENAME)) return true;
    if (jj_scan_token(NODE)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_112() {
    if (jj_scan_token(ANCESTOR_SELF)) return true;
    return false;
  }

  private boolean jj_3_111() {
    if (jj_scan_token(PRECEDING_SIBLING)) return true;
    return false;
  }

  private boolean jj_3_110() {
    if (jj_scan_token(ANCESTOR)) return true;
    return false;
  }

  private boolean jj_3_109() {
    if (jj_scan_token(PARENT)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_109()) {
    jj_scanpos = xsp;
    if (jj_3_110()) {
    jj_scanpos = xsp;
    if (jj_3_111()) {
    jj_scanpos = xsp;
    if (jj_3_112()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(DESC)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3_137() {
    if (jj_scan_token(DISTINCT)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(VARNAME)) return true;
    if (jj_scan_token(DEF)) return true;
    return false;
  }

  private boolean jj_3_108() {
    if (jj_scan_token(SELF)) return true;
    return false;
  }

  private boolean jj_3_107() {
    if (jj_scan_token(FOLLOWING_SIBLING)) return true;
    return false;
  }

  private boolean jj_3_106() {
    if (jj_scan_token(FOLLOWING)) return true;
    return false;
  }

  private boolean jj_3_105() {
    if (jj_scan_token(DESCENDANT_SELF)) return true;
    return false;
  }

  private boolean jj_3_104() {
    if (jj_scan_token(DESCENDANT)) return true;
    return false;
  }

  private boolean jj_3_103() {
    if (jj_scan_token(CHILD)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_103()) {
    jj_scanpos = xsp;
    if (jj_3_104()) {
    jj_scanpos = xsp;
    if (jj_3_105()) {
    jj_scanpos = xsp;
    if (jj_3_106()) {
    jj_scanpos = xsp;
    if (jj_3_107()) {
    jj_scanpos = xsp;
    if (jj_3_108()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_scan_token(EXCEPT)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_136() {
    if (jj_scan_token(DISTINCT)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(VARNAME)) return true;
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_scan_token(INTERSECT)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) return true;
    }
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(ORDER)) return true;
    if (jj_scan_token(BY)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_50()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_135() {
    if (jj_scan_token(PAGEOFFSET_NODE_TOK)) return true;
    return false;
  }

  private boolean jj_3_134() {
    if (jj_scan_token(PAGEID_NODE_TOK)) return true;
    return false;
  }

  private boolean jj_3_133() {
    if (jj_scan_token(TEXT_NODE_TOK)) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_scan_token(PIPE)) return true;
    return false;
  }

  private boolean jj_3_102() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_101() {
    if (jj_3R_57()) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_133()) {
    jj_scanpos = xsp;
    if (jj_3_134()) {
    jj_scanpos = xsp;
    if (jj_3_135()) return true;
    }
    }
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_scan_token(UNION)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public QuiltParserTokenManager token_source;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[141];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with user supplied CharStream. */
  public QuiltParser(CharStream stream) {
    token_source = new QuiltParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public QuiltParser(QuiltParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(QuiltParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[128];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 128; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 141; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
            case 102: jj_3_103(); break;
            case 103: jj_3_104(); break;
            case 104: jj_3_105(); break;
            case 105: jj_3_106(); break;
            case 106: jj_3_107(); break;
            case 107: jj_3_108(); break;
            case 108: jj_3_109(); break;
            case 109: jj_3_110(); break;
            case 110: jj_3_111(); break;
            case 111: jj_3_112(); break;
            case 112: jj_3_113(); break;
            case 113: jj_3_114(); break;
            case 114: jj_3_115(); break;
            case 115: jj_3_116(); break;
            case 116: jj_3_117(); break;
            case 117: jj_3_118(); break;
            case 118: jj_3_119(); break;
            case 119: jj_3_120(); break;
            case 120: jj_3_121(); break;
            case 121: jj_3_122(); break;
            case 122: jj_3_123(); break;
            case 123: jj_3_124(); break;
            case 124: jj_3_125(); break;
            case 125: jj_3_126(); break;
            case 126: jj_3_127(); break;
            case 127: jj_3_128(); break;
            case 128: jj_3_129(); break;
            case 129: jj_3_130(); break;
            case 130: jj_3_131(); break;
            case 131: jj_3_132(); break;
            case 132: jj_3_133(); break;
            case 133: jj_3_134(); break;
            case 134: jj_3_135(); break;
            case 135: jj_3_136(); break;
            case 136: jj_3_137(); break;
            case 137: jj_3_138(); break;
            case 138: jj_3_139(); break;
            case 139: jj_3_140(); break;
            case 140: jj_3_141(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
