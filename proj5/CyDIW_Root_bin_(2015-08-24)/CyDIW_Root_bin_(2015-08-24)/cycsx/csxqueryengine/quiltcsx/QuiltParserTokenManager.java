/* Generated By:JavaCC: Do not edit this line. QuiltParserTokenManager.java */
package cycsx.csxqueryengine.quiltcsx;
import cycsx.csxqueryengine.common.Constants;
import java.io.*;
import java.util.Hashtable;
import java.util.Vector;
import cycsx.csxpagination.util.CanStoreXUtil;

/** Token Manager. */
public class QuiltParserTokenManager implements QuiltParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 37:
         jjmatchedKind = 51;
         return jjMoveNfa_0(7, 0);
      case 40:
         jjmatchedKind = 5;
         return jjMoveNfa_0(7, 0);
      case 41:
         jjmatchedKind = 6;
         return jjMoveNfa_0(7, 0);
      case 42:
         jjmatchedKind = 46;
         return jjMoveNfa_0(7, 0);
      case 43:
         jjmatchedKind = 45;
         return jjMoveNfa_0(7, 0);
      case 44:
         jjmatchedKind = 124;
         return jjMoveNfa_0(7, 0);
      case 45:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 46:
         jjmatchedKind = 61;
         return jjMoveNfa_0(7, 0);
      case 47:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x20000000000L);
      case 58:
         jjmatchedKind = 123;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000000L);
      case 59:
         jjmatchedKind = 62;
         return jjMoveNfa_0(7, 0);
      case 60:
         jjmatchedKind = 103;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40001000000L);
      case 62:
         jjmatchedKind = 104;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000L);
      case 64:
         jjmatchedKind = 52;
         return jjMoveNfa_0(7, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x220080000000000L, 0x4800L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x40L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x180000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x100001401L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x800000000004000L, 0x4044000000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x1000000000200000L, 0x82L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x210412200L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x20000002000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x20020L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0xb0000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x480000008L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xa008010L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x108000L, 0x20240000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 88:
         jjmatchedKind = 49;
         return jjMoveNfa_0(7, 0);
      case 91:
         jjmatchedKind = 9;
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L);
      case 93:
         jjmatchedKind = 10;
         return jjMoveNfa_0(7, 0);
      case 94:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x220080000000000L, 0x4800L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x40L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x180000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x100001401L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x800000000004000L, 0x4044000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1000000000200000L, 0x82L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x210412200L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x20000002000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x20020L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0xb0000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x480000008L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xa008010L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x108000L, 0x20240000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 120:
         jjmatchedKind = 49;
         return jjMoveNfa_0(7, 0);
      case 123:
         jjmatchedKind = 7;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L);
      case 124:
         jjmatchedKind = 54;
         return jjMoveNfa_0(7, 0);
      case 125:
         jjmatchedKind = 8;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L);
      default :
         return jjMoveNfa_0(7, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 0);
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 1;
         }
         break;
      case 60:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 1;
         }
         break;
      case 62:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x230000L, active1, 0x8180000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000008000L, active1, 0x580001109L);
      case 70:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000004L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x1004000000000000L, active1, 0x400L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0x40000000L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L);
      case 78:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x480080000000000L, active1, 0x200010000L);
      case 79:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20000042000L, active1, 0x2000090L);
      case 82:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x180000L, active1, 0x40020L);
      case 83:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800L);
      case 84:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0x4000000000L);
      case 89:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 1;
         }
         break;
      case 91:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 1;
         }
         break;
      case 94:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x230000L, active1, 0x8180000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000008000L, active1, 0x580001109L);
      case 102:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000004L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1004000000000000L, active1, 0x400L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0x40000000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L);
      case 110:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x480080000000000L, active1, 0x200010000L);
      case 111:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20000042000L, active1, 0x2000090L);
      case 114:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x180000L, active1, 0x40020L);
      case 115:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800L);
      case 116:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0x4000000000L);
      case 121:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 1;
         }
         break;
      case 123:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 1;
         }
         break;
      case 125:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(7, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 1);
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000000000L);
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0x801L);
      case 68:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0x20L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0x24040004L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0x4000000000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000200000L, active1, 0x100000000L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0x2000000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000002L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400002000L);
      case 82:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x240191400L);
      case 84:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x600000000000000L, active1, 0x8000008L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L);
      case 86:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 2;
         }
         break;
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0x801L);
      case 100:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0x20L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0x24040004L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0x4000000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000200000L, active1, 0x100000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0x2000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000002L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400002000L);
      case 114:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x240191400L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x600000000000000L, active1, 0x8000008L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L);
      case 118:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 2;
         }
         break;
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 2);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000000000L);
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80040000L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0x1002L);
      case 69:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0xe00000000030000L, active1, 0x300000820L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000001L);
      case 77:
         return jjMoveStringLiteralDfa4_0(active0, 0x44000L, active1, 0L);
      case 78:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x180000000000000L, active1, 0x2000L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000004L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0x4000000000L);
      case 84:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0x90410L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80040000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0x1002L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0xe00000000030000L, active1, 0x300000820L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000001L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x44000L, active1, 0L);
      case 110:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x180000000000000L, active1, 0x2000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000004L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0x4000000000L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0x90410L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 3);
   }
   switch(curChar)
   {
      case 41:
         if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 4;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400090001L);
      case 66:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L);
      case 69:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000c4000L, active1, 0x1000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L, active1, 0x400L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000L);
      case 78:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);
      case 82:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x500000000000000L, active1, 0x200002008L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000L);
      case 84:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4100000002L);
      case 89:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 4;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400090001L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L);
      case 101:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000c4000L, active1, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L, active1, 0x400L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000L);
      case 110:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x500000000000000L, active1, 0x200002008L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000L);
      case 116:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4100000002L);
      case 121:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 4;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(7, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 4);
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000L);
      case 68:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800L);
      case 69:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 5;
         }
         break;
      case 70:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L, active1, 0x8000000L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2L);
      case 78:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x44000L, active1, 0x11400L);
      case 82:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1L);
      case 83:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000080000L, active1, 0L);
      case 84:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 5;
         }
         break;
      case 89:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 5;
         }
         break;
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000L);
      case 100:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800L);
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 5;
         }
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L, active1, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2L);
      case 110:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x44000L, active1, 0x11400L);
      case 114:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1L);
      case 115:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000080000L, active1, 0L);
      case 116:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 5;
         }
         break;
      case 121:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 5;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(7, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 5);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10400L);
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000L);
      case 69:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000800L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L, active1, 0L);
      case 84:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 6;
         }
         break;
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10400L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000L);
      case 101:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000800L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L, active1, 0L);
      case 116:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 6;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(7, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 6);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L, active1, 0L);
      case 69:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L, active1, 0x1000L);
      case 78:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800L);
      case 83:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L, active1, 0L);
      case 84:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 7;
         }
         break;
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L, active1, 0L);
      case 101:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L, active1, 0x1000L);
      case 110:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L, active1, 0L);
      case 116:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 7;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(7, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 7);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000L, active1, 0L);
      case 71:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 8;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000L, active1, 0x1000L);
      case 83:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 8;
         }
         break;
      case 84:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 8;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000L, active1, 0L);
      case 103:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 8;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000L, active1, 0x1000L);
      case 115:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 8;
         }
         break;
      case 116:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 8;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(7, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 8);
   }
   switch(curChar)
   {
      case 71:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x80000L, active1, 0L);
      case 84:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 9;
         }
         break;
      case 103:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x80000L, active1, 0L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 9;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(7, 9);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 9);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 10);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(7, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 10);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 11);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(7, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 11);
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 12);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(7, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 12);
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 13);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(7, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 13);
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 14);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(7, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 14);
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000L);
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 15);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(7, 15);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 15);
   }
   switch(curChar)
   {
      case 85:
         return jjMoveStringLiteralDfa17_0(active0, 0x80000L);
      case 117:
         return jjMoveStringLiteralDfa17_0(active0, 0x80000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 16);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(7, 16);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 16);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa18_0(active0, 0x80000L);
      case 99:
         return jjMoveStringLiteralDfa18_0(active0, 0x80000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 17);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(7, 17);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 17);
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa19_0(active0, 0x80000L);
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x80000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 18);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(7, 18);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 18);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa20_0(active0, 0x80000L);
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x80000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 19);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(7, 19);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 19);
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa21_0(active0, 0x80000L);
      case 111:
         return jjMoveStringLiteralDfa21_0(active0, 0x80000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 20);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(7, 20);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 20);
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 21;
         }
         break;
      case 110:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 21;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(7, 21);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 217;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(35);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 46)
                     jjAddStates(0, 3);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(33, 34);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(30, 31);
                  else if (curChar == 61)
                  {
                     if (kind > 40)
                        kind = 40;
                  }
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 2:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if (curChar == 42)
                     jjCheckNAddStates(4, 6);
                  break;
               case 4:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 5:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar == 47 && kind > 2)
                     kind = 2;
                  break;
               case 8:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 58 && kind > 25)
                     kind = 25;
                  break;
               case 13:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 19:
                  if (curChar == 58 && kind > 34)
                     kind = 34;
                  break;
               case 20:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 24:
                  if (curChar == 61 && kind > 39)
                     kind = 39;
                  break;
               case 25:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 61 && kind > 40)
                     kind = 40;
                  break;
               case 29:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 30:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 31:
                  if (curChar == 39 && kind > 125)
                     kind = 125;
                  break;
               case 32:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 33:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 34:
                  if (curChar == 34 && kind > 125)
                     kind = 125;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(35);
                  break;
               case 38:
                  if (curChar == 58 && kind > 22)
                     kind = 22;
                  break;
               case 39:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 47:
                  if (curChar == 58 && kind > 23)
                     kind = 23;
                  break;
               case 48:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 52:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 55:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 64:
                  if (curChar == 58 && kind > 24)
                     kind = 24;
                  break;
               case 65:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 75:
                  if (curChar == 58 && kind > 26)
                     kind = 26;
                  break;
               case 76:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 86:
                  if (curChar == 58 && kind > 27)
                     kind = 27;
                  break;
               case 87:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 91:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 94:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 106:
                  if (curChar == 58 && kind > 28)
                     kind = 28;
                  break;
               case 107:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 116:
                  if (curChar == 58 && kind > 29)
                     kind = 29;
                  break;
               case 117:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 124:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 135:
                  if (curChar == 58 && kind > 30)
                     kind = 30;
                  break;
               case 136:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 149:
                  if (curChar == 58 && kind > 31)
                     kind = 31;
                  break;
               case 150:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 156:
                  if (curChar == 58 && kind > 32)
                     kind = 32;
                  break;
               case 157:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 166:
                  if (curChar == 58 && kind > 33)
                     kind = 33;
                  break;
               case 167:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 174:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 183:
                  if (curChar == 46)
                     jjAddStates(0, 3);
                  break;
               case 184:
                  if (curChar == 46 && kind > 35)
                     kind = 35;
                  break;
               case 185:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 186:
                  if (curChar == 46 && kind > 36)
                     kind = 36;
                  break;
               case 187:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 188:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 189:
                  if (curChar == 46 && kind > 37)
                     kind = 37;
                  break;
               case 190:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 191:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if (curChar == 46 && kind > 38)
                     kind = 38;
                  break;
               case 193:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 203:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddTwoStates(203, 204);
                  break;
               case 204:
                  if ((0x400600000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 206:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddTwoStates(204, 206);
                  break;
               case 207:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 208:
                  if ((0x400600000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 210:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 211:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 213:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAddStates(13, 15);
                  break;
               case 214:
                  if ((0x400600000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 216:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAddStates(16, 18);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 99)
                        kind = 99;
                     jjCheckNAddStates(19, 23);
                  }
                  if ((0x8000000080L & l) != 0L)
                     jjAddStates(24, 25);
                  else if ((0x100000001000L & l) != 0L)
                     jjAddStates(26, 27);
                  else if ((0x1000000010000L & l) != 0L)
                     jjAddStates(28, 30);
                  else if ((0x400000004000L & l) != 0L)
                     jjAddStates(31, 33);
                  else if ((0x4000000040L & l) != 0L)
                     jjAddStates(34, 35);
                  else if ((0x1000000010L & l) != 0L)
                     jjAddStates(36, 37);
                  else if ((0x200000002L & l) != 0L)
                     jjAddStates(38, 40);
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 2:
               case 4:
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 9:
               case 10:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(10);
                  break;
               case 11:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 15:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 21:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 22:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 27:
                  if ((0x2000000020000L & l) != 0L && kind > 40)
                     kind = 40;
                  break;
               case 28:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 30:
                  jjAddStates(41, 42);
                  break;
               case 33:
                  jjAddStates(43, 44);
                  break;
               case 36:
                  if ((0x200000002L & l) != 0L)
                     jjAddStates(38, 40);
                  break;
               case 37:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 40:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 41:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 49:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 50:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 53:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 56:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 66:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 67:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if ((0x1000000010L & l) != 0L)
                     jjAddStates(36, 37);
                  break;
               case 74:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 77:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 78:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 88:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 89:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 92:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 95:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if ((0x4000000040L & l) != 0L)
                     jjAddStates(34, 35);
                  break;
               case 105:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 108:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 109:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 118:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 119:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 125:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if ((0x400000004000L & l) != 0L)
                     jjAddStates(31, 33);
                  break;
               case 134:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 137:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 138:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if ((0x2000000020L & l) != 0L && kind > 39)
                     kind = 39;
                  break;
               case 145:
                  if ((0x2000000020000L & l) != 0L && kind > 39)
                     kind = 39;
                  break;
               case 146:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(28, 30);
                  break;
               case 148:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 151:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 152:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 158:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 159:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 164:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 168:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 169:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 175:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 182:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 194:
                  if ((0x100000001000L & l) != 0L)
                     jjAddStates(26, 27);
                  break;
               case 195:
                  if ((0x10000000100000L & l) != 0L && kind > 35)
                     kind = 35;
                  break;
               case 196:
                  if ((0x2000000020000L & l) != 0L && kind > 36)
                     kind = 36;
                  break;
               case 197:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 198:
                  if ((0x8000000080L & l) != 0L)
                     jjAddStates(24, 25);
                  break;
               case 199:
                  if ((0x2000000020000L & l) != 0L && kind > 37)
                     kind = 37;
                  break;
               case 200:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 201:
                  if ((0x10000000100000L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 202:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddStates(19, 23);
                  break;
               case 203:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddTwoStates(203, 204);
                  break;
               case 205:
               case 206:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddTwoStates(204, 206);
                  break;
               case 207:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 209:
               case 210:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 212:
               case 213:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAddStates(13, 15);
                  break;
               case 215:
               case 216:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAddStates(16, 18);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 30:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(41, 42);
                  break;
               case 33:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(43, 44);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 217 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 93:
         return jjMoveStringLiteralDfa1_1(0x8L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 93:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(1, 3);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   185, 188, 191, 193, 4, 5, 6, 207, 208, 211, 208, 210, 211, 211, 213, 214, 
   211, 214, 216, 203, 204, 207, 208, 211, 200, 201, 195, 197, 154, 164, 182, 143, 
   144, 146, 114, 132, 84, 103, 45, 62, 72, 30, 31, 33, 34, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", 
"\133\133", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\55", "\53", "\52", "\57\57", "\57", null, null, 
"\45", "\100", null, "\174", null, null, null, null, null, null, "\56", "\73", 
"\55\76", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, "\76\76", "\74\74", null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, "\74", 
"\76", "\57\76", "\74\57", "\173\173", "\175\175", null, null, null, null, null, null, 
null, null, null, null, null, null, null, "\72\75", "\72", "\54", null, null, 
"\136\136\72\55\51", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_XML",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffe9L, 0xfc001fefffffffffL, 0x0L, 
};
static final long[] jjtoSkip = {
   0x6L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x10L, 0x0L, 0x0L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[217];
private final int[] jjstateSet = new int[434];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public QuiltParserTokenManager(CharStream stream){
   input_stream = stream;
}

/** Constructor. */
public QuiltParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 217; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 4)
         {
            jjmatchedKind = 4;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 3 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
            int i = matchedToken.image.length();
            matchedToken.image = image.toString().substring(0,i-2);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
