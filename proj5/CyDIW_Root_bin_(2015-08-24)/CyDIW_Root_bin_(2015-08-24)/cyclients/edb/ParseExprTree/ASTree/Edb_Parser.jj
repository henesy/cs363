/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Edb_Parser.jj */
/*@egen*/options {
	                         
	                  
}

PARSER_BEGIN(Edb_Query_Parser)

package cyclients.edb.ParseExprTree.ASTree;
public class Edb_Query_Parser/*@bgen(jjtree)*/implements Edb_Query_ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTEdb_Query_ParserState jjtree = new JJTEdb_Query_ParserState();

/*@egen*/}

PARSER_END(Edb_Query_Parser)


/***********************************************************************
 * Token definitions
 ***********************************************************************/

/* There may be tokens here which don't relate to SQL, but we needed for
   the rest of our project  */ 

SKIP:
{
    " "
  | "\n"
  | "\r"
  | "\t"
}


SKIP:
{
  <COMMENT_LINE: "--" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
}


SKIP:
{
  <COMMENT_BLOCK: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}


TOKEN:  /* Keywords */
{
    < SELECT: "select" >
  | < FROM: "from" >
  | < WHERE: "where" >
  | < AND: "and" >
  | < OR: "or" >
  | < NOT: "not" >
  | < DOT: "." >
}     

TOKEN:  /* Literals */
{
    < INTEGER_LITERAL: (["+","-"])? (["0"-"9"])+ >
  | < FLOAT_LITERAL:
        (["+","-"])?  (["0"-"9"])+ "." (["0"-"9"])+ (<EXPONENT>)?
        | (["+","-"])? "." (["0"-"9"])+ (<EXPONENT>)?
        | (["+","-"])? (["0"-"9"])+ <EXPONENT>
        | (["+","-"])? (["0"-"9"])+ (<EXPONENT>)?
    >
  | < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
  | < STRING_LITERAL: ( "'" (~["'"])* ( "''" (~["'"])* )* "'" )
                    |  ( "\"" (~["\""])* ( "\" \"" (~["\""])* )* "\"" ) >

}


TOKEN:  /* Identifiers */
{
    < Identifier: ( <LETTER> )+ ( "_" | "$" | "#" | <DIGIT> | <LETTER> )* >
  | < #LETTER: ["A"-"Z", "a"-"z"] >
  | < #DIGIT: ["0"-"9"] >
}


TOKEN:  /* Separators and operators */
{
    < COMMA: "," >
  | < LESS: "<" >
  | < LESSEQUAL: "<=" >
  | < GREATER: ">" >
  | < GREATEREQUAL: ">=" >
  | < EQUAL: "=" >
  | < NOTEQUAL: "!=" >
  | < NOTEQUAL2: "<>" >
  | < LPAREN: "(" >
  | < RPAREN: ")" >
  | < ASTERISK: "*" >
  | < SLASH: "/" >
  | < PLUS: "+" >
  | < MINUS: "-" >
  | < NOTLESSTHAN: "!<" >
  | < NOTLESSTHANEQUAL: "!<=" >
  | < NOTGREATTHAN: "!>" >
  | < NOTGREATTHANEQUAL: "!>=" >

}

/* The Top module. */
SimpleNode parse()           :
{/*@bgen(jjtree) dbQuery */
  SimpleNode jjtn000 = new SimpleNode(JJTDBQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) dbQuery */
        try {
/*@egen*/
	SFWStatement() <EOF>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/* The Root Node. */
void SFWStatement()                  :
{/*@bgen(jjtree) dbSFWStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTDBSFWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) dbSFWStatement */
        try {
/*@egen*/
	SelectClause() FromClause()  WhereClause()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/* Select Clause */
void SelectClause()                :
{/*@bgen(jjtree) dbSelectClause */
  SimpleNode jjtn000 = new SimpleNode(JJTDBSELECTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) dbSelectClause */
        try {
/*@egen*/
	<SELECT>  SelectColumnClause()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


/* Select Clause which projects only the specified Column Attributes. */
void SelectColumnClause()      :
{}
{
	ColumnClause() ( <COMMA>  ColumnClause() )*
	
}

/* Column Attribute Clause which is represented as a Table DOT Column. */
void ColumnClause()        : 
{/*@bgen(jjtree) dbAttr */
  SimpleNode jjtn000 = new SimpleNode(JJTDBATTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) dbAttr */
        try {
/*@egen*/
	TableOrAliasClause() <DOT> TableColumnVariable()
	|
	TableAllColumn()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/* Table Clause which contains either the Relation Name or an Alias of it. */
void  TableOrAliasClause()          :
{/*@bgen(jjtree) dbRelVar */
  SimpleNode jjtn000 = new SimpleNode(JJTDBRELVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) dbRelVar */
       try {
/*@egen*/
       TableAliasVariable()/*@bgen(jjtree)*/
       } catch (Throwable jjte000) {
         if (jjtc000) {
           jjtree.clearNodeScope(jjtn000);
           jjtc000 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte000 instanceof RuntimeException) {
           throw (RuntimeException)jjte000;
         }
         if (jjte000 instanceof ParseException) {
           throw (ParseException)jjte000;
         }
         throw (Error)jjte000;
       } finally {
         if (jjtc000) {
           jjtree.closeNodeScope(jjtn000, true);
         }
       }
/*@egen*/ /* | TableVariable() */
}

/* Token for the Relation Attribute. */
void TableVariable()           :
{/*@bgen(jjtree) dbRelName */
  SimpleNode jjtn000 = new SimpleNode(JJTDBRELNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) dbRelName */
        try {
/*@egen*/
	t = <Identifier>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ { jjtn000.setText(t.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


/* Token for the column Attribute. */
void TableAllColumn()            :
{/*@bgen(jjtree) dbAttrName */
  SimpleNode jjtn000 = new SimpleNode(JJTDBATTRNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) dbAttrName */
        try {
/*@egen*/
	t = <ASTERISK>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ { jjtn000.setText(t.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/* Token for the column Attribute. */
void TableColumnVariable()            :
{/*@bgen(jjtree) dbAttrName */
  SimpleNode jjtn000 = new SimpleNode(JJTDBATTRNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) dbAttrName */
        try {
/*@egen*/
	t = <Identifier>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ { jjtn000.setText(t.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/* Token for the Relation Alias Attribute.*/
void TableAliasVariable()                :
{/*@bgen(jjtree) dbRelAliasName */
  SimpleNode jjtn000 = new SimpleNode(JJTDBRELALIASNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) dbRelAliasName */
        try {
/*@egen*/
	t = <Identifier>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ { jjtn000.setText(t.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/* From Clause represented as either a single or a join of two tables. */
void FromClause()              :
{/*@bgen(jjtree) dbFromClause */
  SimpleNode jjtn000 = new SimpleNode(JJTDBFROMCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) dbFromClause */
        try {
/*@egen*/
	<FROM> TableClause() ( <COMMA> TableClause() )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/* Relation Clause which contains the Relation Name and its optional Alias Name.*/
void  TableClause()          :
{/*@bgen(jjtree) dbRelVar */
  SimpleNode jjtn000 = new SimpleNode(JJTDBRELVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) dbRelVar */
       try {
/*@egen*/
       TableVariable() ( TableAliasVariable() )?/*@bgen(jjtree)*/
       } catch (Throwable jjte000) {
         if (jjtc000) {
           jjtree.clearNodeScope(jjtn000);
           jjtc000 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte000 instanceof RuntimeException) {
           throw (RuntimeException)jjte000;
         }
         if (jjte000 instanceof ParseException) {
           throw (ParseException)jjte000;
         }
         throw (Error)jjte000;
       } finally {
         if (jjtc000) {
           jjtree.closeNodeScope(jjtn000, true);
         }
       }
/*@egen*/
}

/* Where Clause containing a conjunction of conditions. */
void  WhereClause()               :
{/*@bgen(jjtree) dbWhereClause */
  SimpleNode jjtn000 = new SimpleNode(JJTDBWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) dbWhereClause */
       try {
/*@egen*/
       <WHERE> BooleanExpression()/*@bgen(jjtree)*/
       } catch (Throwable jjte000) {
         if (jjtc000) {
           jjtree.clearNodeScope(jjtn000);
           jjtc000 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte000 instanceof RuntimeException) {
           throw (RuntimeException)jjte000;
         }
         if (jjte000 instanceof ParseException) {
           throw (ParseException)jjte000;
         }
         throw (Error)jjte000;
       } finally {
         if (jjtc000) {
           jjtree.closeNodeScope(jjtn000, true);
         }
       }
/*@egen*/
}

/* Boolean Exxpression representing a single condition.*/
void BooleanExpression()                :
{/*@bgen(jjtree) BooleanFactor */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLEANFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BooleanFactor */
         try {
/*@egen*/
	 Element()
	 |
	 ( ColumnClause() | Element() ) ComparisonOperator() ( ColumnClause() | Element() )
	 |
	 NotNode() <LPAREN> BooleanExpression() <RPAREN>
	 | 
	 <LPAREN> BooleanExpression() ( AndNode() | OrNode() ) BooleanExpression() <RPAREN>/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
	 

}

void NotNode()      :
{/*@bgen(jjtree) NOT */
  SimpleNode jjtn000 = new SimpleNode(JJTNOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NOT */
         try {
/*@egen*/
	 <NOT>/*@bgen(jjtree)*/
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void AndNode()      :
{/*@bgen(jjtree) AND */
  SimpleNode jjtn000 = new SimpleNode(JJTAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AND */
         try {
/*@egen*/
	 <AND>/*@bgen(jjtree)*/
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void OrNode()     :
{/*@bgen(jjtree) OR */
  SimpleNode jjtn000 = new SimpleNode(JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OR */
         try {
/*@egen*/
	 <OR>/*@bgen(jjtree)*/
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

/* Token for the Comparison Operator. */
void ComparisonOperator()              :
{/*@bgen(jjtree) comparisonOp */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPARISONOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) comparisonOp */
         try {
/*@egen*/
         t = <LESS>/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/           		{ jjtn000.setText(t.image); }
       | t = <LESSEQUAL>/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/      		{ jjtn000.setText(t.image); }
       | t = <GREATER>/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/        		{ jjtn000.setText(t.image); }  
       | t = <GREATEREQUAL>/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/   		{ jjtn000.setText(t.image); }
       | t = <EQUAL>/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/          		{ jjtn000.setText(t.image); }
       | t = <NOTEQUAL>/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/       		{ jjtn000.setText(t.image); }
       | t = <NOTEQUAL2>/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/      		{ jjtn000.setText(t.image); }
       | t = <NOTLESSTHAN>/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/      	{ jjtn000.setText(t.image); }
       | t = <NOTLESSTHANEQUAL>/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/     { jjtn000.setText(t.image); }
       | t = <NOTGREATTHAN>/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/      	{ jjtn000.setText(t.image); }
       | t = <NOTGREATTHANEQUAL>/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/    { jjtn000.setText(t.image); }/*@bgen(jjtree)*/
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
       
}

/* Token for a Constant. */
void Element()              :
{/*@bgen(jjtree) dbConstValue */
  SimpleNode jjtn000 = new SimpleNode(JJTDBCONSTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) dbConstValue */
                try {
/*@egen*/
		IntegerLiteral()
	| 	FloatLiteral()
    |	StringLiteral()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/ 
}

/* Token for an Integer Literal. */
void IntegerLiteral()                 :
{/*@bgen(jjtree) INTEGERLITERAL */
 SimpleNode jjtn000 = new SimpleNode(JJTINTEGERLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) INTEGERLITERAL */
        try {
/*@egen*/
	t = <INTEGER_LITERAL>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {jjtn000.setText(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/* Token for a float Literal. */
void FloatLiteral()               :
{/*@bgen(jjtree) FLOATLITERAL */
 SimpleNode jjtn000 = new SimpleNode(JJTFLOATLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) FLOATLITERAL */
        try {
/*@egen*/
	t = <FLOAT_LITERAL>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {jjtn000.setText(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/* Token for a String Literal. */
void StringLiteral()                :
{/*@bgen(jjtree) STRINGLITERAL */
 SimpleNode jjtn000 = new SimpleNode(JJTSTRINGLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) STRINGLITERAL */
        try {
/*@egen*/
	t = <STRING_LITERAL>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ {jjtn000.setText(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

