/* Generated By:JavaCC: Do not edit this line. QuiltParserConstants.java */
package cycsx.csxqueryengine.quiltcsx;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface QuiltParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int XML_END = 3;
  /** RegularExpression Id. */
  int LPAREN = 5;
  /** RegularExpression Id. */
  int RPAREN = 6;
  /** RegularExpression Id. */
  int LBRACE = 7;
  /** RegularExpression Id. */
  int RBRACE = 8;
  /** RegularExpression Id. */
  int LBRACKET = 9;
  /** RegularExpression Id. */
  int RBRACKET = 10;
  /** RegularExpression Id. */
  int XML_START = 11;
  /** RegularExpression Id. */
  int VARNAME = 12;
  /** RegularExpression Id. */
  int NODE = 13;
  /** RegularExpression Id. */
  int ELEMENT_NODE_TOK = 14;
  /** RegularExpression Id. */
  int TEXT_NODE_TOK = 15;
  /** RegularExpression Id. */
  int PAGEID_NODE_TOK = 16;
  /** RegularExpression Id. */
  int PAGEOFFSET_NODE_TOK = 17;
  /** RegularExpression Id. */
  int COMMENT_NODE_TOK = 18;
  /** RegularExpression Id. */
  int PROCESS_NODE = 19;
  /** RegularExpression Id. */
  int TRUE = 20;
  /** RegularExpression Id. */
  int FALSE = 21;
  /** RegularExpression Id. */
  int ANCESTOR = 22;
  /** RegularExpression Id. */
  int ANCESTOR_SELF = 23;
  /** RegularExpression Id. */
  int ATTRIBUTE = 24;
  /** RegularExpression Id. */
  int CHILD = 25;
  /** RegularExpression Id. */
  int DESCENDANT = 26;
  /** RegularExpression Id. */
  int DESCENDANT_SELF = 27;
  /** RegularExpression Id. */
  int FOLLOWING = 28;
  /** RegularExpression Id. */
  int FOLLOWING_SIBLING = 29;
  /** RegularExpression Id. */
  int NAMESPACE = 30;
  /** RegularExpression Id. */
  int PARENT = 31;
  /** RegularExpression Id. */
  int PRECEDING = 32;
  /** RegularExpression Id. */
  int PRECEDING_SIBLING = 33;
  /** RegularExpression Id. */
  int SELF = 34;
  /** RegularExpression Id. */
  int LTHAN = 35;
  /** RegularExpression Id. */
  int LEQUAL = 36;
  /** RegularExpression Id. */
  int GEQUAL = 37;
  /** RegularExpression Id. */
  int GTHAN = 38;
  /** RegularExpression Id. */
  int NEQUAL = 39;
  /** RegularExpression Id. */
  int EQUAL = 40;
  /** RegularExpression Id. */
  int NOT = 41;
  /** RegularExpression Id. */
  int OR = 42;
  /** RegularExpression Id. */
  int AND = 43;
  /** RegularExpression Id. */
  int MINUS = 44;
  /** RegularExpression Id. */
  int PLUS = 45;
  /** RegularExpression Id. */
  int STAR = 46;
  /** RegularExpression Id. */
  int SLASH2 = 47;
  /** RegularExpression Id. */
  int SLASH = 48;
  /** RegularExpression Id. */
  int MULT = 49;
  /** RegularExpression Id. */
  int DIV = 50;
  /** RegularExpression Id. */
  int MOD = 51;
  /** RegularExpression Id. */
  int AT = 52;
  /** RegularExpression Id. */
  int ATALPHA = 53;
  /** RegularExpression Id. */
  int PIPE = 54;
  /** RegularExpression Id. */
  int UNION = 55;
  /** RegularExpression Id. */
  int BEFORE = 56;
  /** RegularExpression Id. */
  int AFTER = 57;
  /** RegularExpression Id. */
  int INTERSECT = 58;
  /** RegularExpression Id. */
  int EXCEPT = 59;
  /** RegularExpression Id. */
  int FILTER = 60;
  /** RegularExpression Id. */
  int DOT = 61;
  /** RegularExpression Id. */
  int SEMICOLON = 62;
  /** RegularExpression Id. */
  int ARROW = 63;
  /** RegularExpression Id. */
  int DECLARE = 64;
  /** RegularExpression Id. */
  int FUNCTION = 65;
  /** RegularExpression Id. */
  int WHERE = 66;
  /** RegularExpression Id. */
  int RETURN = 67;
  /** RegularExpression Id. */
  int SORTBY = 68;
  /** RegularExpression Id. */
  int ORDER = 69;
  /** RegularExpression Id. */
  int BY = 70;
  /** RegularExpression Id. */
  int FOR = 71;
  /** RegularExpression Id. */
  int LET = 72;
  /** RegularExpression Id. */
  int IN = 73;
  /** RegularExpression Id. */
  int DISTINCT = 74;
  /** RegularExpression Id. */
  int ASC = 75;
  /** RegularExpression Id. */
  int DESC = 76;
  /** RegularExpression Id. */
  int IMPORT = 77;
  /** RegularExpression Id. */
  int AS = 78;
  /** RegularExpression Id. */
  int STABLE = 79;
  /** RegularExpression Id. */
  int INSTANCE = 80;
  /** RegularExpression Id. */
  int OF = 81;
  /** RegularExpression Id. */
  int TREAT = 82;
  /** RegularExpression Id. */
  int CASTABLE = 83;
  /** RegularExpression Id. */
  int CAST = 84;
  /** RegularExpression Id. */
  int TO = 85;
  /** RegularExpression Id. */
  int IS = 86;
  /** RegularExpression Id. */
  int CIN = 87;
  /** RegularExpression Id. */
  int COUT = 88;
  /** RegularExpression Id. */
  int SOME_TOK = 89;
  /** RegularExpression Id. */
  int EVERY_TOK = 90;
  /** RegularExpression Id. */
  int SATISFIES = 91;
  /** RegularExpression Id. */
  int IF = 92;
  /** RegularExpression Id. */
  int THEN = 93;
  /** RegularExpression Id. */
  int ELSE = 94;
  /** RegularExpression Id. */
  int RENAME = 95;
  /** RegularExpression Id. */
  int DELETE = 96;
  /** RegularExpression Id. */
  int INSERT = 97;
  /** RegularExpression Id. */
  int REPLACE = 98;
  /** RegularExpression Id. */
  int NAME = 99;
  /** RegularExpression Id. */
  int NAME2 = 100;
  /** RegularExpression Id. */
  int CLASSNAME = 101;
  /** RegularExpression Id. */
  int EXISTS = 102;
  /** RegularExpression Id. */
  int TAG1 = 103;
  /** RegularExpression Id. */
  int TAG2 = 104;
  /** RegularExpression Id. */
  int TAG3 = 105;
  /** RegularExpression Id. */
  int TAG4 = 106;
  /** RegularExpression Id. */
  int DLBRACE = 107;
  /** RegularExpression Id. */
  int DRBRACE = 108;
  /** RegularExpression Id. */
  int SQUOTE = 109;
  /** RegularExpression Id. */
  int DQUOTE = 110;
  /** RegularExpression Id. */
  int DCOLON = 111;
  /** RegularExpression Id. */
  int SPACE = 112;
  /** RegularExpression Id. */
  int ALPHA = 113;
  /** RegularExpression Id. */
  int NUM = 114;
  /** RegularExpression Id. */
  int ALPHANUM = 115;
  /** RegularExpression Id. */
  int URL = 116;
  /** RegularExpression Id. */
  int Letter = 117;
  /** RegularExpression Id. */
  int Name = 118;
  /** RegularExpression Id. */
  int MiscName = 119;
  /** RegularExpression Id. */
  int NameChar = 120;
  /** RegularExpression Id. */
  int Digit = 121;
  /** RegularExpression Id. */
  int DEF = 122;
  /** RegularExpression Id. */
  int COLON = 123;
  /** RegularExpression Id. */
  int COMMA = 124;
  /** RegularExpression Id. */
  int STRING = 125;
  /** RegularExpression Id. */
  int NUMBER = 126;
  /** RegularExpression Id. */
  int FINITO = 127;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_XML = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "<token of kind 2>",
    "\"]]\"",
    "<token of kind 4>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"[[\"",
    "<VARNAME>",
    "\"node\"",
    "\"element\"",
    "\"text\"",
    "\"pageid\"",
    "\"pageoffset\"",
    "\"comment\"",
    "\"processing-instruction\"",
    "\"true\"",
    "\"false\"",
    "<ANCESTOR>",
    "<ANCESTOR_SELF>",
    "<ATTRIBUTE>",
    "<CHILD>",
    "<DESCENDANT>",
    "<DESCENDANT_SELF>",
    "<FOLLOWING>",
    "<FOLLOWING_SIBLING>",
    "<NAMESPACE>",
    "<PARENT>",
    "<PRECEDING>",
    "<PRECEDING_SIBLING>",
    "<SELF>",
    "<LTHAN>",
    "<LEQUAL>",
    "<GEQUAL>",
    "<GTHAN>",
    "<NEQUAL>",
    "<EQUAL>",
    "\"not\"",
    "\"or\"",
    "\"and\"",
    "\"-\"",
    "\"+\"",
    "\"*\"",
    "\"//\"",
    "\"/\"",
    "\"x\"",
    "\"div\"",
    "\"%\"",
    "\"@\"",
    "\"at\"",
    "\"|\"",
    "\"UNION\"",
    "\"BEFORE\"",
    "\"AFTER\"",
    "\"INTERSECT\"",
    "\"EXCEPT\"",
    "\"filter\"",
    "\".\"",
    "\";\"",
    "\"->\"",
    "\"declare\"",
    "\"function\"",
    "\"where\"",
    "\"return\"",
    "\"sortby\"",
    "\"order\"",
    "\"by\"",
    "\"for\"",
    "\"let\"",
    "\"in\"",
    "\"distinct\"",
    "\"ascending\"",
    "\"descending\"",
    "\"import\"",
    "\"as\"",
    "\"stable\"",
    "\"instance\"",
    "\"of\"",
    "\"treat\"",
    "\"castable\"",
    "\"cast\"",
    "\"to\"",
    "\"is\"",
    "\">>\"",
    "\"<<\"",
    "\"some\"",
    "\"every\"",
    "\"satisfies\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"rename\"",
    "\"delete\"",
    "\"insert\"",
    "\"replace\"",
    "<NAME>",
    "<NAME2>",
    "<CLASSNAME>",
    "\"exists\"",
    "\"<\"",
    "\">\"",
    "\"/>\"",
    "\"</\"",
    "\"{{\"",
    "\"}}\"",
    "\"\\\'\"",
    "\"\\\"\"",
    "\"::\"",
    "<SPACE>",
    "<ALPHA>",
    "<NUM>",
    "<ALPHANUM>",
    "<URL>",
    "<Letter>",
    "<Name>",
    "<MiscName>",
    "<NameChar>",
    "<Digit>",
    "\":=\"",
    "\":\"",
    "\",\"",
    "<STRING>",
    "<NUMBER>",
    "\"^^:-)\"",
  };

}
