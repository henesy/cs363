/* Generated By:JavaCC: Do not edit this line. GUIparser.java */
package cysystem.diwGUI.parser;

import java.io.BufferedInputStream;
import java.io.StringReader;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.*;

import cysystem.diwGUI.gui.*;
//import sql.SQLParser;

import storagemanager.*;
import cycsx.csxpagination.util.*;
import cysystem.diwGUI.gui.treeViewerMgr.TreeViewer.HybridView;
//import nc94.commandparser.NC94Parser;
//import btree.btreeparser.BTreeParser;
//import tdb.commandparser.TdbParser;
//import cs562projects.*;

public class GUIparser implements GUIparserConstants {
        private static GUIparser tmpparser;
        private static GUIparser tmp2parser;
        private static DBGui mnCanvas;
        private static String[] filelist;
        private static Hashtable<String, Integer> htIntList;
        private static Hashtable<String, String> htStringList;
        private static Hashtable<String, String[]> htStringArrayList;
        private static Hashtable<String, Integer> htStringArrayIndex;
        private static Hashtable<String, int[]> htIntArrayList;
        private static Hashtable<String, Integer> htIntArrayIndex;
        private static String[] loglist;
        private static int logcount, intcount, stringcount, error, forlogon, parent;
        private static String forlogname;

        public static StorageManagerParser csxParser;

        static {
                logcount = 0;
                intcount = 0;
                stringcount = 0;
                loglist = new String[50];
                parent = 0;

                htIntList = new Hashtable<String, Integer>();
                htStringList = new Hashtable<String, String>();
                htStringArrayList = new Hashtable<String, String[]>();
                htStringArrayIndex = new Hashtable<String, Integer>();
                htIntArrayList = new Hashtable<String, int[]>();
                htIntArrayIndex = new Hashtable<String, Integer>();
        }

    // Modified by xiaofeng wang 
                public GUIparser(StringReader stream, DBGui mf, StorageUtils utils, CanStoreXUtil cUtil) {
                this(stream);
                mnCanvas = mf;
                csxParser = new StorageManagerParser(mf, utils, cUtil);
                mnCanvas.addConsoleMessage("GUI Parser Version 1.0 launched");
                mnCanvas.setOutputPaneType("text/html");
        }

        public void setGUIFrame(DBGui mf) {
                mnCanvas = mf;
                mnCanvas.addConsoleMessage("GUI Parser Version 1.0 launched");
        }

        public void errormsg(String str) {
                mnCanvas.addConsoleMessage("\u005cnError : "+str+"\u005cn");
                mnCanvas.addConsoleMessage("--------Parsing is forced to stop--------");
        }

        public void createLogFile(String roottag, String fname) {
                File fl = new File(mnCanvas.clientsmgr.getCydiwWorkspace() + fname);
                try {
                        fl.createNewFile();
                } catch (IOException e1) {
                        e1.printStackTrace();
                }
                try {
                        FileWriter fWriter = new FileWriter(fl);
                        fWriter.write(roottag);
                        fWriter.append("#</"+roottag.substring(1));
                        fWriter.flush();
                        fWriter.close();
                } catch (IOException e) {
                        e.printStackTrace();
                }
        }

        public void updateLogFile(String tag, String content, String fname) {
                try {
                        System.out.println("Tag: " + tag + ": " + content + ": " + fname);
                        FileInputStream fis = new FileInputStream(mnCanvas.clientsmgr.getCydiwWorkspace() + fname);
                        int x= fis.available();
                        byte b[]= new byte[x];
                        fis.read(b);
                        String fileContent = new String(b);

                        String[] lines = fileContent.split("#");

                        File fl = new File(mnCanvas.clientsmgr.getCydiwWorkspace() + fname);
                        FileWriter fWriter = new FileWriter(fl);
                        fWriter.write(lines[0] );
                        fWriter.append(tag + content + "</"+tag.substring(1));
                        int i;
                        for (i=1; i<lines.length; i++)
                                fWriter.append("#"+lines[i]);
                        fWriter.flush();
                        fWriter.close();
                } catch (IOException e) {
                        e.printStackTrace();
                }
        }

        // add the tag and "#" for forLoopLog in the log file
        public void startConditionLog(String tag, String fname) {
                try {
                        FileInputStream fis = new FileInputStream(mnCanvas.clientsmgr.getCydiwWorkspace() + fname);
                        int x= fis.available();
                        byte b[]= new byte[x];
                        fis.read(b);
                        String content = new String(b);

                        String[] lines = content.split("#");

                        File fl = new File(mnCanvas.clientsmgr.getCydiwWorkspace() + fname);
                        FileWriter fWriter = new FileWriter(fl);
                        fWriter.write(lines[0] );
                        fWriter.append(tag+"#</"+tag.substring(1));
                        int i;
                        for (i=1; i<lines.length; i++)
                                fWriter.append("#"+lines[i]);
                        fWriter.flush();
                        fWriter.close();
                } catch (IOException e) {
                        e.printStackTrace();
                }
        }

        /**
	 * add the tag, control variable value and "#" for forLoopLog in the log file
	 * Note: controlVar has to be an integer
	 */
        public void startForLog(String tag, int controlVar, String fname) {
                try {
                        FileInputStream fis = new FileInputStream(mnCanvas.clientsmgr.getCydiwWorkspace() + fname);
                        int x= fis.available();
                        byte b[]= new byte[x];
                        fis.read(b);
                        String content = new String(b);

                        String[] lines = content.split("#");

                        File fl = new File(mnCanvas.clientsmgr.getCydiwWorkspace() + fname);
                        FileWriter fWriter = new FileWriter(fl);
                        fWriter.write(lines[0]);
                        String startingTag = replaceVariableInString(tag);
                        //String startingTag = tag.substring(0, tag.length()-1) + " ControlVariable=\"" + controlVar + "\">";

                        if (tag.contains(" "))
                                fWriter.append(startingTag + "#</" + tag.substring(1, tag.indexOf(" ")) + ">");
                        else
                                fWriter.append(startingTag + "#</" + tag.substring(1));

                        int i;
                        for (i=1; i<lines.length; i++)
                                fWriter.append("#"+lines[i]);
                        fWriter.flush();
                        fWriter.close();
                } catch (IOException e) {
                        e.printStackTrace();
                }
        }

        // remove the ending # for forLoopLog from the log file
        public void endForLog(String fname) {
                try {
                        FileInputStream fis = new FileInputStream(mnCanvas.clientsmgr.getCydiwWorkspace() + fname);
                        int x= fis.available();
                        byte b[]= new byte[x];
                        fis.read(b);
                        String content = new String(b);

                        String[] lines = content.split("#");

                        File fl = new File(mnCanvas.clientsmgr.getCydiwWorkspace() + fname);
                        FileWriter fWriter = new FileWriter(fl);

                        // remove the first # between lines[0] and lines[1]
                        if (lines.length >= 2)
                                fWriter.write(lines[0] + lines[1]);
                        else
                                fWriter.write(lines[0]);

                        int i;
                        if (lines.length > 2)
                                for (i=2; i<lines.length; i++)
                                        fWriter.append("#"+lines[i]);
                        fWriter.flush();
                        fWriter.close();
                } catch (IOException e) {
                        e.printStackTrace();
                }
        }

        public void foreachsend(String s1, String s2) {
                int tt = 0;
                //System.out.println("s1: " + s1 + "    s2: " + s2);
                String[] lineControl = s1.split(":");
                String strControlVar = lineControl[0];

                String[] lines = null;
                int len;
                int startIndex = 0;
                int endIndex;

                // there are two types of loop head :(3,6) or :3,4,5,6 loopEnumOn is used to identify the type of loophead
                boolean loopEnumOn = true;

                String forLoopLog = null;
                if (lineControl.length > 2)
                        forLoopLog = lineControl[2];

                if (lineControl[1].trim().startsWith("(") && lineControl[1].trim().endsWith(")") ) {
                        loopEnumOn = false;
                        String loopCondition = lineControl[1].trim();
                        startIndex = Integer.parseInt( loopCondition.substring(1, loopCondition.indexOf(",") ).trim() );
                        endIndex = Integer.parseInt( loopCondition.substring(loopCondition.indexOf(",")+1, loopCondition.length()-1 ).trim() );
                        if (endIndex < startIndex) {
                                System.out.println("Error: The ending index must be no less than the starting index in the \u005c"foreach\u005c" loop condition.");
                                mnCanvas.addConsoleMessage("Error: The ending index must be no less than the starting index in the \u005c"foreach\u005c" loop condition.");
                                return;
                        }
                        len = endIndex - startIndex + 1;
                } else {
                        loopEnumOn = true;
                        lines = lineControl[1].split(",");
                        len = lines.length;
                }


                int i;
                for (i=0; i<len; i++) {
                        //set the value of the control variable
                        int currentControlValue;
                        if (loopEnumOn) {
                                currentControlValue = Integer.parseInt(lines[i]);
                                htIntList.put(strControlVar, currentControlValue);
                        }
                        else {
                                currentControlValue = startIndex++;
                                htIntList.put(strControlVar, currentControlValue);
                        }

                        // insert forloop tags and # in the log file
                        if (forLoopLog != null) {
                                String[] tags = forLoopLog.split(",");
                                if (tags.length >= 2) {
                                        startForLog(tags[0], currentControlValue, tags[1]);
                                }
                        }

                        tmpparser = new GUIparser(new StringReader(s2));

                        try {
                                tmpparser.ProductionRules();

                                //System.out.println("GUI Parser Version 1.0:  GUI program parsed successfully.");
                                //System.out.println("****************************************");
                        }
                         catch (ParseException e1) {
                                System.out.println(e1.getMessage());
                                System.out.println("GUI Parser Version 1.0:  Encountered errors during parse.");
                        }

                        // remove the ending # from the log file
                        if (forLoopLog != null) {
                                String[] tags = forLoopLog.split(",");
                                if (tags.length >= 2) {
                                        endForLog(tags[1]);
                                }
                        }
                }
        }

        public void conditionsend(String s) {
                // format: if(true|false)::log>> TAG,FILE::Blockstmt()::else::log>> TAG,FILE::Blockstmt()
                String[] lineControl = s.split("::");
                String ifHead = null, ifLog = null, ifBody = null, elseHead = null, elseLog = null, elseBody = null;

                // get ifHead, ifBody, elseHead, elseBody
                if (lineControl.length >= 2) {
                        ifHead = lineControl[0].trim();
                        if (!ifHead.startsWith("if")) {
                                System.out.println("Error: The format of the \u005c"if/else\u005c" statement is incorrect.");
                                mnCanvas.addConsoleMessage("Error: The format of the \u005c"if/else\u005c" statement is incorrect.");
                                return;
                        }

                        int ifEnd = 0;
                        if (lineControl[1].trim().startsWith("log>>")) {
                                if (lineControl.length < 3) {
                                        System.out.println("Error: The format of the \u005c"if/else\u005c" statement is incorrect.");
                                        mnCanvas.addConsoleMessage("Error: The format of the \u005c"if/else\u005c" statement is incorrect.");
                                        return;
                                }
                                ifLog = lineControl[1].substring(5).trim();
                                ifBody = lineControl[2].trim();
                                ifEnd = 2;
                        } else {
                                ifBody = lineControl[1];
                                ifEnd = 1;
                        }

                        if (lineControl.length > ifEnd + 2) {
                                elseHead = lineControl[ifEnd+1].trim();
                                if (!elseHead.startsWith("else")) {
                                        System.out.println("Error: The format of the \u005c"if/else\u005c" statement is incorrect.");
                                        mnCanvas.addConsoleMessage("Error: The format of the \u005c"if/else\u005c" statement is incorrect.");
                                        return;
                                }

                                if (lineControl[ifEnd+2].trim().startsWith("log>>")) {
                                        if (lineControl.length < ifEnd + 4) {
                                                System.out.println("Error: The format of the \u005c"if/else\u005c" statement is incorrect.");
                                                mnCanvas.addConsoleMessage("Error: The format of the \u005c"if/else\u005c" statement is incorrect.");
                                                return;
                                        }
                                        elseLog = lineControl[ifEnd+2].substring(5).trim();
                                        elseBody = lineControl[ifEnd+3].trim();
                                } else {
                                        elseBody = lineControl[ifEnd+2];
                                }
                        }
                } else {
                        System.out.println("Error: The format of the \u005c"if/else\u005c" statement is incorrect.");
                        mnCanvas.addConsoleMessage("Error: The format of the \u005c"if/else\u005c" statement is incorrect.");
                        return;
                }

                // if both ifHead and elseHead are not null
                if (elseHead != null) {
                        // evaluate the ifHead
                        ifHead = ifHead.substring(2);
                        if (ifHead.equalsIgnoreCase("(true)") || ifHead.equalsIgnoreCase("(1)")) {
                                // update the log file
                                if (ifLog != null) {
                                        String[] tags = ifLog.split(",");
                                        if (tags.length >= 2) {
                                                startConditionLog(tags[0], tags[1]);
                                        }
                                }

                                // execute ifBody
                                tmpparser = new GUIparser(new StringReader(ifBody));
                                try {
                                        tmpparser.ProductionRules();
                                }
                                 catch (ParseException e1) {
                                        System.out.println(e1.getMessage());
                                        System.out.println("GUI Parser Version 1.0:  Encountered errors during parse.");
                                }

                                // remove the ending # from the log file
                                if (ifLog != null) {
                                        String[] tags = ifLog.split(",");
                                        if (tags.length >= 2) {
                                                endForLog(tags[1]);
                                        }
                                }
                        } else {
                                // update the log file
                                if (ifLog != null) {
                                        String[] tags = ifLog.split(",");
                                        if (tags.length >= 2) {
                                                startConditionLog(tags[0], tags[1]);
                                        }
                                }

                                // execute ifBody
                                tmpparser = new GUIparser(new StringReader(elseBody));
                                try {
                                        tmpparser.ProductionRules();
                                }
                                 catch (ParseException e1) {
                                        System.out.println(e1.getMessage());
                                        System.out.println("GUI Parser Version 1.0:  Encountered errors during parse.");
                                }

                                // remove the ending # from the log file
                                if (ifLog != null) {
                                        String[] tags = ifLog.split(",");
                                        if (tags.length >= 2) {
                                                endForLog(tags[1]);
                                        }
                                }
                        }
                }
                // if only if block exists
                else {
                        // evaluate the ifHead
                        ifHead = ifHead.substring(2);
                        if (ifHead.equalsIgnoreCase("(true)") || ifHead.equalsIgnoreCase("(1)")) {
                                // update the log file
                                if (ifLog != null) {
                                        String[] tags = ifLog.split(",");
                                        if (tags.length >= 2) {
                                                startConditionLog(tags[0], tags[1]);
                                        }
                                }

                                // execute ifBody
                                tmpparser = new GUIparser(new StringReader(ifBody));
                                try {
                                        tmpparser.ProductionRules();
                                }
                                 catch (ParseException e1) {
                                        System.out.println(e1.getMessage());
                                        System.out.println("GUI Parser Version 1.0:  Encountered errors during parse.");
                                }

                                // remove the ending # from the log file
                                if (ifLog != null) {
                                        String[] tags = ifLog.split(",");
                                        if (tags.length >= 2) {
                                                endForLog(tags[1]);
                                        }
                                }
                        } else
                                return;
                }

        }

        public void listVariables() {
                int i;
                Enumeration e;
                mnCanvas.addOutputPlainText("------------Variables List------------");
                if (logcount>0)
                        mnCanvas.addOutputPlainText("Log files:");
                for (i=0; i<logcount; i++) {
                        mnCanvas.addOutputPlainText("\u005ct"+loglist[i]);
                }

                e = htIntList.keys();
                if (e.hasMoreElements())
                        mnCanvas.addOutputPlainText("Integer variables:");
                while( e.hasMoreElements() ){
                        String curKey = e.nextElement().toString();
                        mnCanvas.addOutputPlainText("\u005ct" + curKey + " = " + htIntList.get(curKey).toString());
                }

                e = htIntArrayList.keys();
                if (e.hasMoreElements())
                        mnCanvas.addOutputPlainText("Integer Array variables:");
                while( e.hasMoreElements() ){
                        String curKey = e.nextElement().toString();
                        int iSizeArray = htIntArrayIndex.get(curKey);
                        mnCanvas.addOutputPlainText("\u005ctsize of " + curKey + " = " + iSizeArray);
                        for (i=0; i<iSizeArray; i++)
                                mnCanvas.addOutputPlainText("\u005ct" + curKey + "[" + i + "]" + " = " + (htIntArrayList.get(curKey))[i]);
                }

                e = htStringList.keys();
                if (e.hasMoreElements())
                        mnCanvas.addOutputPlainText("String variables:");
                while( e.hasMoreElements() ){
                        String curKey = e.nextElement().toString();
                        mnCanvas.addOutputPlainText("\u005ct" + curKey + " = " + htStringList.get(curKey));
                }

                e = htStringArrayList.keys();
                if (e.hasMoreElements())
                        mnCanvas.addOutputPlainText("String Array variables:");
                while( e.hasMoreElements() ){
                        String curKey = e.nextElement().toString();
                        int iSizeArray = htStringArrayIndex.get(curKey);
                        mnCanvas.addOutputPlainText("\u005ctsize of " + curKey + " = " + iSizeArray);
                        for (i=0; i<iSizeArray; i++)
                                mnCanvas.addOutputPlainText("\u005ct" + curKey + "[" + i + "]" + " = " + (htStringArrayList.get(curKey))[i]);
                }

                mnCanvas.addOutputPlainText("\u005cn");
        }

        public void clearLogs() {
                logcount = 0;
                loglist = new String[50];
        }

        public void clearVariables() {
                intcount = 0;
                stringcount = 0;

                htIntList.clear();
                htIntArrayList.clear();
                htIntArrayIndex.clear();
                htStringList.clear();
                htStringArrayList.clear();
                htStringArrayIndex.clear();
        }

        public void listCommands() {
                mnCanvas.addOutputPlainText("$CyDB Commands List:");
                mnCanvas.addOutputPlainText("$CyDB:> list commands;");
                mnCanvas.addOutputPlainText("$CyDB:> list variables;");
                mnCanvas.addOutputPlainText("$CyDB:> declare <int/string/int[]/string[] Type> <Variable> [:= <AssigningValues>];");
                mnCanvas.addOutputPlainText("$CyDB:> undeclare <int/string/int[]/string[] Type> <Variable>;");
                mnCanvas.addOutputPlainText("$CyDB:> set <Variable> := <AssigningValues>;");
                mnCanvas.addOutputPlainText("$CyDB:> execute <Variable>;");
                mnCanvas.addOutputPlainText("$CyDB:> foreach <Variable> in (<ExpressionsList>) [log <custom/time> >> <RootTag> <XMLFileName>] { <CommandsList> }");
                mnCanvas.addOutputPlainText("$CyDB:> createlog <RootTag> <XMLFileName>;");
                mnCanvas.addOutputPlainText("$CyDB:> plotSWF <XMLFileName>;");
                mnCanvas.addOutputPlainText("$CyDB:> displayfile <XML/TXT FileName>;");
                mnCanvas.addOutputPlainText("$CyDB:> displayPDF <PDF FileName>");
                mnCanvas.addOutputPlainText("$CyDB:> displayXML <XML FileName>");
                mnCanvas.addOutputPlainText("$CyDB:> displayTXT <txt FileName>");
                mnCanvas.addOutputPlainText("$CyDB:> createfile <XML/BXML/CXML FileName> <FileSize>;");
                mnCanvas.addOutputPlainText("$CyDB:> copyfile <XML/BXML/CXML FileName> <XML/BXML/CXML FileName>;");
                mnCanvas.addOutputPlainText("$CyDB:> deletefile <XML/BXML/CXML FileName>;");
                //mnCanvas.addOutputPlainText("$CyDB:> createRawStorage <StorageConfigXMLFile>;");
        //	mnCanvas.addOutputPlainText("$CyDB:> useStorage <StorageConfigXMLFile>;");
                mnCanvas.addOutputPlainText("$CyDB:> createStorage <StorageConfigXMLFile>;");
                mnCanvas.addOutputPlainText("$CyDB:> loadStorage <StorageConfigXMLFile>;");
                //mnCanvas.addOutputPlainText("$CyDB:> formatStorage <PageSize>;");
                mnCanvas.addOutputPlainText("$CyDB:> ReformatStorage <StorageConfigXMLFile> <PageSize>;");
                mnCanvas.addOutputPlainText("$CyDB:> startBufferManager <BufferPoolSize>;");
                mnCanvas.addOutputPlainText("$CyDB:> showdirectory;");
                mnCanvas.addOutputPlainText("$CyDB:> writeBitMap;");
                mnCanvas.addOutputPlainText("$CyDB:> getPageAllocatedCount;");
                mnCanvas.addOutputPlainText("$CyDB:> getPageDeallocatedCount;");
                mnCanvas.addOutputPlainText("$CyDB:> getPageRequestCount;");
                mnCanvas.addOutputPlainText("$CyDB:> getPageAccessCount;");
                mnCanvas.addOutputPlainText("$CyDB:> getPageAccessRelativeCount;");
                mnCanvas.addOutputPlainText("$CyDB:> resetPageAccessRelativeCount;");
        }

        public int getparent()
        {
                return parent;
        }

        public void setparent(int t)
        {
                parent = t;
        }

        public String replaceVariableInString(String str) {
                // find all the ($$abc) variables
                int startIndex;

                // Note: the value of any variable should not contain strings like "($$ .. )", since those must have been replaced before assigning them to a variable.
                while ( (startIndex = str.indexOf("($$")) != -1) {
                        String var = str.substring(startIndex+3);
                        int endIndex = var.indexOf(")");
                        var = var.substring(0, endIndex);
                        String regex = "($$" + var + ")";
                        String replacement = getVariableValue(var);
                        str = str.replace(regex, replacement);
                }

                return str;
        }

        /**
	 * return the value of the variable in StringHashtable or StringArrayHashtable
	 * return "" if the variable is not found, or the index is out of the bound
	 */
        public String getVariableValue(String strVarName) {
                int iIndex = 0;
                String varName;
                boolean bArray;

                if (strVarName.indexOf("[") >= 0) {
                        varName = strVarName.substring(0, strVarName.indexOf("["));
                        String indexStr = strVarName.substring(strVarName.indexOf("[")+1, strVarName.indexOf("]"));
                        if (indexStr.startsWith("$$"))
                                iIndex = Integer.parseInt(getVariableValue(indexStr.substring(2)));
                        else
                                iIndex = Integer.parseInt(indexStr);
                        bArray = true;
                }
                else {
                        varName = strVarName;
                        bArray = false;
                }
                // look in the String and String Array hash table for this variable
                if (!bArray) {
                        // s1 is a String variable
                        if (htStringList.containsKey(varName)) {
                                return htStringList.get(varName);
                        }
                        else if (htIntList.containsKey(varName)) {
                                return Integer.toString(htIntList.get(varName));
                        }
                                return "";
                }
                else {
                        if (htStringArrayList.containsKey(varName)) {
                                // s1 is a String array variable
                                if (iIndex >= htStringArrayIndex.get(varName).intValue())
                                        return "";
                                return ((String[])htStringArrayList.get(varName))[iIndex];
                        } else if (htIntArrayList.containsKey(varName)) {
                                // s1 is a int array variable
                                if (iIndex >= htIntArrayIndex.get(varName).intValue())
                                        return "";
                                return Integer.toString(((int[])htIntArrayList.get(varName))[iIndex]);
                        } else
                                return "";
                }
        }

        public boolean checkLogFileExist(String logName) {
                for (int i=0; i<logcount; i++)
                        if (loglist[i].equals(logName)) {
                                return true;
                        }

                return false;
        }

//Rule 0
  final public void ProductionRules() throws ParseException {
        String s;
        int i;

    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CYDBPREFIX:
      case START_SHOWTEXT:
      case END_SHOWTEXT:
      case PREFIXID:
      case REMARKSTRING:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      s = Statement();

    }
    jj_consume_token(0);

  }

//Rule 1, Condition() and Loophead() don't need any prefix.
  final public String Statement() throws ParseException {
        Token t1, t2;
        String s,s1,s2;
        int i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case START_SHOWTEXT:
      jj_consume_token(START_SHOWTEXT);
                //mnCanvas.addOutput("<pre>");
                mnCanvas.setOutputPaneHtml(false);
                {if (true) return "<showtext>";}
      break;
    case END_SHOWTEXT:
      jj_consume_token(END_SHOWTEXT);
                mnCanvas.setOutputPaneHtml(true);
                //mnCanvas.addOutput("</pre>");
                {if (true) return "</showtext>";}
      break;
    case REMARKSTRING:
      t1 = jj_consume_token(REMARKSTRING);
      jj_consume_token(SEMICOLON);
                s = t1.image;

                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput(s + ";");
        mnCanvas.setOutputPaneBlueRemark(false);
        //mnCanvas.addOutputBlankLine();

        {if (true) return s;}
      break;
    case CYDBPREFIX:
      jj_consume_token(CYDBPREFIX);
      jj_consume_token(GT);
      s2 = Stmt();
                //System.out.println("Rule 1 Statement = Prefix :> Stmt [ log>> <TAG> <XML> ] [ out>> <TAG> <XML> ] ;");
                mnCanvas.addOutputBlankLine();
                s = s2;
                {if (true) return s+" ;";}
      break;
    case PREFIXID:
      t1 = jj_consume_token(PREFIXID);
      t2 = jj_consume_token(QSTRING);
      jj_consume_token(SEMICOLON);
                s1 = t1.image;
        s = t2.image;
        s = s.substring(2);

                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput(s1 + ":>" + s + ";");
                mnCanvas.setOutputPaneBlueRemark(false);
                //mnCanvas.addOutputBlankLine();

        //send the prefix and the command to the ClientManager
        mnCanvas.clientsmgr.execute(s1.substring(1), s);

        {if (true) return s1 + ":>" + s + " ;";}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//Rule 3, Stmt ...
  final public String Stmt() throws ParseException {
        Token t, t1, t2, t3, tLogType;
        String s ="",s1,s2 = "";
        String varName, timeLog, customLog;
        String logType = null, logTag = null, logFileName = null, outputFileName = null;
        boolean bArray;
        int i;
        GUIparser parserExecuteCommand;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RUN:
      // "run" command - execute [Variable1] [Variable2]
        t = jj_consume_token(RUN);
      s1 = Variable();
      s2 = Variable();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUTDIRECT:
        jj_consume_token(OUTDIRECT);
        jj_consume_token(106);
        t3 = jj_consume_token(FILENAME);
                outputFileName = replaceVariableInString(t3.image);
                //System.out.println("Output direct: " + replaceVariableInString(t3.image));	

        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGDIRECT:
        jj_consume_token(LOGDIRECT);
        tLogType = jj_consume_token(LOGTYPE);
        jj_consume_token(106);
        t1 = jj_consume_token(ROOTTAG);
        t2 = jj_consume_token(FILENAME);
                logType = tLogType.image;
                logTag = t1.image;
                logFileName = t2.image;
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> " + t.image + " " + s1 + ":> " + s2 + ";");
                mnCanvas.setOutputPaneBlueRemark(false);

                if (outputFileName == null)
                        outputFileName = "output.xml";
                parserExecuteCommand = new GUIparser(new StringReader(getVariableValue(s1) + ":> " + outputFileName + ":> " + getVariableValue(s2) + ";"));

                mnCanvas.clientsmgr.clearLogData();
                try {
                        parserExecuteCommand.ProductionRules();
                }
                catch (ParseException e1) {
                        System.out.println(e1.getMessage());
                }

                if (logType != null && logFileName != null) {
                        timeLog = mnCanvas.clientsmgr.getCurrentTimeLogData();
                        customLog = mnCanvas.clientsmgr.getCurrentCustomLogData();
                        s = "$CyDB:> run " + s1;

                        error = 1;
                        for (i=0; i<logcount; i++)
                           if (loglist[i].equals(logFileName)) {
                                error = 0;
                           }
                        if (error == 1) {
                                mnCanvas.addConsoleMessage("\u005cnThe file \u005c""+logFileName+"\u005c" does not exist");
                                errormsg("FILE "+logFileName+" not found");
                                {if (true) return " FILE "+logFileName+" not found";}
                        }
                        else {
                                if (logType.equalsIgnoreCase("custom"))
                                        updateLogFile(logTag, customLog, logFileName);
                                else if (logType.equalsIgnoreCase("time"))
                                        updateLogFile(logTag, timeLog, logFileName);
                                else
                                        updateLogFile(logTag, "", logFileName);
                                s += " log>> .xml";
                        }
                }

                {if (true) return s;}
      break;
    case EXECUTE:
      t = jj_consume_token(EXECUTE);
      s1 = Variable();
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> " + t.image + " " + s1 + ";");
                mnCanvas.setOutputPaneBlueRemark(false);

                //mnCanvas.addOutput("The value of variable \"" + s1 + "\" is: " + getVariableValue(s1));
                parserExecuteCommand = new GUIparser(new StringReader(getVariableValue(s1) + ";"));

                mnCanvas.clientsmgr.clearLogData();
                try {
                        parserExecuteCommand.ProductionRules();
                }
                catch (ParseException e1) {
                        System.out.println(e1.getMessage());
                }

                timeLog = mnCanvas.clientsmgr.getCurrentTimeLogData();
                customLog = mnCanvas.clientsmgr.getCurrentCustomLogData();
                s = "$CyDB:> execute " + s1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUTDIRECT:
        jj_consume_token(OUTDIRECT);
        jj_consume_token(106);
        jj_consume_token(FILENAME);
                s += " out>> .xml";
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGDIRECT:
        jj_consume_token(LOGDIRECT);
        tLogType = jj_consume_token(LOGTYPE);
        jj_consume_token(106);
        t1 = jj_consume_token(ROOTTAG);
        t2 = jj_consume_token(FILENAME);
                error = 1;
                for (i=0; i<logcount; i++)
                   if (loglist[i].equals(t2.image)) {
                        error = 0;
                   }
                if (error == 1) {
                        mnCanvas.addConsoleMessage("\u005cnThe file \u005c""+t2.image+"\u005c" does not exist");
                        errormsg("FILE "+t2.image+" not found");
                        {if (true) return " FILE "+t2.image+" not found";}
                }
                else {
                        if (tLogType.image.equalsIgnoreCase("custom"))
                                updateLogFile(t1.image, customLog, t2.image);
                        else if (tLogType.image.equalsIgnoreCase("time"))
                                updateLogFile(t1.image, timeLog, t2.image);
                        else
                                updateLogFile(t1.image, "", t2.image);
                        s += " log>> .xml";
                }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
                {if (true) return s;}
      break;
    case PAUSE:
      jj_consume_token(PAUSE);
      jj_consume_token(SEMICOLON);
          {if (true) return "$CyDB:> pause";}
      break;
    case OPERATIONSLOG:
      jj_consume_token(OPERATIONSLOG);
      jj_consume_token(SEMICOLON);
          {if (true) return " operationslog";}
      break;
    case LIST:
      t = jj_consume_token(LIST);
      s1 = Listpara();
      jj_consume_token(SEMICOLON);
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> " + t.image + " " + s1 + ";");
                mnCanvas.setOutputPaneBlueRemark(false);

                if (s1.equalsIgnoreCase("variables"))
                        listVariables();
                else if (s1.equalsIgnoreCase("commands"))
                        listCommands();
                {if (true) return "$CyDB:> " + t.image + " " + s1;}
      break;
    case CLEAR:
      t = jj_consume_token(CLEAR);
      s1 = Clearpara();
      jj_consume_token(SEMICOLON);
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> " + t.image + " " + s1 + ";");
                mnCanvas.setOutputPaneBlueRemark(false);

                if (s1.equalsIgnoreCase("variables"))
                        clearVariables();
                else if (s1.equalsIgnoreCase("logs"))
                        clearLogs();

                {if (true) return "$CyDB:> " + t.image + " " + s1;}
      break;
    case CREATEXML:
      t = jj_consume_token(CREATEXML);
      t1 = jj_consume_token(ROOTTAG);
      t2 = jj_consume_token(FILENAME);
      jj_consume_token(SEMICOLON);
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + " " + t2.image + ";");
                mnCanvas.setOutputPaneBlueRemark(false);

                if (checkLogFileExist(t2.image)) {
                        mnCanvas.addConsoleMessage("\u005cnThe file already exists");
                        error = 1;
                        errormsg("FILENAME conflicts");
                        {if (true) return " FILENAME conflicts";}
                }

                loglist[logcount] = t2.image;
                logcount++;
                createLogFile(t1.image, t2.image);
                {if (true) return "$CyDB:> createlog " + t1.image + " " + t2.image;}
      break;
    case DISPLAYFILE:
      t = jj_consume_token(DISPLAYFILE);
      t1 = jj_consume_token(FILENAME);
      jj_consume_token(SEMICOLON);
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + ";");
                mnCanvas.setOutputPaneBlueRemark(false);

                try {
                        if (new File(t1.image).exists()) {
                                FileDisplayDlg xmlview = new FileDisplayDlg(t1.image, "");
                        }
                        else {
                                mnCanvas.addConsoleMessage("The file does not exist");
                        }
                }
                catch (Exception e) {
                        System.out.println(e.getMessage());
                }

                {if (true) return "$CyDB:> displayFile " + t1.image;}
      break;
    case DISPLAYXML:
      t = jj_consume_token(DISPLAYXML);
      t1 = jj_consume_token(FILENAME);
      jj_consume_token(SEMICOLON);
        mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + ";");
                mnCanvas.setOutputPaneBlueRemark(false);

try {
                        if (new File(t1.image).exists()) {
                                HybridView h = new HybridView(new File(t1.image));
                        }
                        else {
                                mnCanvas.addConsoleMessage("The file does not exist");
                        }
                }
                catch (Exception e) {
                        System.out.println(e.getMessage());
                }

                {if (true) return "$CyDB:> displayFile " + t1.image;}
      break;
    case DISPLAYTXT:
      t = jj_consume_token(DISPLAYTXT);
      t1 = jj_consume_token(FILENAME);
      jj_consume_token(SEMICOLON);
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + ";");
                mnCanvas.setOutputPaneBlueRemark(false);

                try {
                        if (new File(t1.image).exists()) {
                                FileDisplayDlg xmlview = new FileDisplayDlg(t1.image, "");
                        }

                        else {
                                mnCanvas.addConsoleMessage("The file does not exist");
                        }
                }
                catch (Exception e) {
                        System.out.println(e.getMessage());
                }

                {if (true) return "$CyDB:> displayFile " + t1.image;}
      break;
    case DISPLAYPDF:
      t = jj_consume_token(DISPLAYPDF);
      t1 = jj_consume_token(FILENAME);
      jj_consume_token(SEMICOLON);
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + ";");
                mnCanvas.setOutputPaneBlueRemark(false);

                try {
                        if (new File(t1.image).exists()) {
                                FileDisplayDlg pdfview = new FileDisplayDlg(t1.image, "");
                        }
                        else {
                                mnCanvas.addConsoleMessage("The file does not exist");
                        }
                }
                catch (Exception e) {
                        System.out.println(e.getMessage());
                }

                {if (true) return "$CyDB:> displayFile " + t1.image;}
      break;
    case DECLARE:
      jj_consume_token(DECLARE);
      t1 = jj_consume_token(TYPE);
                bArray = false;
                s = t1.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        t2 = jj_consume_token(LBRACKET);
        s2 = Expression();
        jj_consume_token(RBRACKET);
                bArray = true;
                s += "[" + s2 + "]";
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      s1 = NewVariable();
                if (t1.image.equals("int") && !bArray) {
                        if (htIntList.containsKey(s1)) {
                                mnCanvas.addConsoleMessage("\u005cnThe int variable:" + s1 + " has already been declared");
                                error = 1;
                                errormsg("variable name conflicts");
                                {if (true) return " variable name conflicts";}
                        } else if (htStringList.containsKey(s1)) {
                                mnCanvas.addConsoleMessage("\u005cnThe string variable:" + s1 + " has already been declared with the same name");
                                error = 1;
                                errormsg("variable name conflicts");
                                {if (true) return " variable name conflicts";}
                        }

                        htIntList.put(s1, 0);
                        intcount++;
                }
                else if (t1.image.equals("string") && !bArray) {
                        if (htStringList.containsKey(s1)) {
                                mnCanvas.addConsoleMessage("\u005cnThe string variable:" + s1 + " has already been declared");
                                error = 1;
                                errormsg("variable name conflicts");
                                {if (true) return " variable name conflicts";}
                        } else if (htIntList.containsKey(s1)) {
                                mnCanvas.addConsoleMessage("\u005cnThe int variable:" + s1 + " has already been declared with the same name");
                                error = 1;
                                errormsg("variable name conflicts");
                                {if (true) return " variable name conflicts";}
                        }

                        htStringList.put(s1, "");
                        stringcount++;
                }
                else if (t1.image.equals("string") && bArray) {
                        if (htStringArrayList.containsKey(s1)) {
                                mnCanvas.addConsoleMessage("\u005cnThe string array variable already exists");
                                error = 1;
                                errormsg("string array variable conflicts");
                                {if (true) return " string array variable conflicts";}
                        }

                        int iArraySize = Integer.parseInt(s2.trim());
                        htStringArrayList.put(s1, new String[iArraySize]);
                        htStringArrayIndex.put(s1, new Integer(iArraySize));
                }
                else if (t1.image.equals("int") && bArray) {
                        if (htIntArrayList.containsKey(s1)) {
                                mnCanvas.addConsoleMessage("\u005cnThe int array variable already exists");
                                error = 1;
                                errormsg("int array variable conflicts");
                                {if (true) return " int array variable conflicts";}
                        }

                        int iArraySize = Integer.parseInt(s2.trim());
                        htIntArrayList.put(s1, new int[iArraySize]);
                        htIntArrayIndex.put(s1, new Integer(iArraySize));
                }

                s += " " + s1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGNSTRING:
        t2 = jj_consume_token(ASSIGNSTRING);
                s2 = t2.image.substring(2).trim();
                if (t1.image.equals("int")) {
                        htIntList.put(s1, Integer.parseInt(s2));
                }
                else if (t1.image.equals("string")) {
                        htStringList.put(s1,replaceVariableInString(s2));
                }
                else if (t1.image.equals("string[")) {
                        mnCanvas.addConsoleMessage("Can not assign values to a string array in declaration!");
                        {if (true) return "can not assign values to a string array";}
                }
                else if (t1.image.equals("int[")) {
                        mnCanvas.addConsoleMessage("Can not assign values to an int array in declaration!");
                        {if (true) return "can not assign values to an int array";}
                }
                s += t2.image;
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> declare " + s + ";");
                mnCanvas.setOutputPaneBlueRemark(false);

                {if (true) return "$CyDB:> declare " + s;}
      break;
    case UNDECLARE:
      jj_consume_token(UNDECLARE);
      t1 = jj_consume_token(TYPE);
                bArray = false;
                s = t1.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                bArray = true;
                s += "[]";
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      s1 = Variable();
      jj_consume_token(SEMICOLON);
                s += " " + s1;
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> undeclare " + s + ";");
                mnCanvas.setOutputPaneBlueRemark(false);

                if (t1.image.equals("int") && !bArray) {
                        if (htIntList.containsKey(s1)) {
                                htIntList.remove(s1);
                                mnCanvas.addConsoleMessage("\u005cnThe int variable:" + s1 + " has been removed successfully");
                                {if (true) return " undeclare int " + s1;}
                        } else {
                                mnCanvas.addConsoleMessage("\u005cnThe int variable:" + s1 + " has not been declared yet");
                                {if (true) return " not declared";}
                        }

                }
                else if (t1.image.equals("string") && !bArray) {
                        if (htStringList.containsKey(s1)) {
                                htStringList.remove(s1);
                                mnCanvas.addConsoleMessage("\u005cnThe string variable:" + s1 + " has been removed successfully");
                                {if (true) return " undeclare string " + s1;}
                        } else {
                                mnCanvas.addConsoleMessage("\u005cnThe string variable:" + s1 + " has not been declared yet");
                                {if (true) return " not declared";}
                        }

                }
                else if (t1.image.equals("string") && bArray) {
                        if (htStringArrayList.containsKey(s1)) {
                                htStringArrayList.remove(s1);
                                mnCanvas.addConsoleMessage("\u005cnThe string array variable:" + s1 + " has been removed successfully.");
                                {if (true) return " undeclare string[] " + s1;}
                        } else {
                                mnCanvas.addConsoleMessage("\u005cnThe string array variable:" + s1 + " has not been declared yet.");
                                {if (true) return " not declared";}
                        }
                }
                else if (t1.image.equals("int") && bArray) {
                        if (htIntArrayList.containsKey(s1)) {
                                htIntArrayList.remove(s1);
                                mnCanvas.addConsoleMessage("\u005cnThe int array variable:" + s1 + " has been removed successfully.");
                                {if (true) return " undeclare int[] " + s1;}
                        } else {
                                mnCanvas.addConsoleMessage("\u005cnThe int array variable:" + s1 + " has not been declared yet.");
                                {if (true) return " not declared";}
                        }
                }

                {if (true) return "$CyDB:> undeclare " + s;}
      break;
    case SET:
      jj_consume_token(SET);
      s1 = Variable();
      t2 = jj_consume_token(ASSIGNSTRING);
      jj_consume_token(SEMICOLON);
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> set " + s1 + " " + t2.image + ";");
                mnCanvas.setOutputPaneBlueRemark(false);

                s2 = t2.image.substring(2).trim();
                // set the value of a variable (int, String or array)
                if (s1.indexOf("[") >= 0) {
                        varName = s1.substring(0, s1.indexOf("["));
                        bArray = true;
                } else {
                        varName = s1;
                        bArray = false;
                }

                if ( !bArray ) {
                        // this is a string or int variable
                        if (htStringList.containsKey(s1))
                                htStringList.put(s1, replaceVariableInString(s2));
                        else if (htIntList.containsKey(s1))
                                htIntList.put(s1, Integer.parseInt(s2));
                        else
                                mnCanvas.addConsoleMessage("\u005cnThe variable: " + varName + " is not declared");
                } else {
                        // else this is a string or int array variable
                        int curIndex = Integer.parseInt(s1.substring(s1.indexOf("[")+1, s1.indexOf("]")));

                        if (htStringArrayList.containsKey(varName)) {
                                String[] curArray = htStringArrayList.get(varName);
                                if ((curIndex >= 0)&&(curIndex < htStringArrayIndex.get(varName).intValue())) {
                                        curArray[curIndex] = replaceVariableInString(s2);
                                        htStringArrayList.put(varName,curArray);
                                }
                                else
                                        mnCanvas.addConsoleMessage("\u005cnThe index: " + curIndex + " is out of the bound of the string array: " + varName );

                        } else if (htIntArrayList.containsKey(varName)) {
                                int[] curIntArray = htIntArrayList.get(varName);
                                if ((curIndex >= 0)&&(curIndex < htIntArrayIndex.get(varName).intValue())) {
                                        curIntArray[curIndex] = Integer.parseInt(s2);
                                        htIntArrayList.put(varName,curIntArray);
                                }
                                else
                                        mnCanvas.addConsoleMessage("\u005cnThe index: " + curIndex + " is out of the bound of the int array: " + varName );

                        } else
                                mnCanvas.addConsoleMessage("\u005cnThe array variable is not declared");
                }
                {if (true) return "$CyDB:> set " + s1 + " " + t2.image;}
      break;
    case STAR:
      jj_consume_token(STAR);
      s = Expression();
      jj_consume_token(SEMICOLON);
                //System.out.println("Rule 3 Stmt = Expression ");
                {if (true) return s;}
      break;
    case CREATEFILE:
      t = jj_consume_token(CREATEFILE);
      t1 = jj_consume_token(FILENAME);
                mnCanvas.setOutputPaneBlueRemark(true);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        t2 = jj_consume_token(NUM);
                mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + " " + t2.image + ";");
                s = t2.image;
        break;
      case 107:
        s2 = Variable();
                mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + " $$" + s2 + ";");
                s = getVariableValue(s2);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEMICOLON);
                mnCanvas.setOutputPaneBlueRemark(false);
                //mnCanvas.addOutputBlankLine();

                //send the command to SM manager
                csxParser.parse(t.image, t.image + " " + t1.image + " " + s);

                {if (true) return "$CyDB:> " + t.image + " " + t1.image;}
      break;
    case COPYFILE:
      t = jj_consume_token(COPYFILE);
      t1 = jj_consume_token(FILENAME);
      t2 = jj_consume_token(FILENAME);
      jj_consume_token(SEMICOLON);
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + " " + t2.image + ";");
                mnCanvas.setOutputPaneBlueRemark(false);
                //mnCanvas.addOutputBlankLine();

                //send the command to SM manager
                csxParser.parse(t.image, t.image + " " + t1.image + " " + t2.image);

                {if (true) return "$CyDB:> " + t.image + " " + t1.image + " " + t2.image;}
      break;
    case GENERATEINDEX:
      t = jj_consume_token(GENERATEINDEX);
      t1 = jj_consume_token(FILENAME);
      t2 = jj_consume_token(FILENAME);
      jj_consume_token(SEMICOLON);
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + " " + t2.image + ";");
                mnCanvas.setOutputPaneBlueRemark(false);
                //mnCanvas.addOutputBlankLine();

                csxParser.generateIndex(t1.image, t2.image);

                {if (true) return "$CyDB:> " + t.image + " " + t1.image + " " + t2.image;}
      break;
    case PRINTINDEXELEMENTS:
      t = jj_consume_token(PRINTINDEXELEMENTS);
      t3 = jj_consume_token(ID);
      t1 = jj_consume_token(ID);
      t2 = jj_consume_token(FILENAME);
      jj_consume_token(SEMICOLON);
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> " + t3.image + " " + t.image + " " + t1.image + " " + t2.image + ";");
                mnCanvas.setOutputPaneBlueRemark(false);
                //mnCanvas.addOutputBlankLine();

                csxParser.printIndexedElements(t3.image, t1.image, t2.image);

                {if (true) return "$CyDB:> " + t.image + " " + t3.image + " " + t1.image + " " + t2.image;}
      break;
    case COUNTINDEXELEMENTS:
      t = jj_consume_token(COUNTINDEXELEMENTS);
      t3 = jj_consume_token(ID);
      t1 = jj_consume_token(ID);
      t2 = jj_consume_token(FILENAME);
      jj_consume_token(SEMICOLON);
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> " + t3.image + " " + t.image + " " + t1.image + " " + t2.image + ";");
                mnCanvas.setOutputPaneBlueRemark(false);
                //mnCanvas.addOutputBlankLine();

                csxParser.countIndexedElements(t3.image, t1.image, t2.image);

                {if (true) return "$CyDB:> " + t.image + " " + t1.image + " " + t2.image;}
      break;
    case PRINTBYEXACTMATCH:
      t = jj_consume_token(PRINTBYEXACTMATCH);
      t1 = jj_consume_token(ID);
      t2 = jj_consume_token(NUM);
      t3 = jj_consume_token(FILENAME);
      jj_consume_token(SEMICOLON);
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + " " + t2.image + " " + t3.image + ";");
                mnCanvas.setOutputPaneBlueRemark(false);
                //mnCanvas.addOutputBlankLine();

                csxParser.printIndexedElementbyExactMatch(t1.image, t2.image, t3.image);

                {if (true) return "$CyDB:> " + t.image + " " + t1.image + " " + t2.image + " " + t3.image;}
      break;
    case DELETEFILE:
      t = jj_consume_token(DELETEFILE);
      t1 = jj_consume_token(FILENAME);
      jj_consume_token(SEMICOLON);
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + ";");
                mnCanvas.setOutputPaneBlueRemark(false);
                //mnCanvas.addOutputBlankLine();

                //send the command to SM manager
                csxParser.parse(t.image, t.image + " " + t1.image);

                {if (true) return "$CyDB:> " + t.image + " " + t1.image;}
      break;
    case STORAGECOUNTERCOMMANDS:
      t = jj_consume_token(STORAGECOUNTERCOMMANDS);
      jj_consume_token(SEMICOLON);
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> " + t.image + ";");
                mnCanvas.setOutputPaneBlueRemark(false);
                //mnCanvas.addOutputBlankLine();

                //send the command to SM manager
                csxParser.parse(t.image, t.image);

                {if (true) return "$CyDB:> " + t.image;}
      break;
    case CREATERAWSTORAGE:
      t = jj_consume_token(CREATERAWSTORAGE);
      t1 = jj_consume_token(FILENAME);
      jj_consume_token(SEMICOLON);
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + ";");
                mnCanvas.setOutputPaneBlueRemark(false);
                //mnCanvas.addOutputBlankLine();

                //send the command to SM manager
                csxParser.parse(t.image, t.image + " " + t1.image);

                {if (true) return "$CyDB:> " + t.image + " " + t1.image;}
      break;
    case CREATESTORAGE:
      t = jj_consume_token(CREATESTORAGE);
      t1 = jj_consume_token(FILENAME);
      jj_consume_token(SEMICOLON);
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + ";");
                mnCanvas.setOutputPaneBlueRemark(false);
                //mnCanvas.addOutputBlankLine();

                //send the command to SM manager
                csxParser.parse(t.image, t.image + " " + t1.image);

                {if (true) return "$CyDB:> " + t.image + " " + t1.image;}
      break;
    case LOADSTORAGE:
      t = jj_consume_token(LOADSTORAGE);
      t1 = jj_consume_token(FILENAME);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        t2 = jj_consume_token(NUM);
   s =t2.image;
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + ";");
                mnCanvas.setOutputPaneBlueRemark(false);
                //mnCanvas.addOutputBlankLine();

                //send the command to SM manager
                if(s== null)
                csxParser.parse(t.image, t.image + " " + t1.image);
        else
          csxParser.parse(t.image, t.image + " " + t1.image + " "+s);
                {if (true) return "$CyDB:> " + t.image + " " + t1.image;}
      break;
    case FORMATSTORAGE:
      t = jj_consume_token(FORMATSTORAGE);
      t1 = jj_consume_token(NUM);
      jj_consume_token(SEMICOLON);
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + ";");
                mnCanvas.setOutputPaneBlueRemark(false);
                //mnCanvas.addOutputBlankLine();

                //send the command to SM manager
                csxParser.parse(t.image, t.image + " " + t1.image);

                {if (true) return "$CyDB:> " + t.image + " " + t1.image;}
      break;
    case REFORMATSTORAGE:
      t = jj_consume_token(REFORMATSTORAGE);
      t1 = jj_consume_token(FILENAME);
      t2 = jj_consume_token(NUM);
      jj_consume_token(SEMICOLON);
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + " "+ t2.image + ";");
                mnCanvas.setOutputPaneBlueRemark(false);
                //mnCanvas.addOutputBlankLine();

                //send the command to SM manager
                csxParser.parse(t.image, t1.image + " "+ t2.image);

                {if (true) return "$CyDB:> " + t.image + " " + t1.image;}
      break;
    case STARTBUFFERMANAGER:
      t = jj_consume_token(STARTBUFFERMANAGER);
      t1 = jj_consume_token(NUM);
      jj_consume_token(SEMICOLON);
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> " + t.image + " " + t1.image + ";");
                mnCanvas.setOutputPaneBlueRemark(false);
                //mnCanvas.addOutputBlankLine();

                //send the command to SM manager
                csxParser.parse(t.image, t.image + " " + t1.image);

                {if (true) return "$CyDB:> " + t.image + " " + t1.image;}
      break;
    case SHOWDIRECTORY:
      t = jj_consume_token(SHOWDIRECTORY);
      jj_consume_token(SEMICOLON);
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> " + t.image + ";");
                mnCanvas.setOutputPaneBlueRemark(false);
                //mnCanvas.addOutputBlankLine();

                //send the command to SM manager
                csxParser.showDirectory();

                {if (true) return "$CyDB:> " + t.image;}
      break;
    case DEMOFORSTORAGE:
      t = jj_consume_token(DEMOFORSTORAGE);
      jj_consume_token(SEMICOLON);
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> " + t.image + ";");
                mnCanvas.setOutputPaneBlueRemark(false);
                //mnCanvas.addOutputBlankLine();

                //send the command to SM manager
                csxParser.parse(t.image, t.image);

                {if (true) return "$CyDB:> " + t.image;}
      break;
    case WRITEBITMAP:
      t = jj_consume_token(WRITEBITMAP);
      jj_consume_token(SEMICOLON);
                mnCanvas.setOutputPaneBlueRemark(true);
                mnCanvas.addOutput("$CyDB:> " + t.image + ";");
                mnCanvas.setOutputPaneBlueRemark(false);
                //mnCanvas.addOutputBlankLine();

                //send the command to SM manager
                csxParser.writeBitMap();

                {if (true) return "$CyDB:> " + t.image;}
      break;
    case IF:
      s1 = Condition();
                //System.out.println("Rule 1 Statement = Condition");
                conditionsend(s1);
                {if (true) return s1;}
      break;
    case FOREACH:
    case WHILE:
      s1 = Loophead();
      s2 = Blockstmt();
                //System.out.println("Rule 1 Statement = Loophead Blockstmt");
                foreachsend(s1,s2);
                {if (true) return "";}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// rule 4, Expression = Term (+ Term)*
  final public String Expression() throws ParseException {
        java.util.Vector termimage = new java.util.Vector();
        String s;
        boolean bOpPlus = false;
    s = Term();
          termimage.addElement(s);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
           bOpPlus = true;
        break;
      case MINUS:
        jj_consume_token(MINUS);
                                   bOpPlus = false;
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      s = Term();
                if (bOpPlus)
                        s = "+" + s;
                else
                        s = "-" + s;
                termimage.addElement(s);
    }
                int iValue = 0;
//		System.out.println("Rule 4 Expression = Term +/- Term");
                if (termimage.size() == 1) {
                        {if (true) return (String)termimage.elementAt(0);}
                } else {
                        iValue = Integer.parseInt((String)termimage.elementAt(0));
                        for (int i = 1; i < termimage.size(); i++) {
                                String strElement = (String)termimage.elementAt(i);
                                if (strElement.substring(0,1).equalsIgnoreCase("+"))
                                        iValue += Integer.parseInt(strElement.substring(1));
                                else
                                        iValue -= Integer.parseInt(strElement.substring(1));
                        }
            {if (true) return Integer.toString(iValue);}
                }
    throw new Error("Missing return statement in function");
  }

// rule 5, Term = Factor (* Factor)*
  final public String Term() throws ParseException {
        java.util.Vector factorimage = new java.util.Vector();
        String s;
        boolean bOpMultiply = false;
    s = Factor();
          factorimage.addElement(s);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
          bOpMultiply = true;
        break;
      case SLASH:
        jj_consume_token(SLASH);
                                      bOpMultiply = false;
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      s = Factor();
                if (bOpMultiply)
                        s = "*" + s;
                else
                        s = "/" + s;
                factorimage.addElement(s);
    }
//		System.out.println("Rule 5 Term = Factor * Factor");
                int iValue = 0;
                if (factorimage.size() == 1) {
                        {if (true) return (String)factorimage.elementAt(0);}
                } else {
                        iValue = Integer.parseInt((String)factorimage.elementAt(0));
                        for (int i = 1; i < factorimage.size(); i++) {
                                String strElement = (String)factorimage.elementAt(i);
                                if (strElement.substring(0,1).equalsIgnoreCase("*"))
                                        iValue *= Integer.parseInt(strElement.substring(1));
                                else
                                        iValue /= Integer.parseInt(strElement.substring(1));
                        }
                        {if (true) return Integer.toString(iValue);}
                }
    throw new Error("Missing return statement in function");
  }

// rule 6, Factor : Variable | NUM | (Expression)
  final public String Factor() throws ParseException {
        Token t;
        String s, varName;
        boolean bArray;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 107:
      s = Variable();
//	System.out.println("Rule 6 Factor = Variable");
                if (s.indexOf("[") >= 0) {
                        varName = s.substring(0, s.indexOf("["));
                        bArray = true;
                } else {
                        varName = s;
                        bArray = false;
                }

                if ( !bArray ) {
                        // this is a int variable
                        if (htStringList.containsKey(s))
                                {if (true) return getVariableValue(s);}
                                //mnCanvas.addConsoleMessage("\nThe type of the variable: " + varName + " is string. Only int type variable can appear in an Expression.");
                        else if (htIntList.containsKey(s))
                                {if (true) return getVariableValue(s);}
                        else
                                mnCanvas.addConsoleMessage("\u005cnThe variable: " + varName + " is not declared");
                } else {
                        // else this is a int or string array variable
                        //int curIndex = Integer.parseInt(s.substring(s.indexOf("[")+1, s.indexOf("]")));

                        if (htStringArrayList.containsKey(varName)) {
                                {if (true) return getVariableValue(s);}
                                //mnCanvas.addConsoleMessage("\nThe type of the array variable: " + varName + " is string. Only int type variable can appear in an Expression.");
                        } else if (htIntArrayList.containsKey(varName)) {
                                {if (true) return getVariableValue(s);}
                        } else
                                mnCanvas.addConsoleMessage("\u005cnThe array variable is not declared");
                }
                {if (true) return s;}
      break;
    case NUM:
      t = jj_consume_token(NUM);
//	System.out.println("Rule 6 Factor = NUM");
                {if (true) return t.image;}
      break;
    case CONSTSTRING:
      t = jj_consume_token(CONSTSTRING);
                String conststr = t.image;
                {if (true) return conststr.substring(1, conststr.length()-1);}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      s = Expression();
      jj_consume_token(RPAREN);
//	System.out.println("Rule 6 Factor = Expression");
                {if (true) return s;}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// rule 7, variable : <ID> | <ID> '[' expr ']'
  final public String Variable() throws ParseException {
        String s, s1;
        Token t;
    jj_consume_token(107);
    t = jj_consume_token(ID);
//	System.out.println("Rule 7 Variable = ID");
          s = t.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      s1 = Expression();
      jj_consume_token(RBRACKET);
//	System.out.println("Rule 7 Variable = ID [NUM]");
          s += "["+s1+"]";
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
          {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

//rule 7a
  final public String NewVariable() throws ParseException {
        Token t;
    jj_consume_token(107);
    t = jj_consume_token(ID);
//	System.out.println("Rule 7a NewVariable = ID");
          {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

// rule 8
  final public String Listpara() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMANDS:
      jj_consume_token(COMMANDS);
  {if (true) return "commands";}
      break;
    case VARIABLES:
      jj_consume_token(VARIABLES);
  {if (true) return "variables";}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// rule 9
  final public String Clearpara() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOGS:
      jj_consume_token(LOGS);
  {if (true) return "logs";}
      break;
    case VARIABLES:
      jj_consume_token(VARIABLES);
  {if (true) return "variables";}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// rule 12
  final public String Condition() throws ParseException {
        Token t1, t2;
        String s,s1;
        int i;
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    s1 = Boolean();
    jj_consume_token(RPAREN);
          s = "if(" + s1 + ")";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOGDIRECT:
      jj_consume_token(LOGDIRECT);
      jj_consume_token(LOGTYPE);
      jj_consume_token(106);
      t1 = jj_consume_token(ROOTTAG);
      t2 = jj_consume_token(FILENAME);
                error = 1;
                for (i=0; i<logcount; i++)
                   if (loglist[i].equals(t2.image)) {
                        error = 0;
                   }
                if (error == 1) {
                        mnCanvas.addConsoleMessage("\u005cnThe file \u005c""+t2.image+"\u005c" does not exist");
                        errormsg("FILE "+t2.image+" not found");
                        {if (true) return " FILE "+t2.image+" not found";}
                }
                else {
                        //updateLogFile(t1.image, "", t2.image);
                        s += "::log>>" + t1.image + "," + t2.image;
                }
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    s1 = Blockstmt();
          s += "::" + s1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
          s += "::else";
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGDIRECT:
        jj_consume_token(LOGDIRECT);
        jj_consume_token(LOGTYPE);
        jj_consume_token(106);
        t1 = jj_consume_token(ROOTTAG);
        t2 = jj_consume_token(FILENAME);
                error = 1;
                for (i=0; i<logcount; i++)
                   if (loglist[i].equals(t2.image)) {
                        error = 0;
                   }
                if (error == 1) {
                        mnCanvas.addConsoleMessage("\u005cnThe file \u005c""+t2.image+"\u005c" does not exist");
                        errormsg("FILE "+t2.image+" not found");
                        {if (true) return " FILE "+t2.image+" not found";}
                }
                else {
                        //updateLogFile(t1.image, "", t2.image);
                        s += "::log>>" + t1.image + "," + t2.image;
                }
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      s1 = Blockstmt();
          s += "::" + s1;
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
                {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String Boolean() throws ParseException {
        String s,s1;
    s = Conjunction();
                if (s.equalsIgnoreCase("true") || s.equalsIgnoreCase("1"))
                        {if (true) return "true";}
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_4;
      }
      jj_consume_token(OR);
      s1 = Conjunction();
                if (s1.equalsIgnoreCase("true") || s1.equalsIgnoreCase("1"))
                        {if (true) return "true";}
    }
          {if (true) return "false";}
    throw new Error("Missing return statement in function");
  }

  final public String Conjunction() throws ParseException {
        String s,s1;
    s = Disjunction();
                if (!s.equalsIgnoreCase("true") && !s.equalsIgnoreCase("1"))
                        {if (true) return "false";}
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_5;
      }
      jj_consume_token(AND);
      s1 = Disjunction();
                if (!s1.equalsIgnoreCase("true") && !s1.equalsIgnoreCase("1"))
                        {if (true) return "false";}
    }
          {if (true) return "true";}
    throw new Error("Missing return statement in function");
  }

//Because of conflicts, the Boolean() : Disjunction() can not start with "("
  final public String Disjunction() throws ParseException {
        String s;
    //"(" Boolean() ")"
    s = Comp();
          {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String Comp() throws ParseException {
        String s, s1;
        int i, i1;
        int op;
    s = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 108:
      jj_consume_token(108);
          op = 0;
      break;
    case 109:
      jj_consume_token(109);
          op = 1;
      break;
    case GT:
      jj_consume_token(GT);
          op = 2;
      break;
    case 110:
      jj_consume_token(110);
          op = 3;
      break;
    case 111:
      jj_consume_token(111);
          op = 4;
      break;
    case 112:
      jj_consume_token(112);
          op = 5;
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    s1 = Expression();
                switch (op) {
                        case 0:
                                if (s.equalsIgnoreCase(s1))
                                        {if (true) return "true";}
                                else
                                        {if (true) return "false";}
                        case 1:
                                if (s.equalsIgnoreCase(s1))
                                        {if (true) return "false";}
                                else
                                        {if (true) return "true";}
                        case 2:
                                i = Integer.parseInt(s);
                                i1 = Integer.parseInt(s1);
                                if (i > i1)
                                        {if (true) return "true";}
                                else
                                        {if (true) return "false";}
                        case 3:
                                i = Integer.parseInt(s);
                                i1 = Integer.parseInt(s1);
                                if (i >= i1)
                                        {if (true) return "true";}
                                else
                                        {if (true) return "false";}
                        case 4:
                                i = Integer.parseInt(s);
                                i1 = Integer.parseInt(s1);
                                if (i < i1)
                                        {if (true) return "true";}
                                else
                                        {if (true) return "false";}
                        case 5:
                                i = Integer.parseInt(s);
                                i1 = Integer.parseInt(s1);
                                if (i <= i1)
                                        {if (true) return "true";}
                                else
                                        {if (true) return "false";}
                        default:
                                {if (true) return "false";}
                }
    throw new Error("Missing return statement in function");
  }

/*
String Blockstmt() :
{
	String s,s1;
}
{
"{" 
	{ s = "{";}
( s1=Statement() 
	{ s += s1;}
)* "}"
	{ return s + " }";}
| s=Statement()
	{ return s;}
}
*/
  final public String Blockstmt() throws ParseException {
        Token t1;
    t1 = jj_consume_token(BLOCKSTRING);
    jj_consume_token(113);
          {if (true) return t1.image.substring(1);}
    throw new Error("Missing return statement in function");
  }

  final public String Loophead() throws ParseException {
        Token t1, t2;
        String s,s1,s2;
        int i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOREACH:
      jj_consume_token(FOREACH);
      s1 = Variable();
      jj_consume_token(IN);
      s2 = Loopcondition();
                error = 1;
                if (htIntList.containsKey(s1)) {
                                error = 0;
                }
                if (error == 1) {
                        mnCanvas.addConsoleMessage("\u005cnThe variable \u005c""+s1+"\u005c" is not defined");
                        errormsg("VAR "+s1+" not defined");
                        {if (true) return " VAR "+s1+" not defined";}
                }
                else {
                        s = s1 + ":" + s2;
                }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGDIRECT:
        jj_consume_token(LOGDIRECT);
        jj_consume_token(LOGTYPE);
        jj_consume_token(106);
        t1 = jj_consume_token(ROOTTAG);
        t2 = jj_consume_token(FILENAME);
                error = 1;
                for (i=0; i<logcount; i++)
                   if (loglist[i].equals(t2.image)) {
                        error = 0;
                   }
                if (error == 1) {
                        mnCanvas.addConsoleMessage("\u005cnThe file \u005c""+t2.image+"\u005c" does not exist");
                        errormsg("FILE "+t2.image+" not found");
                        {if (true) return " FILE "+t2.image+" not found";}
                }
                else {
                        forlogon = 1;
                        forlogname = t2.image;

                        s += ":" + t1.image + "," + t2.image;
                }
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
          {if (true) return s;}
      break;
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      s1 = Boolean();
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGDIRECT:
        jj_consume_token(LOGDIRECT);
        jj_consume_token(LOGTYPE);
        jj_consume_token(106);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ROOTTAG:
          jj_consume_token(ROOTTAG);
          break;
        default:
          jj_la1[27] = jj_gen;
          ;
        }
        jj_consume_token(FILENAME);
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
          {if (true) return "while ( "+s1+" ) ";}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String Loopcondition() throws ParseException {
        String s1,s2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      s1 = Expression();
      jj_consume_token(114);
      s2 = Expression();
      jj_consume_token(RBRACKET);
          {if (true) return "( "+s1+" , "+s2+" )";}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      s1 = Expressionlist();
      jj_consume_token(RPAREN);
          {if (true) return s1;}
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String Expressionlist() throws ParseException {
        String s,s1;
    s = Expression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 114:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_6;
      }
      jj_consume_token(114);
      s1 = Expression();
          s += ","+s1;
    }
          {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public GUIparserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xd000,0xd000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe3980000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xee07fc61,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x800,0x200,0x800,0x200,0x2000000,0x0,0x2000000,0x0,0x0,0x40051073,0x30000000,0x30000000,0xc0000000,0xc0000000,0x800000,0x2000000,0x0,0x0,0x200,0x200,0x2000,0x4000,0x8000,0x8000000,0x200,0x0,0x200,0x50000,0x2800000,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x102,0x102,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x804,0x4,0x0,0x0,0x0,0x0,0x0,0xa04,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f000,0x0,0x20,0x0,0x0,0x0,0x40000,};
   }

  /** Constructor with InputStream. */
  public GUIparser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GUIparser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GUIparserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public GUIparser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GUIparserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public GUIparser(GUIparserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GUIparserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[115];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 32; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 115; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
